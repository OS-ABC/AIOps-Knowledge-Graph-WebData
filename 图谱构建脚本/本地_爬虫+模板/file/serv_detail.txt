ssl:::{'ssl是网络加密传输协议，是支持在网络服务器(主机)与网页浏览器(客户端)间建立加密连接的标准技术': 1, '简而言之，ssl是一种用于加密浏览器与网站之间数据交互（通信）的机制': 1, '我只介绍了皮毛，ssl是一项复杂且难以理解的技术': 1, '我们都知道ssl是需要签名证书的': 1, 'ssl是netscape公司所提出的安全保密协议，在浏览器（如internetexplorer、netscapenavigator）和web服务器（如netscape的netscapeenterpriseserver、coldfusionserver等等）之间构造安全通道来进行数据传输，ssl运行在tcp/ip层之上、应用层之下，为应用程序提供加密数据通道，它采用了rc4、md5以及rsa等加密算法，使用40位的密钥，适用于商业信息的加密': 1}
smartsense:::{'smartsense是hortonworks一个商业的组件功能,作用是监控集群,并提供建议,建议是不用': 2}
store:::{'keystore和truststore是jsse中使用的两种文件': 1, 'apistore是百度开放的api接口，供程序开发人员调用：网址：http://apistore.baidu.com/图片如下：示例代码如下：': 1}
drpc:::{'drpc是分布式远程过程调用（从客户端去查找服务器端的服务），是通过一个drpc服务端来实现分布式rpc功能的': 1, 'drpc是分布式的远程调用服务': 1, 'drpc是通过一个drpcserver来实现的': 1, 'drpc是通过一个drpc服务端(drpcserver)来实现分布式rpc功能的': 1, 'stormdrpc是什么': 1, 'distributedrpc是由一个”dprcserver”协调的(storm自带了一个实现)': 3, '2.drpc工作流介绍distributedrpc是由一个”dprcserver”协调的(storm自带了一个实现)': 1, 'distributedrpc是由一个”dprcserver”协调的(storm自带了一个实现)drpc服务器协调': 1, 'drpc：分布式rpc，storm中的drpc是使用storm实时并行计算真正强大的函数，storm拓扑作为输入接收函数参数流，并为每个函数调用发出结果的输出流': 1, '具体可以参考storm-starter，基本概念：\u3000\u3000storm是一个分布式实时处理框架;\u3000\u3000drpc是为了实现并发的rpc架构而实现的，其中d就是distributed，利用storm分布式、并发的能力，实现rpc的高性能;\u3000\u3000trident是storm0.8.0版本引入的新特性，为基于storm元语进行实时计算的用户提供了一类更高级的抽象元语，能够同时满足高吞吐量(每秒百万级的消息)与低处理延时': 1, '与其说drpc是storm的一个特性，不如说它是从storm的streams,spouts,bolts,topologies的原语中表达出来的模式': 1}
tableau:::{'tableau是一款数据可视化工具，致力于帮助人们查看并理解自己的数据；不同于传统bi软件，tableau是一款“轻”bi工具；您可以使用tableau的拖放界面可视化任何数据探索不同的视图，甚至可以轻松地将多个数据库组合在一起': 1, '不同于传统bi软件，tableau是一款“轻”bi工具；您可以使用tableau的拖放界面可视化任何数据，探索不同的视图，甚至可以轻松地将多个数据库组合在一起': 1, '总之，tableau是一款便捷高效的轻bi工具，很容易上手，值得一试': 1, 'tableau是一种商业智能软件，允许任何人连接到相应的数据，然后可视化并创建交互式的可共享仪表板': 2, 'tableau是一款数据分析软件，使用非常简单，通过数据的导入，结合数据操作，即可实现对数据进行分析，并生成可视化的图表直接展现给人们想要看到的通过数据分析出来的信息': 1}
pulse:::{'pulse是由zutubi推出的持续集成服务器，它会在代码变更后进行构建并通知构建结果': 1, '一个pulse是一个事件能指示场景图随时间变化的状态': 1, 'pulse是一项仅在几天前启动的全新服务，可为您的应用程序提供用户监视和见解': 1}
sonarqube:::{'sonarqube是一个用于管理源代码质量开放平台，可以从多个维度检测代码质量，快速的定位代码中潜在的或者明显的bug、错误，提供重复代码、编码标准、单元测试、代码覆盖率、代码复杂度、潜在bug、注释和软件设计报告': 1, 'sonarqube是代码检查工具的技术标杆之一，除了用来检查项目，它本身也是开源的，源码(代码结构/技术文档等)也必然是值得一读': 1, 'sonarqube是个自动化review工具，研发人员的好帮手': 1, 'sonarqube是管理代码质量一个开放平台，可以快速的定位代码中潜在的或者明显的错误，下面将会介绍一下这个工具的安装、配置以及使用': 2, 'sonarqube是一个开源的代码检测工具，可以分析很多种语言的代码存在的问题，当然更多更多支持是要钱的，不过一般的功能已经满足我们日常需求了': 1, '此时可以通过访问[虚拟机ip:9000]，查看sonarqube是否成功启动': 1, 'sonarqube是服务器端，它主要有两个功能：1.分析源代码；2.因为它内嵌了apache模块，所以提供web端的界面访问': 1, 'sonarqube是一个开放的代码质量管理平台，本文通过容器快速部署一个sonarqube服务，以及在项目中如何集成sonarqube进行了总结，希望对sonarqube的初学者能有所帮助': 1}
kvm:::{'kvm是linux的一部分': 2, '由于kvm是linux内核的一部分，因此所有这些组件它都有': 1, 'kvm是否可以配合第三方产品，在身份认证、安全审计、日志回放、实时报警等方面可以做的更好': 1, '•kvm/qemu/libvirtd–kvm是linux内核的模块,它需要cpu的支持,采用硬件辅劣虚拟化技术intel-vt,amd-v,内存的相关如intel的ept和amd的rvi技术': 1, '优势：和xen类似，比xen更好的一点是，kvm是完全虚拟的，所以不分pv和hvm的区别，所有的kvm类+型的虚拟技术都可以装各种linux的发行版和各种win的发行版，不管供应商在主页有没有写明是否支持win，只要你配置够win运行，那就肯定可以装+的上去，只是方法的问题而已': 1, '广义kvm（定义）：kvm（kernel-basedvritualmachine)–基于内核的虚拟机，kvm是基于虚拟化扩展的x86硬件的开源linux原生的全虚拟化方案（要求cpu支持intel-vt-x或amd-v）': 1, 'kvm是基于虚拟化扩展(intelvt或者amd-v)的x86硬件的开源的linux原生的全虚拟化解决方案': 1, 'kvm是目前主流的全虚拟化架构，是基于硬件的完全虚拟化': 1, 'kvm是基于x86虚拟化扩展(intelvt或者amd-v)技术的虚拟机软件，所以查看cpu是否支持vt技术，就可以判断是否支持kvm': 1, '（2）kvm切换器与kvm虚拟机的区别kvm切换器是一种硬件切换设备，kvm是keyboardvideomouse的缩写': 1, 'kvm切换器是一种硬件切换设备，kvm是keyboardvideomouse的缩写': 1, '也就是说kvm是基于linux内核实现的': 1}
aws:::{'aws是亚马逊旗下的一个平台，该平台可为个人和组织提供全面的、按需的和安全的云服务，来构建、增强和促进业务应用程序': 1, '对于那些不希望或无法承担与数据服务器的安装和维护相关的巨额成本的初创企业来说，aws是首选': 1, '总而言之，aws是一个经过精心设计的端到端框架，因aws的即时和高级技术需求而受到世界各地公司的信任': 1}
windows:::{}
provider:::{'下面我们来看一下provider是如何接收consumer发送过来请求的': 1, 'fileprovider是android7.0出来的新东西，2017开始应该会出现越来越多的7.0机器，所以做好7.0的适配工作也是很有必要的，别到时候出现一堆异常崩溃': 1, '而provider是供应的意思，为了更易理解，我也建议大家把“定位方法”这种理解方式抛弃，更换为“位置提供者”': 1}
openid:::{'openid是每个微信号的唯一标识，消息你post给谁，这个提示说明请求里面的openid无效': 1, 'openid是一个以用户为中心的数字身份识别框架，它具有开放、分散、自由等特性': 2, '首先了解openid是什么，一个微信号与一个公众号对应一个固定不变的openid': 1, '所以一个微信号在一个公众号下的openid是不变的，如果换了一个对应的公众号，那就是另一个openid了': 1, '今天被别人问了个问题，微信的openid是什么': 1, '获取小程序的用户unionid要通过小程序授权才可以，获取服务号的用户unionid，要通过用户关注服务号才可以，unionid是开放平台的id,小程序和服务号公众号等等都有自己的id，小程序和服务号使用openid作为用户的唯一标识，小程序openid和服务号（公众号）openid是不同的，属于两个平台，开放平台是用来关联其他平台的开放平台的id是unionid，使用unionid才可以互联所有平台': 1, 'openid是什么呢': 1, '即我们在使用微信网页版本的时候，生成微信二维码用户扫描登录，此时获取的openid和前面我们所说通过微信客户端获取的openid就不是一样的，但是unionid是一样的，这是因为，网页二维码扫描登录是网站应用，第一种获取openid是公众号，两者属于不同应用，所以是不一样的': 1}
esb:::{'esb是一个集成的容器，是一个集中式的服务总线': 1, 'esb是enterpriseservicebus的简称，中文翻译为企业服务总线，企业服务总线是一个实现系统间集成和互联互通的重要技术架构，可以理解为是一种消息和服务集成的中间件平台': 2, '点对点做服务的时候，通常需要考虑日志记录，服务访问安全、传输安全、数据安全、路由分发等一系列问题，而这些完全可以统一管理，统一验证，灵活配置，；如果应用a调用了应用b，在调用了应用c等具有逻辑流程的调用时，还可以在esb上实现流程引擎；第二点，esb是一个中间件平台，包含了消息中间件的全部功能，有异步消息处理机制，可以实现业务系统之间真正的松耦合的结构': 1, '二．openesbopenesb是sun公司提出来的开源esb项目，所以对jbi规范的支持程度就不用多说了': 1, '四．jbossesbjbossesb是jboss社区为面向soa而提出的一个eai系统平台': 1, 'esb是企业服务总线的缩写，而soa的意思是面向服务架构': 1, '虽然esb是一个了不起的想法，但很不幸，只是简单的安装esb不会解决你太多问题': 1, 'soa描述了一种it基础设施的应用集成模型，其中的软构件集是以一种定义清晰的层次化结构相互耦合，其中，一个esb是一个预先组装的soa实现，它包含了实现soa分层目标所必需的基础功能部件': 1, '一、esb的出现改变了传统的软件架构esb是传统中间件技术与xml、web服务等技术相互结合的产物，esb的出现改变了传统的软件架构，可以提供比传统中间件产品更为廉价的解决方案，同时它还可以消除不同应用之间的技术差异，让不同的应用服务器协调运作，实现了不同服务之间的通信与整合': 1, 'esb是传统中间件技术与xml、web服务等技术相互结合的产物，用于实现企业应用不同消息和信息的准确、高效和安全传递': 1, 'websphereesb是一种基于平台的esb，作为集成的soa平台，针对websphere应用服务器进行了优化': 1, '一个esb是一个预先组装的soa实现，它包含了实现soa分层目标所必需的基础功能部件': 1, 'esb是传统中间件技术与xml、web服务等技术结合的产物': 2, '从软件设计的角度上来说，esb是一个抽象的间接层，提取了服务调用过程中调用与被调用动态交互中的一些共同的东西，减轻了服务调用者的负担': 1, '因此esb是伴随着服务标准滞后于it系统建设或缺乏服务标准而产生的，是“存量服务治理过程中的过渡方案”，而非银行进行服务治理的必经之路': 1, 'esb是什么呢': 1, '但是esb是笨重的soa架构': 1, 'servicemix主要体现在路由转发功能，s-esb是基于mq的消息队列': 2, 'esb成为一种新的诱惑esb是传统中间件技术与xml、web服务等技术结合的产物': 1, '而它与soa的关系是：esb是逻辑上与soa所遵循的基本原则保持一致的服务集成基础架构，它提供了服务管理的方法和在分布式异构环境中进行服务交互的功能': 1, '可以这样说，esb是特定环境下(soa架构中)实施eai(enterpriseapplicationintegration，企业应用集成)的方式': 1, '薛志勇称，目前esb是soa集成中最普遍采用的方法，传统的eai和平台厂商是以“服务器”为中心、以“hub”为形式的解决方案，这种方法虽然解决了信息孤岛问题，但投资大，见效慢，而且也不灵活': 1, '因为esb是传统中间件技术与xml、web服务等技术结合的产物，对企业而言，采用esb中间件系统作为企业级信息系统整合方案中的中枢技术，可以无须添加任何软硬件设备，就可把过去、现有和未来的it系统整合在企业级的信息应用框架下，并且能为企业提供实时、大容量的信息通信和实时控制、管理和分配消息传递的能力': 1, '”esb的兴起让soa的渐进之路可以走得更开放和平稳，而esb也代表了中间件产品本身的进化方向，从应用领域而言，由于esb是基于开放的web服务而来，在soa的发展过程中，esb已经当仁不让地挑起大旗': 1, 'esb是企业服务总线（enterpriseservicebus）的缩写，是中间件技术与webservice等技术结合的产物，也是soa系统中的核心基础设施': 1, 'soa有两个核心组件，一个是esb，一个是bpel，而esb是基础设施，bpel是业务流程驱动下服务的集成和整合': 1, '这样的目录可以视为esb的一部分；然而，在这样的解决方案变得普遍之前，业务服务目录可能与esb是分离的': 1, '为此，考虑最被普遍认同的esb定义的原理：esb是一种逻辑体系结构组件，它提供与soa的原则保持一致的集成基础架构': 1, '肖：esb和rpc是完全不同的两个概念，prc是点对点的消息传递，esb是所有的服务接口都接入到esb，通过它来转发': 1, '企业服务总线(esb)是企业应用集成在soa理念下的一种实现方式，esb是soa架构中实现服务间智能化集成与管理的中介，在逻辑上与soa所遵循的基本原则保持一致,依据soa架构原则对服务集成和服务管理的要求，创建了一个soa集成架构，能够深入管理服务，并能方便扩展到整个企业应用': 1, 'esb是分布式的、基于消息的、遵循开放标准的集成解决方案': 1, 'primetonesb是普元基于多年对大型企业的it建设及分布式计算和集成能力的认识和技术积累而推出的服务整合产品，是部署和实现soa的理想工具，支持协议转换、消息转换、消息路由、服务编排、服务注册、服务查找、服务监控等功能': 1, '企业服务总线（esb：enterpriseservicebus）：esb是一种开放的、基于标准的分布式同步或异步信息传递中间件': 1}
hsm:::{'何谓hsm?hsm是一种保护和管理数字密钥的物理设备或云服务——促进加密、解密、签名和验证': 1, 'hsm是一种负责管理私钥的整个生命周期的密码学设备': 1, '在企业中使用基于云的hsm是安全好处与风险并存的': 1, '从积极方面来看，使用hsm是保存加密密钥和管理密钥生命周期最使用的安全措施，这一点也同样适用于云': 1, '目前，使用云hsm是任何具有较高合规性要求的组织使用云服务的标准做法': 1, '那么hsm是否迎来了东山再起的时机呢': 1, '如今，hsm是能将原始信息分开的途径，能够将我们的数据存储性价比最大化，我们需要在很长一段时间来熟悉hsm功能，因为它可能是一个长期需要我们注意的技术': 1, 'utimacohsm是整个实现平台的重要组成部分': 1}
mongodb:::{'mongodb是一款为web应用程序和互联网基础设施设计的数据库管理系统': 1, '使用java驱动链接mongodb是一件非常简单的事情，简单的引用，简单的做增删改查': 1, 'mongodb服务是在安装mongodb时自动安装的，而且开机就会自启动，使得mongodb可以以服务的形式自动运行在计算机中': 1, '什么是mongodbmongodb是当今应用程序的数据库，使您能够：': 1, '凭借nexus架构，mongodb是唯一一个在维护关系型数据库的基础上利用nosql创新的数据库': 1, '以我的为例：（mongo.log文件在logsxia,mongodb是数据库的安装文件夹，mongod.config和bin文件夹在mongodb文件夹下）': 1}
svn:::{'svn是subversion的简称，是一个开放源代码的版本控制系统，相较于rcs、cvs，它采用了分支管理系统，它的设计目标就是取代cvs': 2, 'tortoisesvn是subversion版本控制系的一个免费开源客户端，不需要付费': 1, '5.验证：验证svn是否安装成功，按win+r打开dos窗体输入cmd，然后输入svn--version，如果有一系列的提示信息出现，则表示安装成功': 1, '6.配置本地版本库：svn是将文件数据信息保存到版本库中进行管理的，为满足用户的需求，svn允许我们自己对版本库目录进行定制': 1, '1：rpm-qasubversion查询svn是否有过低版本svn（没有安装过则不显示）': 1, '2：检查svn是否安装成功svnserve--version': 1}
web:::{'从技术方面讲，一个webservices是可以被uri识别的应用软件，其接口和绑定由xml描述和发现，并可与其他基于xml消息的应用程序交互（castro，2004；杨涛等，2004）；web服务是基于xml的、采用soap协议的一种软件互操作的基础设施（廖军等，2004）': 1, 'web服务是基于tcp/ip、http、xml等规范而定义，具备如下功能：web上链接文档的浏览、事务的自动调用、服务的动态发现和发布（tsurs，2001）': 1, '从应用的层面来说，web服务是用于集成应用的，将原有的面向对象、面向组件的软件系统改造为基于消息面向服务的松散耦合系统或者构建新的松散耦合系统的一种协作设施（廖军等，2004）': 1, 'øibm认为，web服务是一种自包含、自解释、模块化的应用程序，能够被发布、定位、并且从web上的任何位置进行调用': 1, '总之，web服务是在互联网上的一种服务协议，采用xml作为基本的标记语言，soap（simpleobjectaccessprotocol）作为互操作协议，wsdl（webservicedescriptionlanguage）作为服务描述语言，通过uddi（universaldescriptiondiscovery&integration）可以把服务注册到互联网以便搜索，为更多的用户使用其服务': 1, 'web服务是通过万维网(www)超文本传输\u200b\u200b协议(http)进行通信的客户端和服务器应用程序': 1, 'web服务是一种函数或方法，可以通过将http请求发送到带有参数的url来调用该函数或方法，然后该服务将结果作为响应返回': 1, '因此，web服务是一种独立于语言的通信方式': 1, '一、web是图形化的和易于导航的（navigate）': 1, '同时，web是非常易于导航的，只需要从一个连接跳到另一个连接，就可以在各页各站点之间进行浏览了': 1, '三、web是分布式的': 1, 'web是动态的': 1, 'web动态的特性还表现在web是交互的': 1, 'web服务是一种服务导向架构的技术，通过标准的web协议提供服务，目的是实现跨平台': 1, '）大概阐述了，以前的web是怎么一种状态和web2.0的重要性': 1}
oauth:::{}
apache:::{'2：apache是一个软件基金会的名字，你所说的apache应该是指apachehttpserver吧，也就是apache服务器': 1, 'apache是web服务器（静态解析，如html），tomcat是java应用服务器（动态解析，如jsp）': 2, 'apache是普通web服务器，只支持html(静态网页)，通过插件支持php，可以与tomcat连通(apache单向连接tomcat，通过apache可以访问tomcat资源，反之不然)': 1, 'apache是最开始的页面解析服务，tomcat是后研发出来的，从本质上来说tomcat的功能完全可以替代apache，但apache毕竟是tomcat的前辈级人物，并且市场上也有不少人还在用apache，所以apache还会继续存在，不会被取代，apache不能解析java的东西，但解析html速度快': 1, 'apache是web服务器而tomcat是java应用服务器': 1, '1.1.4、apache是世界使用排名第一的web服务器': 1, '在mac系统中apache是系统自带的，所以不需要安装apache，但是我们需要自定义配置一下路径以及权限；首先得在用户文件下面新建站点：手动新建：直接新建一个叫sites文件夹命令新建：sudomkdir~/sites引用：http://jingyan.baidu.com/article/0aa22375b553a488cc0d64b5.html1、路径切换到apache：cd/etc/apache2备份文件，以防不测，只需要执行一次就可以了：sudocphttpd.confhttpd.conf.bak': 1, 'apache是有c语言实现的，支持各种特性和模块从而来扩展核心功能；tomcat是java编写的，更好的支持servlet和jsp': 1, 'apache是一辆车，上面可以装一些东西如html等，但是不能装水，要装水必须要有容器（桶），而这个桶也可以不放在卡车上，那这个桶就是tomcat': 1, 'apache是一个web服务器环境程序，启用他可以作为web服务器使用不过只支持静态网页，不支持动态网页，如asp、jsp、php、cgi': 1, '（1）apache是目前世界上使用最广泛的一种webserver，它以跨平台，高效和稳定而闻名': 1, '（3）apache是基于模块化设计的，总体上看起来代码的可读性高于php代码，它的核心代码并不多，大多数的功能都被分割到各种模块中，各个模块在系统启动时按需载入': 1, '（4）apache是用c语言写的': 1, '3）测试apache是否支持php[root@xuegod130~]#vim/var/www/html/index.php[root@xuegod130~]#cat!$cat/var/www/html/index.php': 1}
zookeeper:::{'zookeeper是一个集中的服务，用于维护配置信息、命名、提供分布式同步和提供组服务': 1, 'zookeeper是一个经典的分布式数据—致性解决方案，致力于为分布式应用提供一个高性能、高可用且具有严格顺序访问控制能力的分布式协调存储服务': 1, 'zookeeper是一个经典的分布式数据一致性解决方案，致力于为分布式应用提供一个高性能、高可用，且具有严格顺序访问控制能力的分布式协调服务': 1, '当机房3出现网络分区(networkpartitioned)的时候，即机房3在网络上成了孤岛，我们知道虽然整体zookeeper服务是可用的，但是节点zk5是不可写的，因为联系不上leader': 2, 'zookeeper是一个集中服务，用于维护配置信息，命名，提供分布式同步和提供组服务': 1, '1.zookeeper是什么': 1, 'zookeeper是分布式应用程序协调服务，是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作': 1, '但实际上对我们这些非大数据开发人员而言，zookeeper是比hxx们可能接触到更多的一个基础服务': 1, '在这两篇论文里都提到zookeeper是一个分布式协调服务(aserviceforcoordinatingprocessesofdistributedapplications)': 1, '其实在第一篇文章中已经介绍了zookeeper是一个分布式协调服务': 1, '前面两篇文章介绍了zookeeper是什么和可以干什么，那么接下来我们就实际的接触一下zookeeper这个东西，看看具体如何使用，有个大体的感受，后面再描述某些地方的时候也能在大脑中有具体的印象': 1, '这是zookeeper的主要配置文件，因为zookeeper是一个集群服务，集群的每个节点都需要这个配置文件': 1, 'zookeeper是一个分布式的，开放源码的分布式应用程序协调服务，是google的chubby一个开源的实现，是hadoop和hbase的重要组件': 1, 'zookeeper是一个典型的分布式数据一致性解决方案，分布式应用程序可以基于它实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、master选举、分布式锁和分布式队列等功能': 1, '假设/data/zookeeper是它的安装目录': 1, 'zookeeper是一个分布式协调服务的开源框架': 1, '如上，你大致应该了解zookeeper是个什么东西，大概能做些什么了，我们马上来学习下zookeeper的安装及使用，并开发一个小程序来实现zookeeper这个分布式配置管理的功能': 1, '（译：zookeeper是一个为维护配置信息、命名、同步分布式和组服务提供服务的集中服务': 1, '【zookeeper是一个分布式的，开放源码的分布式应用程序协调服务，是google的chubby一个开源的实现，是hadoop和hbase的重要组件': 1, 'zookeeper是一个开源的分布式的，为分布式应用提供协调服务的apache项目': 1, 'zookeeper是基于观察者设计模式设计的分布式服务管理框架，它负责存储和管理大家关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，zookeeper就将负责通知已经在zookeeper上注册的那些观察者做出相应的反应': 1}
restful:::{'restful是什么：': 1, '满足这些约束条件和原则的应用程序或者设计就是restful，核心就是面向资源，rest专门针对网络应用设计和开发方式，以降低开发的复杂性，提高系统的可伸缩性，为什么这么说，因为restful是无状态的，无状态是指任意一个web请求必须完全与其他请求隔离，是独立的，当请求端提出请求时，请求本身包含了这一请求的全部信息，这个约束提高系统的可伸缩性，可见性，可靠性': 1, '也就是说restful是典型的基于http的协议': 3, '目前restful是借助于http实现的，那么我们可以使用get/post/delete/put等方法进行资源操作，这部分很好理解，即遵循标准的http协议即可': 1, 'restful是面向资源的设计架构，但在系统中有很多对象不能抽象成资源，比如登录，修改密码等而rpc可以通过动作去操作资源': 1, 'restful是一种接口api的实现形式': 1, 'restful是什么，简单来说，restfulapi是基于http协议产生的一种相对简单的api设计方案，属于无状态传输': 1, '下面介绍restful是什么-为什么-怎么使用': 1, '要想知道restful是什么，先来了解下rest是什么吧': 1}
ccappfunctionplan:::{}
splunk:::{'splunk是机器数据的引擎': 1, 'splunk是面向云的日志搜索引擎': 1, 'os:ubuntuserver8.04.1软件：splunk-3.3.2-41320-linux-i686什么是splunk?splunk是一个运行于unix环境下的日志分析软件.与googleanalytics这一类的web日志分析软件的不同之处在于，splunk可以支持任何服务器产生的日志，其对日志进行处理的方式是进行高效索引之后让管理员可以对日志中出现的各种情况进行搜索，并且通过非常好的图形化的方式展现出来': 1, 'splunk是一款对it管理员非常有用、非常专业的工具': 1, '也正因为如此，与其他linux下的其他日志分析软件不同，splunk是一个商业软件，但是其提供了可以自由使用的splunkserver可以免费下载，而如果需要更多的比如livesplunks，splunksync这样的功能的话，则需要购买价格从$2500到$37500的splunkprofessional的授权': 1, 'splunk是机器数据的引擎，使用splunk可收集、索引和利用所有应用程序、服务器和设备生成的快速移动型计算机数据': 1, '最近在写一个日志管理平台的系统，底层借鉴了graylog，今天我们领导告诉我splunk是业界的顶端，希望我们向splunk看齐': 1, 'splunk是一款顶级的日志分析软件，如果你经常用grep、awk、sed、sort、uniq、tail、head来分析日志，那么你需要splunk': 1, 'splunk是一个分析计算机系统产生的机器数据，并在广泛的场景中提供数据收集、分析、可视化分布式的数据计算平台': 1, 'splunk是一款b/s架构的监控软件，服务器端根据查询流量来收费': 1, 'splunk是大数据领域第一家在纳斯达克上市公司，splunk提供一个机器数据的搜索引擎': 1, '对于特定领域的数据获取，splunk是用add-on的形式': 1, '大数据的搜索平台已经成为了众多企业的标配，elastic栈和splunk是其中最为优秀和流行的选择': 1, 'splunk是一个功能完备的企业级产品，提供了命令行窗口，web图形界面接口和其他接口，查询结果展示，数据查询，权限控制，分布式管理服务，数据索引，网络端口监听，数据警报，文件监听等等': 1, '【摘要】splunk是业界赫赫有名的数据分析工具，比较擅长bi和安全分析，我司很多部门都有购买其产品和服务': 1}
heat:::{'heat是这部分功能的开源实现': 1, '如果说nova,glance,neutron解决的是iaas层的需要，那从上面的图你就能感觉到heat是解决客户paas层的需要': 1, 'heat是openstack中的orchestrationservices，也就是应用程序的配置管理': 2, 'heat是openstack提供的自动编排功能的组件，基于描述性的模板，来编排复合云应用程序': 1, 'heat是一个基于模板来编排复合云应用的服务': 2, 'heat是openstack里面的原生服务，大部分的发行版都会提供这个服务，使用起来更方便': 1, '回来发现真如人家所说的，heat是一个服务编排工具，连“编排”这个耳熟能详的词，我平时也没有去深究，难怪被人拒绝': 1, 'openstackheat是一个python软件项目，是openstackorchestration计划的主要落地项目': 1, 'openstackheat是openstack提供的一个rest服务': 1, '接着本文逐一介绍了heat是如何来实现和支持编排，分别从基础架构，软件配置和部署，自动资源伸缩和负载均衡等角度进行了叙述': 1, '我们都知道heat是openstack中的组件，那么云平台组件理所应当是nova/cinder/neutron/ceilometer这些': 2, 'heat是一套流程，你能看到的实体就是一个template文件，该文件是可以跨平台使用的，定义资源更加的灵活，支持的资源类型比ovf要多得多，功能也比ovf强大很多，特别是资源之间的依赖关系，使用不同的云平台时，需要以不同的模板参数区别；而ovf是相对独立的东西，你能看到的东西是一个ovf包，可以跨平台使用': 2, 'heat是一套业务流程平台，旨在帮助用户更轻松地配置以openstack为基础的云体系': 1}
tcp:::{'tcp是属于网络分层中的传输层，因为osi分为7层，感觉太麻烦了，所以分为四层就好了，简单': 1, '分层以及每层的协议，tcp是属于传输层，如下两张图：': 1, '其中，tcp是一个可靠的面向连接的协议，udp是不可靠的或者说无连接的协议': 1, 'tcp是全双工模式(同一时刻可以同时发送和接收)，这就意味着，当主机1发出fin报文段时，只是表示主机1已结没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ack报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会中断这次tcp连接': 1, 'tcp是一个超级麻烦的协议，而它又是互联网的基础，也是每个程序员必备的基本功': 1, 'tcp是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢?要进行更深层次的剖析，就需要了解，甚至是熟记tcp协议中每个字段的含义': 1, 'tcp是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接': 1, 'tcp是全双工模式，这就意味着，当主机1发出fin报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了;但是，这个时候主机1还是可以接受来自主机2的数据;当主机2返回ack报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的;当主机2也发送了fin报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次tcp连接': 1, '之前也因为面试的原因了解过一下，但是面试官又问了为什么tcp是可靠传输，一下就露馅了，说不出来了，然后这两天就仔细了解了一下这方面的内容，还专门订阅了极客时间的趣谈网络协议，因此，这篇文章主要基于趣谈网络协议和自己的理解': 1, '首先要明确,粘包问题中的“包”,是指应用层的数据包.在tcp的协议头中,没有如同udp一样的“报文长度”字段但是有一个序号字段.站在传输层的角度,tcp是一个一个报文传过来的.按照序号排好序放在缓冲区中.站在应用层的角度,看到的只是一串连续的字节数据.那么应用程序看到了这一连串的字节数据,就不知道从哪个部分开始到哪个部分是一个完整的应用层数据包.此时数据之间就没有了边界,就产生了粘包问题': 1, '我们说了tcp是可靠连接,那么是不是tcp一定就优于udp呢?': 1, '对于通信步骤解释一下：之前有说过tcp是面向连接的，这就相当于生活之中的打电话，比如你想和某人通电话，是不是需要先拨号进行建立连接，等对方同意建立连接，也就是对方接了你的电话，这时你说的话对方才能够收到，然后等到通话结束需要挂断电话进行关闭连接': 1, '好了tcp已经介绍完成，tcp是一种传输协议，是通信双方需要共同遵守的一个准则，有了准则通信又是如何进行的呢': 1, 'tcp是一个面向连接的、可靠的字节流传输协议': 1, 'tcp是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手，确认建立一个连接': 1, '由于tcp是全双工的，因此在每一个方向都必须单独关闭': 1, '这个问题说实话困扰了我接近2年时间，我们找到的所有资料上都写着，tcp是面向连接的服务，所有要通过tcp进行通信的应用都要先建立连接才能通信，在通信完毕之后要记得关闭连接': 1}
kubernetes:::{'一个kubernetes服务是一系列工作在一起的pod，比如多层应用中其中的一层': 1, 'kubernetes是一个可移植的、可扩展的、开源的平台，用于管理容器化的工作负载和服务，它促进了声明式配置和自动化': 1, '更具体一点地来说：kubernetes是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的': 1, 'kubernetes是一款应用于集群的，容器自动部署、扩展和管理的开源平台，提供了一种以容器为中心的基础架构': 1, 'kubernetes是使用docker进行容器管理的，所以天生具备docker的所有特性，只需要使用相应环境的docker镜像就可以运行服务，还需要关心宿主机是redhat、centos还是ubuntu，只要在宿主机上安装docker环境即可，相比传统运维，减少了各种依赖环境的冲突，降低运维成本，也方便整体服务的迁移': 1, '确切地说，kubernetes是谷歌严格保密十几年的秘密武器——borg的一个开源版本': 1, 'kubernetes是一个它的简化版，它是一辆设计优良的轿车，它适合中小型公司，更方便的用它来调度自己的集群': 1, 'kubernetes是用于自动部署，扩展和管理容器化应用程序的开源系统，它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现': 1, '亮点2：kubernetes是一个开放的开发平台': 1, '亮点4：kubernetes是一个完备的分布式系统支撑平台': 1, '因此，kubernetes是一个全新的基于容器技术的分布式架构解决方案，并且是一个一站式的完备的分布式系统开发和支持平台': 1, 'kubernetes是一个可移植的，可扩展的开源平台，用于管理容器化的工作负载和服务，方便了声明式配置和自动化': 1, 'kubernetes是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化': 3, 'kubernetes是google开元的容器集群管理系统': 1, '从背景上说，kubernetes是由google与redhat公司共同主导的开源“容器编排”项目，它起源于google公司的borg系统': 1, '而在功能上kubernetes是一种综合的基于容器构建分布式系统的基础架构环境，它不仅能够实现基本的拉取用户镜像、运行容器，还可以提供路由网关、水平扩展、监控、备份、灾难恢复等一系列运维能力，而更重要的是kubernetes可以按照用户的意愿和整个系统的规则，高度自动化的处理好容器之间的各种关系实现“编排”能力': 1, '具体来说，kubernetes是对容器间的访问进行了分类，如果这些应用之间需要非常频繁的交互和访问，或者它们之间存在直接通过本地文件进行信息交换的情况，那么在kubernetes中可以将这些容器划分为一个“pod”,而pod中的容器将共享同一个networknamespace、同一组数据卷，从而实现高效率通信': 1, '1.kubernetes是可扩展的开源平台，用以管理容器化的负载和服务，促进声明式的配置和自动化': 1, 'kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能': 1, 'kubernetes是google2014年创建管理的，是google10多年大规模容器管理技术borg的开源版本': 1, 'kubernetes是什么意思': 1, '阿里云serverlesskubernetes是一个基于eci的管理工具，复杂的kubernetes管理工作阿里云帮你做了': 1, '搭建和管理kubernetes是一件要死要活的事，不用做了，开心': 1}
zipkin:::{'zipkin是一个开放源代码的分布式跟踪系统，解决微服务架构中的延迟问题，包括数据的收集、储存、查找和展现': 1, 'zipkin是dpper的开源实现，支持多种语言': 1, 'springcloudzipkin与sleuthzipkin是一个开放源代码分布式的跟踪系统，由twitter公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现': 1, 'zipkinzipkin是twitter的一个开源项目，它基于googledapper实现，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现': 1, 'zipkin是一个开源项目，它提供了在分布式环境下发送、接收、存储和可视化跟踪的机制': 1, 'zipkin是twitter的一个开源项目，基于googledapper实现': 1, 'zipkin是一个可以采集并且跟踪分布式系统中请求数据的组件，可以为开发者采集某个请求在多个微服务之间的追踪数据，并以可视化的形式呈现出来，让开发者可以更加直观地了解到请求在各个微服务中所耗费的时间等信息': 2, 'zipkin是twitter的一个开源项目，它基于googledapper实现': 1, 'zipkin是啥': 1}
mongod:::{}
client:::{'dnscache服务或dnsclient是microsoft的预装程序，在您浏览internet时有助于dns解析': 1, 'opcserver/client是一套利用微软的com/dcom技术达成工业自动化资料取得的架构': 1, 'eurekaclient是对应于eurekaserver的客户端，用于与eurekaserver进行通信': 1, '目录aspnet_client是虚拟根web应用程序目录，该目录是当您安装.netframeworksdk或visualstudio.net时在您的计算机上创建的': 1, 'elasticsearchclient是我们进入elasticsearch的大门': 1, '2、transportclient详解2.1transportclient概述\u2002\u2002transportclient是elasticsearch（java）客户端封装对象，使用transport模块远程连接到elasticsearch集群，该transportnode并不会加入集群，而是简单的向elasticsearch集群上的节点发送请求': 1, '但是当opcclient是windows桌面程序方式，opcserver是windowsnt服务时，基本不会出现上述现象': 1, '当opcclient是windowsnt服务时，opcserver被拽起来后，是运行在system这个系统账户下面的': 1}
azure:::{'微软azure是什么': 2, 'microsoftazure是由microsoft创建和运行的云计算服务': 1, '与大多数microsoft产品一样，azure是一个开源平台，但是客户端sdk是开源的': 1, 'sqlazure是微软基于microsoftsqlserverdenali，也就是sqlserver2012构建的云端关系型数据库服务': 1, 'sqlazure是sqlserver的一个大子集，能够实现sqlserver的绝大部分功能，并且将它们作为云端的服务来扩展': 1, 'azure是这样介绍他的devops系列工具和能力的': 1, 'azure是微软推出的云计算服务，在你使用internet（“云”）通过azure等提供程序对服务器、存储、网络和软件等计算服务进行访问时，将同步进行云计算': 1, 'azure是执行此操作的好地方': 1}
llt:::{'llt是在开发阶段对系统进行尽早、尽快的验证，发现的缺陷也更容易定位和解决': 1, 'llt和开发自测试的区别（1）llt是相对于hlt的，主要指单元和模块级的测试，涵盖测试分层中的ut和mst两层，网络对llt有持续集成、代码覆盖率等要求；（2）开发自测试是一个泛称，即开发团队在转测试前开展的各类测试行为，其测试内容既包括llt的，也包括hlt的；（3）从责任来看，llt和开发自测试的责任主体都是开发团队；（4）因此，做了开发自测试，并不意味着做了llt；llt没做好，开发自测试肯定没做好；要做好开发自测试，首先必须做好llt，其次还应该做一部分基本的hlt（可以直接取部分系统测试用例进行测试）': 1, '如果有输出说明llt是正常的，正常如下图': 1}
google:::{'google是一家美国科技公司，以其搜索引擎，android操作系统，gmail邮件服务，gdrive云存储而闻名': 1, 'google是一家非常庞大的公司，拥有各种服务，产品和技术': 1}
paas:::{'与其他云服务（如基础架构即服务（iaas）和软件即服务（saas））一样，paas是通过云服务提供商的托管基础\u200b\u200b架构提供的': 2, '鉴于paas是一项基于云的服务，它具有与其他云产品一样的许多固有风险，例如信息安全威胁': 1, 'it提出的合理问题是，它选择的paas是否可以与其当前和将来的iaas和saas部署进行互操作': 1, 'ipaas是一套用于链接部署在不同环境中的应用程序的自动化工具': 2, '对于需要将本地应用程序和数据与云应用程序和数据集成的公司而言，ipaas是有意义的，其中包括越来越多的利用混合云环境的企业': 2, '最重要的是，分析所选的paas是否支持今天的开发团队使用或计划在将来使用的技术，中间件堆栈和编程语言': 1, 'paas（platformasaserver）平台即服务paas是基于iaas和saas的一种云服务，': 1, '以此同时，独立的paas提供商（如heroku、appfog）等也纷纷被技术巨头收购，这带来了一种质疑的声音是paas是否真的能够成为一项独立可持续发展的业务模式': 1, '而paas是以请求消耗的资源为单元计费的，如sae价格：': 1, 'paas尽管有种种问题，但它确实是从诞生就想提供给用户一个省心、稳定的业务运行环境，用户一旦部署，不需要关心扩容，不需要关心架构，不需要关心宕机，不需要关心配置，不需要关心优化，就可以随着业务的发展时时满足各种需要，所以paas是真正的云计算平台': 1, '首先，我们需要知道paas是平台服务的缩写，也就是云计算运营商向客户提供服务器服务的模式': 1, '当公司遇到迁移应用程序的压力时，他们可以看到paas是有效的，其优点是非常明显的': 1, '鉴于paas是一种基于云的服务，它具有与其他云产品一样的许多固有风险，例如信息安全威胁': 1, 'it提出的一个合理问题是，它选择的paas是否可以与其当前和将来的iaas和saas部署互操作': 1, 'paas是（platformasaservice）的缩写，是指平台即服务': 1, '由于paas是基于云的服务，所以没有安装和维护服务器、修补、升级、身份验证等烦恼': 1, 'paas是云计算工具系列中的一员，其中包括软件即服务(saas)、基础架构即服务(iaas)以及一切即服务(xaas)': 1, '首先，分析所选的paas是否支持当今开发团队使用或计划在将来使用的技术，中间件堆栈和编程语言': 1, '\u200b实际上paas是讲软件研发的平台作为一种服务，就是一个paas里面可能包含多个saas服务': 1, 'openpaas是一个免费的，开源的，面向业务的协作平台，在所有设备上都很有吸引力，并提供有用的web应用程序，包括日历，联系人和邮件应用程序': 1, 'paas是云计算服务的三个主要类别之一': 1, '其次，平台即服务（paas）是在软件开放运行平台层实现，paas实际上是指将软件研发的平台作为一种服务，以saas的模式提交给用户，paas是saas模式的一种': 1}
nginx:::{'nginx是一个高性能的http和反向代理服务器,其特点是占用内存少,并发能力强.': 1, '4、在性能方面，nginx是专门为性能优化而开发的，实现上非常注重效率': 3, 'nginx是一个高性能的http和反向代理服务器，也是一个imap/pop3/smtp代理服务器': 2, 'nginx是一款轻量级的web服务器/反向代理服务器以及电子邮件代理服务器，并在一个bsd-like协议下发行': 2, 'nginx是一个跨平台服务器，可以运行在linux,windows,freebsd,solaris,aix,macos等操作系统上': 1, 'nginx是一款自由的、开源的、高性能的http服务器和反向代理服务器；同时也是一个imap、pop3、smtp代理服务器；nginx可以作为一个http服务器进行网站的发布处理，另外nginx可以作为反向代理进行负载均衡的实现': 1, '根据前面的对比，我们可以了解到nginx是一个http服务器': 3, 'nginx是一款高性能的http服务器/反向代理服务器及电子邮件（imap/pop3）代理服务器': 3, 'nginx是一个http服务可以独立提供http服务': 3, 'nginx是一款轻量级的web服务器/反向代理服务器及电子邮件（imap/pop3）代理服务器，并在一个bsd-like协议下发行': 1, '在高连接并发的情况下，nginx是apache服务器不错的替代品': 1, 'nginx是一个高性能的web和反向代理服务器,它具有有很多非常优越的特性:': 1, 'nginx是c语言开发，建议在linux上运行，本教程使用centos6.5作为安装环境': 1, '首先，nginx是一个http服务器，可以将服务器上的静态文件（如html、图片）通过http协议展现给客户端': 1, '直接双击nginx.exe3.检验nginx是否启动成功': 1}
vcs:::{'到此，应该就都ok了，启动一下试试还有什么问题verdi:verdidve:dve看一下gui是否能起来然后试试vcs是不是可以正常编译文件': 1, '声明：部分截图和命令的返回结果借用网络，因vcs是商业软件缺license，安装vcs后需要license，演示成本太大': 1, '#rm/etc/llt*#rm/etc/gab*#rm/etc/vx/licenses/lic/*.vxlic8，执行以下命令查询vcs是否卸载成功': 1}
github:::{'github是程序员的必备技能': 1, '确切的说github是一家公司，位于旧金山，由chriswanstrath,pjhyett与': 1, '如果你想发起一个项目，比如翻译一份不错的英文文档，觉得一个人的精力不够，所以你需要更多的人参与进来，这时候github是你的最佳选择，感兴\u3000\u3000趣的人可以参与进来，利用业余时间对这个项目做贡献，然后可以互相审核、合并，简直不要太棒': 1, '什么是github：github是为开发者提供git仓库的托管服务': 1, 'github是一个基于git的代码托管平台': 1}
master:::{'scrummaster是教练，并且还是服务型的教练': 2, '3）scrummaster是清除障碍的人': 2, '5)scrummaster是变革代言人': 2, 'scrummaster是没有被授予实实在在权利的角色': 2, 'scrummaster是组成scrum团队的三个角色之一': 1, 'scrummaster是没有职位权力的': 1, '做一个好的scrummaster是很锻炼人的': 1, 'scrummaster是scrum团队的过程权威': 1, 'master是kubernetescluster的大脑，运行着的daemon服务包括kube-apiserver、kube-scheduler、kube-controller-manager、etcd和pod网络（例如flannel）': 1, 'scrummaster是scrum团队中的服务型领导，帮助scrum团队外的人员了解他们如何与scrum团队交互是有益的，通过改变他们与scrum团队的互动方式来最大化scrum团队所创造的的价值': 1, 'master是standalone模式下的主节点，查看定义': 1, '结合上一篇文章sparkrpc概述讲解了master的实现及启动过程，master是rpcendpoint的具体实现，': 1}
linux:::{'linux是一套免费使用和自由传播的类unix操作系统，是一个基于posix和unix的多用户、多任务、支持多线程和多cpu的操作系统': 1, 'linux是一款开源操作系统，不需要付费，即可使用；unix是一款对源码实行知识产权保护的传统商业软件，使用需要付费授权使用': 1, '如果你是做c/c++开发，那么linux是必备的，还记得当前被vc6支配的恐惧吗': 1, '那么一般说的学linux是要学什么呢': 1}
gab:::{'gabconfig-a查看gab是否正常，无数据说明gab没有起来，正常如下图': 1, 'gab职责之一，负责处理cluster的成员变化情况，如果某个node没有了心跳，则gab将其标记为down，然后将其踢出cluster（我知道这里有点问题，作为一个纯内核模块，gab是没有后台进程的，那么它是不可能被schedle而得到执行的，也意味着gab无法定期监控心跳状态，所以我们只能说gab负责处理成员变化，而不说它负责监控成员变化': 1, '接着说一下gab是如何维护clustermembership的（这也是gab的两大功能之一）': 1, 'gab是臭名昭著的极右翼社交网络，是mastadon的一个fork(基于公开可用的开放源代码的独立开发)': 1, 'llt和gab服务是vcs双机系统的底层通信协议，如果这两个服务没有启动将导致双机无法启动': 1, '这是另一个离散对数的问题,用于证明难以区分的属性.假如说alice和bob执行如上所述的diffie-hellman密钥协议,那么g,g,ga,gb都是公共的,gab是密钥.直观上,ddh问题就是是否对手能够从随机的g中的元素区分出alice和bob的密钥gab.正式来说:': 1}
databricks:::{'databricks是apachespark的商业化公司，致力于提供基于spark的云服务，用于数据集成和数据管道等服务': 1, 'databricks是一个在apachespark之上运行的平台': 1, 'databricks是仅有几家同时被纳入两份gartner魔力象限报告（云数据库管理系统与数据科学和机器学习）的厂商之一，也是唯一一家通过统一平台实现这一目标的厂商': 1, '总的来说，databricks是一个统一分析平台，同时与微软azure的第一方合作为其提供了广阔的市场，而与aws的紧密合作也为databricks提供了丰富的客户源': 1, '简而言之，databricks是apachespark在azure上的实现': 1, '默认情况下，databricks是一项完全托管的服务，这意味着与群集关联的资源将被部署到锁定的资源组databricks-rg-azdatabricks-3……，如下所示': 1, 'databricks是属于apachespark背后的商业化公司，由美国伯克利大学amp实验室的spark大数据处理系统多位创始人联合创立': 1, 'databricks是行业领先的spark平台，而plotly的dash是行业领先的库，用于在python中构建ui和web应用程序': 1, 'azuredatabricks是基于apachespark的分析平台，已针对microsoftazure云服务平台进行优化': 1, 'azuredatabricks是基于apachespark的快速、简单、协作型分析服务': 1, 'azuredatabricks是microsoftazure上apachespark的实现': 1, 'azuredatabricks是microsoftazure上apachespark分析的实现，并且与azureazureblob存储，azuresynapseanalytics和azuresql数据库等几种azure服务很好地集成': 1, 'azuredatabricks是一种基于apachespark的快速协作型分析服务，可与包括azuresql数据库在内的许多azure服务无缝集成': 1, 'databricks是统一分析领域的领导者，由apachespark的原创者创建，利用统一分析平台解决了这一ai难题': 1, 'azuredatabricks是针对azure云端服务平台进行优化的azurespark分析平台，透过一键式设定、顺畅工作流程、交互式工作区等快速又简单的特性，为数据科学家、数据工程师、企业分析师提供前所未有的协作环境': 1, '不知道，在数据国度里databricks是否具有“金砖四国”的发展前景呢': 1, 'databricks是由apachespark的创始人建立的，成立于2013年年中，公司重于研发尖端系统，以从大数据中获取价值': 1}
devops:::{'字面意思上说devops是指“开发运维一体化”，即通过工具辅助开发完成运维的部分工作，减少成本': 1, 'devops是development和operations的组合，是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（qa）部门之间的沟通、协作与整合': 1, 'devops是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系': 1, '“对于devops是什么': 2, 'devops是一种重视“软件开发人员（dev）”和“it运维技术人员（ops）”之间沟通合作的文化，它促进开发和运营团队之间的协作，以自动化和可重复的方式更快地将代码部署到生产中': 1, '以上就是devops是什么意思的详细内容，更多请关注php中文网其它相关文章': 1, 'devops是develop+operations的简写，意思是开发运营，译者最近在了解devops,ci/cd这些概念，发现这篇quora上的回答很精彩，因此打算翻译成中文，希望对大家有帮助': 1, '有人说，devops是软件工程发展至今的第三次革命，可见它带给整个行业的影响是很深远的': 1, '于是乎，每当提及devops是什么的时候，最常出现的比喻就是“盲人摸象”': 1, 'devops是通过平台（platform）、流程（process）和人（people）的有机整合，以c（协作）a（自动化）l（精益）m（度量）s（共享）文化为指引，旨在建立一种可以快速交付价值并且具有持续改进能力的现代化it组织': 1, 'devops是一种新型的业务研发流程，也可以理解为一种新的技术思维，它摒弃了传统的开发、测试和运维严格区分的观念，把三者的角色融为一体，让服务的开发者负责从开发、测试到发布的整个生命周期，真正的承担起服务负责人的角色': 1, '其实devops是两个英文字的缩写，development（开发）和operations（运维），同时devops其实是一个文化和概念，并不是特定指某一个做法': 1, '\u200bdevops是一个流畅的流程用白话一点来说，dev代表着开发者，ops代表着运维，代表开发结果上线': 1, '结论，devops是技术上支撑敏捷开发可能性的环境': 1, '那么，devops是什么呢': 1, 'devops是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（qa）部门之间的沟通、协作与整合': 1, '最近的devops的概念很火，大家都在讨论devops，有人说devops是自动化运维，有人说devops是流程和管理，还有人说devops是一种文化，以前的运维工程师也纷纷变成了devops工程师': 1, 'devops是一种文化，是建立一种相互合作的工作方式，总结起来如下几点可以帮助团队实践devops的工作方式：': 1, 'devops是当前的最新趋势，但是有很多朋友还是不知道devops工程师到底是做什么的?': 1, 'devops是development和operations两个词的缩写，引用百度百科的定义：': 1, 'devops是一种方法或理念，它涵盖开发、测试、运维的整个过程': 1, 'devops是提高软件开发、测试、运维、运营等各部门的沟通与协作质量的方法和过程，devops强调软件开发人员与软件测试、软件运维、质量保障（qa）部门之间有效的沟通与协作，强调通过自动化的方法去管理软件变更、软件集成，使软件从构建到测试、发布更加快捷、可靠，最终按时交付软件': 1, '【注】本文译自：https://www.javatpoint.com/devops\u2003\u2003devops是两个单词的复合，一个是development，另一个是operations': 1, 'devops是两个单词的复合，其一是软件开发，其二是运维': 1, 'devops是字面上dev开发/ops运维两者组合，严格意义上devops如下（viadevops-wikipedia）：': 1, '从定义来看，devops是文化、运动和惯例，而sre是有严格任职要求的职位': 1, '而devops却正好解决了敏捷开发模式的这些不足之处，devops是通过平台（platform）、流程（process）和人（people）的有机整合，以c（协作）a（自动化）l（精益）m（度量）s（共享）文化为指引，旨在建立一种可以快速交付价值并且具有持续改进能力的现代化it组织': 1, '首先，devops是在软件生命周期内，从设计到编码，然后从开发环境部署到生产环境上，由开发人员和运维人员共同参与的软件迭代过程': 1}
git:::{'git是一个免费、开源的版本控制软件': 1, '一：git是什么': 2, 'git是目前世界上最先进的分布式版本控制系统': 3, 'git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上': 2, 'msysgit是windows版的git,如下：': 2, '因为git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识': 3, '注：gitfenlin88l.git是自建目录fenlin88l.git为仓库名[root@ceontoshome]#ls#查看/home/目录下有哪些用户目录admingit[root@ceontoshome]#cdgit#进入git用户目录[root@ceontosgit]#ls#查看git用户目录下有哪些目录/文件fenlin88l.git': 1, 'id_rsa_git是私钥': 1, '简单说一：192.168.1.10是服务器的地址；“@”符号前面的git是服务器的登录名，如果前面没有添加组合git用户，也是可以用已经存在的用户名，冒号”：”的后面的是仓库所在的地址，如果地址前面有“/”使用的是绝对地址，如果没有，就是相对与登录用户的根目录下': 1, '\u3000\u3000git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上': 1, '将服务器上的/opt/repository/gittest.git库克隆到本地gitclone[url]git是用户名@服务器地址：仓库路径可以看到本地上的服务器仓库了': 1, '因为git是为linux源代码托管而开发的，所以git也继承了开源社区的精神，不支持权限控制': 1, '这里的.git是隐藏目录，里面存放的就是本地仓库对应的工作目录blog的版本信息': 1, 'git是分布式的scm，svn是集中式的': 1, 'git是每个历史版本都存储完整的文件，便于恢复，svn是存储差异文件，历史版本不可恢复': 1, 'git是一个免费并且开源的分布式版本控制系统，旨在快速高效地处理从小到大所有项目的版本管理': 1, '简洁来说，git是一个分布式版本控制系统': 1, 'git是目前最流行的版本管理工具，而且没有之一，就算你的公司使用的不是git,如果你使用github的话，必定要用到git': 1}
openstack:::{'openstack是当今最具影响力的云计算管理工具——通过命令或者基于web的可视化控制面板来管理iaas云端的资源池（服务器、存储和网络）': 1, 'openstack是rackspace和nasa共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的webservice': 1, '1.openstack是什么openstack官方的解释很官方，而且从不同角度，也有不同的理解，openstack可以理解为一个云操作系统openstack旗下包含了一组由社区维护的开源项目，他们分别是openstackcompute(nova)，openstackobjectstorage(swift)，以及openstackimageservice(glance)': 1, 'openstack是一个免费开放源代码的云计算平台，用户可以将其部署成为一个基础设施即服务（iaas）的解决方案': 1, '首先说一下，openstack是一个搭建云平台的一个解决方案，说他不是个软件，但是我觉得说是一个软件，能够让大家认识更清晰些': 1, '什么是云计算基于互联网的相关服务的增加、使用和交付模式•这种模式提供可用的、便捷的、按需的网络访问,迚入可配置的计算资源共享池•这些资源能够被快速提供,只需投入很少的管理工作,戒不服务供应商迚行很少的交互•通常涉及通过互联网来提供劢态易扩展且经常是虚拟化的资源iaas•iaas(infrastructureasaservice),即基础设施即服务•提供给消费者的服务是对所有计算基础设施的利用,包括处理cpu、内存、存储、网络和其它基本的计算资源,用户能够部署和运行任意软件,包括操作系统和应用程序•iaas通常分为三种用法:公有云、私有云和混合云paas•paas(platform-as-a-service),意思是平台即服务•以服务器平台戒者开发环境作为服务迚行提供就成为了paas•paas运营商所需提供的服务,丌仅仅是单纯的基础平台,还针对该平台的技术支持服务,甚至针对该平台而迚行的应用系统开发、优化等服务•简单地说,paas平台是指云环境中的应用基础设施服务,也可以说是中间件即服务saas•saas(software-as-a-service)软件即服务,是一种通过internet提供软件的模式,卹商将应用软件统一部署在自己的服务器上,客户可以根据自己实际需求,通过互联网向卹商定购所需的应用软件服务•用户丌用再购买软件,而是向提供商租用基于web的软件,来管理企业经营活劢,丌用对软件迚行维护,提供商会全权管理和维护软件,同时也提供软件的离线操作和本地数据存储openstack简介什么是openstack•openstack是一个由nasa(美国国家航空航天局)和rackspace合作研发并发起的项目•openstack是一套iaas解决方案•openstack是一个开源的云计算管理平台•以apache许可证为授权openstack主要组件•horizon–用于管理openstack各种服务的、基于web的管理接口–通过图形界面实现创建用户、管理网络、启劢实例等操作•keystone–为其他服务提供认证和授权的集中身份管理服务–也提供了集中的目录服务–支持多种身份认证模式,如密码认证、令牌认证、以及aws(亚马逊web服务)登陆–为用户和其他服务提供了sso认证服务•neutron–一种软件定义网络服务–用于创建网络、子网、路由器、管理浮劢ip地址–可以实现虚拟交换机、虚拟路由器–可用于在项目中创建vpn•cinder–为虚拟机管理存储卷的服务–为运行在nova中的实例提供永久的块存储–可以通过快照迚行数据备份–经常应用在实例存储环境中,如数据库文件•nova–在节点上用于管理虚拟机的服务–nova是一个分布式的服务,能够不keystone交互实现认证,不glance交互实现镜像管理–nova被设计成在标准硬件上能够迚行水平扩展–启劢实例时,如果有则需要下载镜像•glance–扮演虚拟机镜像注册的角色–允许用户为直接存储拷贝服务器镜像–这些镜像可以用于新建虚拟机的模板openstack结构图': 1, '小枣君作为一枚通信汪，这里要特别强调一下，虽然openstack是云计算技术，主要是it的概念，但对于通信行业来说极为重要': 1, '因为openstack是开源的项目，所以互联网上相关的学习资料非常丰富': 1, 'openstack是一个开源的云计算管理平台项目，是一系列软件开源项目的组合': 1}
orchestration:::{}
rabbitmq:::{'rabbitmq是一种消息中间件，能够很好的处理来自客户端的异步消息发送及请求，将消息发送放入到服务端的队列池中，而接收端可以根据rabbitmq配置的转发机制接收和过滤服务端转发来的消息': 1, '所以中小型公司，技术实力较为一般，技术挑战不是特别高，用rabbitmq是不错的选择；大型公司，基础架构研发实力较强，用rocketmq是很好的选择': 1, 'rabbitmq是一款开源的，erlang编写的，基于amqp协议的消息中间件': 1, 'rabbitmq是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以rabbitmq为例子讲解第一种mq的高可用性怎么实现': 1, 'rabbitmq是一个消息队列中间件：是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行的分布式系统的集成': 1, '因为rabbitmq是用erlang语言开发，所以安装前需要先安装erlang环境': 1, 'rabbitmq是基于erlang语言开发得，所以得先安装erlang环境': 1, 'rabbitmq是一个由erlang语言开发的基于amqp标准的开源实现': 1, '另外，我们知道，rabbitmq服务是由erlang语言所编写，一个rabbitmq服务器实例是由erlang节点和运行在其上的rabbit程序所构成，一个erlang节点上可以同时运行多个rabbitmq程序，它们彼此之间可以通信，不论它们是否在同一个服务器上，这也是erlang程序的特点所在，为集群或是分布式的环境提供了好的开端，所以我们需要对rabbitmq实例进行管理，来处理不同环境时的需求，比如：分布式环境下，我们只能停止应用程序，不能停止节点（不清楚的同学，请继续往下俯瞰）': 1, '消息的可靠性是rabbitmq的一大特色，那么rabbitmq是如何保证消息可靠性的呢——消息持久化': 1, '1.安装erlang因为rabbitmq是erlang语言开发，所以要先安装erlang': 1, 'rabbitmq是erlang语言进行开发，所以安装rabbitmq前需要安装erlang的依赖': 1}
elixir:::{'elixir是一种功能和动态编程语言，于2011年首次发布，因此仍然相对较新': 1, '事实证明，elixir是如此高效，以至于测试我们的服务极限已成为一项挑战，需要对新的基准测试工具和策略进行投资': 1, 'elixir是一种函数式语言，它的数据结构是不可变的': 1, 'elixir是一种动态的功能语言，旨在用于构建可伸缩和可维护的应用程序': 1, '变更集功能不是必需的，但elixir是创建修改数据库结构的方法': 1, 'ruby有一些很棒的库可以帮助编写并发代码，而elixir是内置的并且是一流的公民': 2, 'elixir是一种函数式动态语言，用于构建可伸缩、易维护的应用程序': 1, 'elixir是基于erlangvm的，其广为人知的特点是运行低延时、分布式、可容错的系统，并成功用于web开发与嵌入式软件领域': 1}
buzzword:::{'当我们讨论这些buzzword是什么的时候，我觉得多深入研究下我们自己遇到的问题到底是什么，或许更有意义': 1}
php:::{'php是phphypertextpreprocessor(超文本与处理器)的首字母缩写': 1, '\u200bphp是一种html嵌入式的脚本语言': 1, '（注意点：要安装php，并且php是全局环境）': 1, '总结：php是一种市场应用广泛的动态网站开发的脚本语言，占据了市场全部网站开发的80%以上，因此市场对于php程序员的需求旺盛': 1, '引入：php是一种运行在服务器端的脚本语言，言外之意需要在服务器端（apache）就解析掉，浏览器不可识别': 1, '定义：apache的工作原理是模块化加载工作，即加载某个模块后就可以使用对应模块的功能；而php是独立工作，不具备从互联网中接收别人请求的能力，二者需要相互协作': 1, '而apache和php是独立的软件，php知道自己的缺点（不能独立获取用户请求），便“委身于”apache，为apache提供调用模块，apache就可以在特定情况下调用php': 1, '思考：apache加上php之后的确能够实现网站的动态效果，但是所谓的动态的很大的前提是根据用户的需求提供不同的数据，apache显然是不能保存数据的，php是否可以做到呢': 1, '引入：php是一种动态处理的脚本语言，能够在内存运行过程中保存数据，但是所有的数据是基于内存的，一旦运行结束，内存就会返回给操作系统，意味着数据就会消失': 1, '查看php是否启动成功': 2, 'php是强大的学习玩耍php的集成软件': 1, 'php是目前网站开发应用最广泛的程序之一，不管你学习什么编程语言，一开始都面临一个开发与运行环境搭建的问题，用php开发网站也不例外': 1, '运行完成后输入php-v查看php是否安装成功': 1, 'php是一种服务器脚本语言，也是一种解释型语言': 1, '我们都知道php是可以嵌入到html中的，但是文件的后缀必须得是以.php结尾，如果是.html，php的代码片段是会被浏览器直接注释，我这里就不演示了，下面我们看个例子，': 1, '但是传统的php-fpm的worker是同步阻塞的，这在一定程度下也限制了程序的运行速度，并且普通的php是无法常驻内存的，也就意味着我们每次执行代码都需要将相同的东西重新加载到新内存去，这点跟java的servlet就不同了，java的servlet在用户访问后实例化，下一个用户就不会再次进行实例化': 1}
sonar:::{'sonar是一个用于代码质量管理的开源平台，用于管理源代码的质量，可以从七个维度检测代码质量': 2, 'sonar是一个用于代码质量管理的开放平台': 1, '接到这个任务的时候，我还并不知道sonar是什么，但听到静态代码检测几个字的时候，我下意识的以为是类似checkstyle之类的工具，但是真正用过之后我发现我错了': 1, '介绍sonar是一个用于代码质量管理的开源平台，用于管理java源代码的质量': 1, 'sonar是一个代码质量管理的开源平台，用于管理源代码的质量，通过插件形式，可以支持包括java、c#、javascript等二十余种编程语言的代码质量管理与检测': 1, 'sonar是从七个维度检测代码质量，而作为开发人员至少需要处理前5中代码质量问题': 1, 'sonar是基于java开发的，因此运行sonar自然需要jdk': 1, 'sonar是一个用于代码质量管理的开源平台，用于管理java源代码的质量': 1}
libvirtd:::{'（1）libvirtd是服务程序，接收和处理api请求；': 1, 'libvirtd是目前使用最广泛的对kvm虚拟机进行管理的工具和api': 1, 'libvirtd是一个domain进程可以被本地virsh调用，也可以被远端的virsh调用，libvirtd调用kvm-qemu控制虚拟机': 1}
dhcp:::{'dhcp是dynamichostconfigurationprotocol的缩写，即动态主机配置协议': 1, 'dhcp是一个很重要的局域网的网络协议，使用udp协议工作，主要有以下用途：': 1, '2.dhcp是用来干什么的': 1, '第一步：查询linux中dhcp服务是否安装，如图所示：': 1}
volume:::{'我们先来对比一下bindmounts和dockervolume，然后看volume是如何解决bindmounts的问题的': 1, '这张图说明bindmount和volume其实都是利用宿主机的文件系统，不同之处在于volume是docker自身管理的目录中的子目录，所以不存在权限引发的挂载的问题，并且目录路径是docker自身管理的，所以也不需要在不同的服务器上指定不同的路径，你不需要关心路径（其实也不全是，下面会关心?）': 1, '其实“挂载”和“dockervolume”并不是一回事，有一定的区别，dockervolume是声明式的，dockerengine本身会占用系统的某个目录，linux一般为"/var/lib/docker"，mac和windows下都可以调节': 1, '相对于挂载，volume是dockerengine在自己的“地盘”分配了一个路径作为挂载点，自己地盘的权限肯定是安排的明明白白': 1, 'volume是k8s抽象出来的对象，用于解决pod中的容器运行时，文件存放的问题以及多容器数据共享的问题': 1, '我们需要找到volume服务是否已经转移了地方': 1, 'portworxvolume是一个与kubernetes一起，以超融合模式运行的弹性块存储层': 1, 'cinder-volume服务是cinder最关键的服务，负责对接后端存储驱动，管理volume数据卷生命周期': 1}
webservice:::{'从深层次上看，webservice是一种新的web应用程序分支，它们是自包含、自描述、模块化的应用，可以在网络(通常为web)中被描述、发布、查找以及通过web来调用': 1, '一言以蔽之：webservice是一种跨编程语言和跨操作系统平台的远程调用技术': 1, '从深层次看，webservice是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准': 2, 'webservice是b2b集成成功的关键': 1, 'webservice是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的xml（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序': 1, 'webservice是实现soa的技术之一': 1, 'webservice是一种跨编程语言和跨操作系统平台的远程调用技术': 1, '实际上，soap在这里有点用词不当：它意味着下面的webservice是以对象的方式表示的，但事实并不一定如此：你完全可以把你的webservice写成一系列的c函数，并仍然使用soap进行调用': 1, 'webservice是一个soa（面向服务的编程）的架构，它是不依赖于语言，不依赖于平台，可以实现不同的语言间的相互调用，通过internet进行基于http协议的网络应用间的交互': 1, 'webservice是一种服务的提供方式，通过webservice，不同应用间相互间调用变的很方便，网络上有很多常用的webservice服务，如：http://developer.51cto.com/art/200908/147125.htm，不同的语言平台对webservice都有实现，java的webservice实现，比较流行的有axis2、jaxws，本文介绍的是axis2': 1, 'webservice介绍：webservice是两个系统之间的调用，实现两个系统间数据交互，如：支付宝调用各个银行的接口实现支付功能；我们再网站下订单时调用库存与支付系统，完成库存数据减少，同时完成订单记录与支付': 1, 'webservice是不需要专门针对传输流进行处理的，只要定义好输入就可以；jaxws可以通过面向对象开发webservice；': 1, 'webservice是自描述、自包含的可用网络模块，可以执行具体的业务功能': 1, 'wsimport是jdk自带的,可以根据wsdl文档生成客户端调用代码的工具.当然,无论服务器端的webservice是用什么语言写的,都将在客户端生成java代码.服务器端用什么语言编写的并不重要.wsimport.exe位于java_home\\bin目录下.例如：在cmd的窗口下执行wsimport可以看到': 1}
saas:::{'saas是software-as-a-service（软件即服务）的简称，是随着互联网技术的发展和应用软件的成熟，而在21世纪开始兴起的一种完全创新的软件应用模式': 1, '对于许多小型企业来说，saas是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要': 4, '一、saas的概念saas是software-as-a-service（软件即服务）的简称，是随着互联网技术的发展和应用软件的成熟，而在21世纪开始兴起的一种完全创新的软件应用模式': 1, '先从saas说起，saas是英文softasaservice（软件即服务）的简写': 1, 'saas是近年来开始流行起来的，因为有了saas的出现，过去的软件服务方式成了我们口中“传统模式”，要理解saas先来了解传统的软件服务模式': 1, 'saas是software-as-a-service（软件即服务）的简称，随着互联网技术的发展和应用软件的成熟，在21世纪开始兴起的一种完全创新的软件应用模式': 2, '对于广大中小型企业来说，saas是采用先进技术实施信息化的最好途径': 2, 'saas是一种通过internet提供集中托管应用程序的方式，企业用户一般通过客户端或网页来使用，无需购买、安装或维护任何软件及硬件，因此saas应用程序又被称为“基于web的软件”或“托管软件”': 1, 'saas是一种软件的交付模型': 1, '用户不用再购买软件，而改用向提供商租用基于web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，对于许多小型企业来说，saas是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要': 1, '（1）安全性：如何辨别saas是否安全，需要把握以下几点：•服务器数据中心（是否提供全天候的物理安全措施': 1, '什么是saas系统saas是software-as-a-service（软件即服务）的简称，随着互联网技术的发展和应用软件的成熟，在21世纪开始兴起的一种完全创新的软件应用模式': 1, 'saas是简单的部署，不需要购买任何硬件，刚开始只需要简单注册即可': 1, 'saas是software-as-a-service（软件即服务）的简称，随着互联网技术的发展和应用软件的成熟，在21世纪开始兴起': 1, 'ltd营销saas是会来客户、能分享、手机管理的数字化网站': 1, 'saas是software-as-a-service（软件即服务）的简称，“软件即服务”': 1, 'saas是云计算应用程序的一种形式，而传统的erp系统没有此特征': 2, 'saas是随着互联网技术的发展和应用软件的成熟，在21世纪开始兴起的一种完全创新的软件应用模式': 1, '3、从技术方面来看简单易行：saas是简单的部署，不需要购买任何硬件，刚开始只需要简单注册即可': 1, '所以，对于许多小型企业来说，saas是采用先进技术的最好途径': 1, '由于saas服务是把软件托管在云上，可以通过任何智能终端访问，比如手机，笔记本电脑，平板电脑等': 1, 'gartner和forrester等研究公司都认为，saas是it行业发展速度最快的领域之一': 1}
iaas:::{'iaas是“infrastructureasaservice”的首字母缩写，意思是基础设施即服务，即把it系统的基础设施层作为服务出租出去': 1, '（3）iaas是云服务的最底层，主要提供一些基础资源': 1, 'iaas是云服务的最底层，主要提供一些基础资源': 2}
bigquery:::{'bigquery是一种基于cloud的现代化datawarehouse解决方案，具有广泛的优势，并且可以解决传统datawarehouse给用户带来的诸多痛苦': 1, '如前所述，bigquery是无服务器的，我们不必担心提供或分配资源': 1, 'bigquery是google的高度可扩展，无服务器且具有成本效益的解决方案，适用于有兴趣收集数据和存储数据的企业': 1, 'formplus应用程序由googlecloudplatform(gcp)提供支持，我们使用gcp托管和存储数据，我们发现bigquery是最终的数据仓库，因为它针对实时数据分析带来的挑战进行了优化，另一个因素是bigquery具有成本效益，也不必担心体系结构，它可与sql无缝协作以进行实时数据流传输': 1, 'bigquery是速度因素的理想选择，因为它可以在几秒钟内处理tb级的数据，它也非常适合将数据连续流式传输到表中': 1, 'bigquery是真正意义上的民主化': 2, '创建googlebigquery是为了解决查询延迟问题': 1, 'bigquery是一个pb级分析数据仓库，您可以使用它近乎实时地在大量数据上运行类似sql的查询': 1, 'bigquery是google推出的一项web服务，该服务让开发者可以使用google的架构来运行sql语句对超级大的数据库进行操作': 1, '基本上，googlebigquery是“google强大的基于云的分析数据库服务”，它是世界上最快sql引擎，它对gdelt的所有使用都是完全免费的': 1}
libvirt:::{'虽然libvirt是由redhat赞助研发的产品，但它是为一个开源项目，可通过gnulessergeneralpubliclicense获得': 1, 'libvirt是用于管理虚拟化平台的开源的api，后台程序和管理工具': 1, 'libvirt是基于kvm的上层封装，提供了操作kvm的生层接口，如虚拟机的生命周期(创建，删除，查看，管理)等，网络的管理和存储的管理': 1, 'libvirt是目前使用最为广泛的针对kvm虚拟机进行管理的工具和api': 1, '对上层libvirt是个c语言库，但同时它也提供了其他编程语言的封装，这些语言使用libvirt封装好的libvirtmod': 1, '要解释libvirt是什么，只要知道为什么会需要libvirt就好了': 1, '从这篇简短的文章可以看出，libvirt是一种用来构建应用程序的强大库，能够跨系统的大型网络在不同的虚拟机监控程序环境中管理域': 1, 'libvirt是一个软件集合，便于使用者管理虚拟机和其他虚拟化功能，比如存储和网络接口管理等等': 1, '提到kvm的管理工具，首先不得不介绍的就是大名鼎鼎的libvirt，因为libvirt是目前使用最为广泛的对kvm虚拟机进行管理的工具和应用程序接口（api），而且一些常用的虚拟机管理工具（如virsh、virt-install、virt-manager等）和云计算框架平台（如openstack、opennebula、eucalyptus等）都在底层使用libvirt的应用程序接口': 1, 'libvirt是为了更方便地管理平台虚拟化技术而设计的开放源代码的应用程序接口、守护进程和管理工具，它不仅提供了对虚拟化客户机的管理，也提供了对虚拟化网络和存储的管理': 1, 'libvirt是一个免费的开源的软件，使用的许可证是lgpl[1]（gnu宽松的通用公共许可证），使用libvirt库进行链接的软件程序不需要一定选择开源和遵守gpl许可证': 1}
kafka:::{'lapachekafka是一个开源消息系统，由scala写成': 1, 'lkafka是一个分布式消息队列：生产者、消费者的功能': 1, 'apachekafka是一款开源的消息系统': 1, 'kafka是用于构建实时数据管道和流应用程序': 1, '搞流处理的话，无论如何是绕不过kafka的了，还好kafka是一个概念比较好理解的架构模型': 1, 'kafka是通过zookeeper来对broker(即消息具体负责人)进行管理，需启动zookeeper集群': 1, '1）apachekafka是一个开源消息系统，由scala写成': 1, '3）kafka是一个分布式消息队列': 1, 'kafka是一个分布式发布——订阅消息传递系统': 1, 'kafka是分布式发布者——订阅者，具有高吞吐量，可以处理大量数据': 1, 'kafka是实时数据流，每秒可处理200万次写入': 1, '因此，复制就像备份分区一样，这意味着kafka是持久的，这有助于容错': 1, 'kafka是一种分布式的，基于发布/订阅的消息系统': 1, '上文说明了kafka是如何做replication的，另外一个很重要的问题是当leader宕机了，怎样在follower中选举出新的leader': 1, '通过上文介绍，想必读者已经明天了producer和consumer是如何工作的，以及kafka是如何做replication的，接下来要讨论的是kafka如何确保消息在producer和consumer之间传输': 1, '如果只讨论这一读取消息的过程，那kafka是确保了exactlyonce': 1, '1、kafka是什么': 1, '｀\u3000kafka是一种分布式的、基于发布订阅的消息系统，能够高效并实时的吞吐数据，以及通过分布式集群和复本冗余机制实现数据的安全': 1, 'kafka官方定义：分布式的流媒体平台apachekafka是分布式订阅、发布、消息传递的系统和强大的队列，可以处理大量数据，并使您能够将消息从一个端点传递到另一个终端': 1, 'tips：kafka是如何保证消息不丢失的': 1, '假如，在leader上写成功了，但是，还没有及时同步到follower，leader挂了，kafka是如何保证': 1, 'kafka是在isr列表顺序选择一个副本': 1, '磁盘类型和容量规划1.磁盘类型hddvsssd机械磁盘（hdd）一般机械磁盘寻道时间是毫秒级的，若有大量随机i/o，则将会出现指数级的延迟，但是kafka是顺序读写的，因此对于机械磁盘的性能也是不弱的，所以，基于成本问题可以考虑': 1, 'kafka是用mmap作为文件读写方式的，它就是一个文件句柄，所以直接把它传给sendfile；偏移也好解决，用户会自己保持这个offset，每次请求都会发送这个offset': 1, '从上面几点我们大致可以推测kafka是一个分布式的消息存储系统，那么它就仅仅这么点功能吗，我们继续看下面': 1, '上文说到过，kafka是一个分布式的消息系统，所以当我们配置了多个kafkaserver节点后，它就拥有分布式的能力，比如容错等，partition会被分布在各个server节点上，同时它们中间又有一个leader，它会处理所有的读写请求，其他followers会复制leader上的数据信息，一旦当leader因为某些故障而无法提供服务后，就会有一个follower被推举出来成为新的leader来处理这些请求': 1, '本文从消息系统的演变讲起，到kafka的具体组成，最后到kafka的三大特性，旨在帮助大家能够大概的了解kafka是什么的，到底有什么作用，当然这只是一个小白的简单理解，如有写得不对的地方，希望大家能够指出，不胜感激': 1}
vnc:::{'vnc是一个开放的协议，实现的客户端有很多': 1, 'vnc是使用rfb协议的屏幕画面分享及远程操作软件，此软件借由网络，可发送键盘与鼠标的动作及实时的屏幕画面': 1, 'vnc是一种协议，它的全称是virtualnetworkcomputing，是一种c/s架构的协议，所以需要客户端和服务端同时执行，在服务端监听5800,5801，5901等多个可能的端口，而客户端只需要想sever端发起连接请求，并输入账号密码(不是linux系统内用户的账号密码，而是vnc自己的密码)即可访问了，但是vnc在网上传输的时候是没有加密的，所以我们的账号密码在网上传输的时候是很容易被捕获到的，这时候我们可以结合sshd来实现加密传送；': 1, 'vnc是明文的不安全的.连接过程可能会被窃听,干扰.可以使用ssh通道加密,然后再由远程主机的回环地址通信,会加大安全性.': 1}
jekyll:::{'jekyll是一个基于ruby开发者的静态网站生成器': 1, 'jekyll是一个简单的博客形态的静态站点生产机器': 2, 'jekyll是用ruby写的，所以第一步需要先安装ruby': 1, 'jekyll是静态博客生成器': 1, 'jekyll是一个简单的博客形态的静态站点生成机器，我们能通过jekyll方便的搭建并维护一个博客': 1, 'jekyll是使用ruby语言开发的一个简单的博客形态静态站点生成工具，类似wordpress': 1, '截至2017年，jekyll是最受欢迎的静态网站生成器，主要是由于它被github采用': 1, 'jekyll是一个静态站点生成器，可以根据markdown文件自动生成静态的html文件': 1, 'jekyll是一个简单的免费的blog生成工具,是一个静态站点生成器,它会根据网页源码生成静态文件': 1, '引用自官网：jekyll是一个简单的博客形态的静态站点生产机器': 1, 'jekyll是一个简单的免费的，生成静态网页的工具，不需要数据库支持': 1, 'jekyll是由ruby脚本语言编写的，所以在运行jekyll之前，需要先安装ruby运行环境': 1, 'jekyll是一个简单的，博客感知的静态站点生成器': 1}
ibeacon:::{'ibeacon是苹果公司2013年9月发布的移动设备用os（ios7）上配备的新功能': 3, '安卓开发ibeacon是基于ble开发的，所以大家需要先学习好安卓官方的ble开发文档，其实ibeacon是ble衍生版，所以ibeacon具有属性和特点ble几乎都有，百度上的第三方包其实就是基于ble开发的封装类': 2, 'ibeacon是苹果公司2013年9月发布的移动设备用os(ios7)上配备的新功能': 1, 'ibeacon是最近非常火的话题': 2, '现在有很多种关于ibeacon是什么，以及我们可以如何使用它们的解释': 2, '要了解ibeacon是如何工作首先我们要了解ble': 2, 'ibeacon是如何工作呢': 2, 'ibeacon是苹果公司推出的一项室内低耗能蓝牙技术': 1, 'ibeacon是苹果在2013年wwdc上推出一项基于蓝牙4.0（bluetoothle|ble|bluetoothsmart）的精准微定位技术，在iphone4s后支持': 1, 'ibeacon是用于室内精确定位的技术，可以衍生出以下应用': 1, '由于ibeacon是核心位置的一部分，因此需要相同的用户授权才能使用': 1, '作为ios7的一部分，它吸引人的一点是，ibeacon是一种开发标准——绝大多数智能手机支持蓝牙4.0（ble）已经超过2年前（苹果从iphone4s开始）': 1, 'ibeacon是苹果公司在ios7中推出的一种近场定位技术，可以感知一个附近的ibeacon信标的存在': 1, 'ibeacon是指苹果自家的beacon平台，该技术并非苹果公司专有，市面上还有其他很多的ibeacon服务及设备': 1, 'ibeacon是苹果在2013年年终推出的一项蓝牙室内定位技术，可以基于位置向附近的设备推送内容': 1, '在ios7中引入的ibeacon是一项令人兴奋的技术，可以为应用程序提供新的位置感知功能': 1, '由于ibeacon是corelocation的一部分，因此需要使用相同的用户授权才能使用': 1, 'ibeacon是苹果公司在ios7中新推出的一种近场定位技术，可以感知一个附近的ibeacon信标的存在': 1, 'ibeacon是基于ble做的一个简单封装，因此大部分支持ble的设备都可以兼容': 1, 'ibeacon是一个基于ble(低功耗蓝牙技术)的2.4g射频技术，根据射频场强随距离衰减的模型计算距离': 1, '2.使用ibeacon是否可以实现精确的室内定位': 1}
docker:::{'许多开发者觉得docker离自己很远，docker是生产环境中的工具，和自己无关': 1, '在介绍用例之前，我希望你能先记住这句话：“docker是一个便携的应用容器”': 1, 'docker是一个用来装应用的容器,就像杯子可以装水,笔筒可以放笔,书包可以放书,可以把helloword放在docker中,可以把网站放入docker中,可以把任何想得到的程序放在docker中.': 1, 'docker是一个开源项目，诞生于2013年初，最初是dotcloud公司内部的一个业余项目': 1, 'docker是什么?解决的问题是什么?docker相关概念?docker的安装使用?docker的相关命令(重点内容)dockerfile的使用dockercompose的使用docker与传统虚拟机的区别': 1, 'docker的概念docker是什么，解决的问题是什么?docker是一个容器化技术，解决的问题是环境迁移问题': 1, '百科说：docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口': 1, 'docker是一个开源的应用容器引擎，如果你是docker的初学者，同时也有开发过基于maven的java项目的经验，那就会比较容易理解：我们可以把docker想作一个拥有类似maven仓库的镜像资源仓库的虚拟机': 1, 'docker是一种新兴的虚拟化技术，能够一定程度上的代替传统虚拟机': 1, 'docker是一个基于轻量级虚拟化技术的容器，整个项目基于go语言开发，并采用了apache2.0协议': 1, '）dockervs虚拟机在上文中我们提到了docker是基于轻量级虚拟化技术的，所以它与我们平常使用的虚拟机是不一样的': 1}
metastore:::{'hivemetastore是什么呢': 1, 'hivemetastoreclient首先会检查hive.metastore.local是否为true,就是说metastore是否是在本地': 1, 'hivemetastore是hivemetastoreclient的服务端，可能与hivemetastoreclient在同一台服务器上，也可以不再统一服务器上': 1, 'metastore是一个独立的模块，但由于hive的逻辑，在进行ddl操作时，不仅会对元数据操作，同时也需要存储数据的系统进行配合': 1, 'hive.metastore.authorization.storage.checks：在做类似droppartition操作时，metastore是否要认证权限，默认是false；': 1, '使用内嵌的metastore是hive入门最简单的方法': 1, '而metastore是hive元数据的集中存放地': 1}
hive:::{'原因如下：众所周知，hive既是客户端又是服务端而且hive是基于hadoop分布式文件系统，数据存储于hadoop分布式文件系统中': 1, '仅连接远程的mysql并不能称之为“远程模式”，是否远程指的是metastore和hive服务是否在同一进程内.': 1, '在看hive是否能够进入shell': 1, 'hive是一个基于apachehadoop的数据仓库基础设施': 1, 'hive是基于hadoop的一个数据仓库工具,可以将结构化的数据文件映射为一张数据库表,并提供类sql查询功能，hive底层是将sql语句转换为mapreduce任务运行': 1, '(4)验证hive是否安装成功：': 1, 'hive是hadoop的客户端，启动hive前必须启动hadoop，同时hive的元数据存储在mysql中，是由于hive自带的derby数据库不支持多客户端访问': 1, '2）hive是hadoop的客户端，同时hive也有自己的客户端': 1, 'hive是基于hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类sql查询功能': 1, 'hive是基于hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类sql查询功能': 1, '另外，hive也会读入hadoop的配置，因为hive是作为hadoop的客户端启动的，hive的配置会覆盖hadoop的配置': 1}
mysql:::{'6、还可以设置设置mysql是手动还是自动启动': 1, '（7）检查mysql是否安装成功': 1}
bff:::{'bff只是一种逻辑分层，而非一种技术，虽然bff是一个新名词，但它的理念由来已久': 1, '为了讲清bff是个啥，这里引用我在波波老师的课程《springboot与k8s云原生应用开发》中学到的一个案例，来跟大家分享一下，并尽力说清楚bff是啥，又是如何演化出来的': 1, '它经历过几次架构调整，我们就跟着它的调整来看看bff是怎么演化出来的': 1, '相信看到这里，你大概应该明白了bff是个啥，它在微服务架构中的位置和作用，以及它是如何演化出来的': 1, '我们在回顾前端演变史后，应该可以感觉到，bff是系统不断演进的结果；在采用bff设计时，也应该正确地把握演进步调': 1, 'bff是（backendsforfrontends）单词的缩写，主要是用于服务前端的后台应用程序，来解决多访问终端业务耦合问题': 2, 'bff是否需要集成鉴权认证，主要看各系统自己的设计，并不是一个标准的实践': 1}
lb:::{'marathonlb是marathon的服务发现系统': 3, 'marahon-lb安装以后，针对应用程序部署过程中，需要配置一个特殊标签haproxy_group=external，这个标签通知marathon-lb是否需要暴露这个应用': 1, 'marathon-lb是通过监测marathon应用程序状态来管理haproxy的工具': 1, '阿里云slb是阿里云提供的现成的高可用lb的服务，之所以必须提到slb是因为，阿里云之前有提供havip的服务来支持虚拟ip，但是跟客服咨询之后都已经下架，所以目前想在阿里云上使用高可用的lb服务，只有使用他们家的slb，他们这个其实就是lvs集群+keepalive方案实现': 1}
ria:::{'无论将来ria是否能够如人们所猜测的那样完全代替html应用系统，对于那些采用c/s架构的胖客户端技术运行复杂应用系统的机构和采用基于b/s架构的瘦客户端技术部署web应用系统地机构来说，ria确实提供了一种廉价的选择': 4, '一、定义ria是richinternetapplications的缩写，翻译成中文为丰富互联网应用程序': 1, 'ria是集桌面应用程序的最佳用户界面功能与web应用程序的普遍采用和快速、低成本布署以及互动多媒体通信的实时快捷于一体的新一代网络应用程序': 2, 'ria是什么东西，这是真么技术': 1, 'ria是richinternetapplications的缩写，翻译成中文为富因特网应用程序（macromedia中文网站翻译为richinternet应用程序）': 2, '什么是ria一、定义ria是richinternetapplications的缩写，翻译成中文为丰富互联网应用程序': 1, '2.什么是riaria是集桌面应用程序的最佳用户界面功能与web应用程序的普遍采用和快速、低成本布署以及互动多媒体通信的实时快捷于一体的新一代网络应用程序': 1}
edge:::{'kubeedge是一个多租户基础设施': 1, 'kubeedge是一个开源系统，用于将本机容器化的应用程序编排功能扩展到edge上的主机，它基于kubernetes构建，并为网络，应用程序提供基本的基础架构支持': 1, 'azureiotedge是基于azureiothub构建的iot服务': 1, 'azureiotedge是一组软件服务，需要运行在特定的硬件设备上，通常该硬件设备可以是widows/linux的设备，如果要处理的数据不多，可以使用raspberrypi3或更小的设备；如果要运行资源密集型工作负荷，请使用工业服务器': 1, '如果cloud和edge是同一台机器请注意和edgecore分开目录': 1, '以下是关于subversionedge的一些经验之谈，之所以选择collabnetsubversionedge是因为图形界面使用起来比较方便，不说太多，让我们开始吧': 1, 'edge是gsm演进的增强数据速率的缩写': 1, '1）进入nsx管理界面，检查nsx网络组件及nsxedge服务状态：2）查看nsx应用节点事件：经比对，对应的nsxedge是关机状态，故nsxedge健康检查持续报错': 1, '1、kubeedge是什么': 1, 'kubeedge是一个开源系统，用于将容器化应用程序编排功能扩展到edge的主机': 1}
moxi:::{'moxi是一个memcached/membase的代理，支持多线程、支持文本和二进制协议和libevent可动态配置池的参数': 1}
thrift:::{'thrift是一个软件框架，用来进行可扩展且跨语言的服务的开发': 2, 'thrift是一个跨语言的rpc(远程调用)框架,它可以被用作不同语言编写的服务之间的rpc通信,它使用声明式语法,带有一个强大的代码生成引擎,使用时首先编写thrift文件进行各种变量和数据结构的声明,然后使用thrift编译器将该文件编译成指定语言,一般命令行格式为thrift.exe-r--gen[lang]source.thrift,默认会在当前目录生成一个gen_[lang]的文件夹,里面是编译好的服务器端文件,名为xx_server.skeleton.cpp的文件为服务器端的实现文件,开发者可以在此文件中填写服务器端需要暴露给客户端调用的函数的具体实现,而客户端文件可以参考xx_server.skeleton.cpp并根据实际需要由我们自己来编写.': 1, 'thrift源于大名鼎鼎的facebook之手，在2007年facebook提交apache基金会将thrift作为一个开源项目，对于当时的facebook来说创造thrift是为了解决facebook系统中各系统间大数据量的传输通信以及系统之间语言环境不同需要跨平台的特性': 1, 'thrift是idl(interfacedefinitionlanguage)描述性语言的一个具体实现，关于idl的话题我们可以追溯到corba盛行1999-2001年(commonobjectrequestbrokerarchitecture/公用对象请求代理体系结构)，在idl中我们似乎不会忘记到这几个关键字：module、interface、string、long和int，我还记得idl利用module来创建名称空间，并且准确地映射为java的package，这些特性几乎和现在thrift的特性完全相同，所以thrift的设计思想和理念绝不是什么从火星来的newidea，看看在那个corba盛行的年代人们提出的概念，如图所示corba请求的各个部分，回头我们再与thrift进行对比一下：': 1, 'thrift基础架构thrift是一个服务端和客户端的架构体系，从我个人的感官上来看thrift是一个类似xml-rpc+java-to-idl+serializationtools=thrift的东东，thrift具有自己内部定义的传输协议规范(tprotocol)和传输数据标准(ttransports)，通过idl脚本对传输数据的数据结构(struct)和传输数据的业务逻辑(service)根据不同的运行环境快速的构建相应的代码，并且通过自己内部的序列化机制对传输的数据进行简化和压缩提高高并发、大型系统中数据交互的成本，下图描绘了thrift的整体架构，分为6个部分：1.你的业务逻辑实现(youcode)2.客户端和服务端对应的service3.执行读写操作的计算结果4.tprotocol5.ttransports6.底层i/o通信': 1, 'apachethrift是一种rpc框架': 1, 'thrift是facebook于2007年开发的跨语言的rpc服务框架，提供多语言的编译功能，并提供多种服务器工作模式；用户通过thrift的idl（接口定义语言）来描述接口函数及数据类型，然后通过thrift的编译环境生成各种语言类型的接口文件，用户可以根据自己的需要采用不同的语言开发客户端代码和服务器端代码': 1, 'thrift是一个软件框架，允许客户端使用包括java、c++、ruby和其他很多种语言，通过编程的方式远程访问hive': 1, 'thrift是一个rpc软件框架，': 1, 'thrift是一个可互操作和可伸缩服务的框架，用来进行可扩展且跨语言的服务的开发': 1, 'thrift是什么，有什么优势': 1, 'thrift是一个跨语言的服务部署框架，除了提供性能优异的序列化/反序列化功能，还提供了rpc服务，相对于protocolbuffers，它支持的语言更加广泛': 1, 'thrift是facebook于2007年开发的跨语言的rpc服框架，提供多语言的编译功能，并提供多种服务器工作模式；用户通过thrift的idl（接口定义语言）来描述接口函数及数据类型，然后通过thrift的编译环境生成各种语言类型的接口文件，用户可以根据自己的需要采用不同的语言开发客户端代码和服务器端代码': 1, 'thrift是一种c/s的架构体系.在最上层是用户自行实现的业务逻辑代码.第二层是由thrift编译器自动生成的代码，主要用于结构化数据的解析，发送和接收': 1}
wcf:::{'wcf是.net框架中的技术，用来创建面向服务的应用程序，交换不同通信方案里的消息，以及执行服务操作生成的工作流': 1, '根据基于消息的通信的概念中，一个http请求可以被均匀地表示，wcf是一个统一的api而不管不同的传输机制': 1, 'wcf是对于asmx，.netremoting，enterpriseservice，wse，msmq等技术的整合': 1, '4：wcf跟web服务有什么区别属性：wcf服务是通过定义servicecontract和operationcontract属性，而在web服务，webservice和webmethod属性用于定义相同': 1, 'wcf是一种通讯机制，解决的是通讯和可分布式部署': 1, 'wcf是一个运行时和一组api，用于创建在服务和客户端之间发送消息的系统': 1, '我的wcf是用分布式开发的，我以前写过分布式开发详解，大家有兴趣可以去看我博客，前期客户也没有要求使用动态ip和端口，后期客户新增需求要求加的，本来想着很简单，当做起来的时候还是有难度的，在网上也找过很多资料，大部分都是服务工厂但是我也是使用服务工厂的方式来完成的': 1, 'http://172.20.112.215/tokenservice.svc?wsdl浏览器打开是一个xml文件，列举这可以提供的服务wcf服务是在webservice的基础之上构建的数据交换方式，传入参数和返回结果都是xml格式': 1, '如果不理解wcf服务是什么，你就简单的认为它就是一个接口（interface），然后它可以放到iis上发布，让客户端可以调用到这个wcf服务（接口）': 1}
confd:::{'先简单说下业务逻辑，etcd是一个分部式k/v存储系统，confd是一个对etcd的key或者目录做变化监控的软件，并配有相关语法，可以将变化的k/v处理后形成配置文件，nginx不用多说了，做docker容器的负载均衡流量调度': 3, 'confd是一个轻量级的配置管理工具：': 1, 'confd是一个轻量级的配置管理工具，可以通过查询后端存储系统来实现第三方系统的动态配置管理，如nginx、tomcat、haproxy、docker配置等': 2, 'confd是一个轻量级的配置管理工具': 3, 'tail-f的confd是一个设备配置工具包，旨在作为一个管理子系统集成在其中': 1, '回到主题，confd是阿里的nacos作者推荐的工具，对于大型的复杂的应用系统，特别实用，它提供配置变更的自动下发，及时生效': 1, 'confd是非常实用的，除此之前它还支持定时-interval（默认值是600秒）、-watch让confd支持动态监听等': 1, '有了这个思路后，设计confd对应的nginx的模板文件（confd是可以直接下载二进制包，不存在安装问题，配置好path后直接使用，在使用中默认读取/etc/confd下的conf.d和templates下两个目录的配置，对应github是https://github.com/coreos/etcd），具体是操作步骤如下：': 1, '备注：1、guest用户的规则是guest，默认是全部权限；2、confd是以访客guest身份监控k/v的，对应的规则就是guest；': 1, 'confd是一个轻量级的配置管理工具，源码地址：https://github.com/kelseyhightower/confd，它可以将配置信息存储在etcd、consul、dynamodb、redis以及zookeeper等': 2, '2、confd是以访客guest身份监控k/v的，对应的规则就是guest；': 1}
sysdig:::{'sysdig是sysdigcloud开发的主要基于lua语言的一个开源系统分析工具': 1, '默认按上面的方法安装好以后，执行sysdig是会出错的': 4, 'sysdig是一个全面的开源系统活动监控，捕获和分析应用程序': 2, 'csysdig是sysdig附带的另一个实用程序': 2, 'sysdig是一个能够让系统管理员和开发人员以前所未有方式洞察其系统行为的监控工具': 1, 'sysdig是一个开源系统发掘工具，用于系统级别的勘察和排障，我们也可以把它看作一系列传统的unix系统工具的组合，主要包括：': 1, 'sysdig是一个超级系统工具，比strace、tcpdump、lsof加起来还强大': 1, 'sysdig是一种通用的系统可见性工具，对容器具有本机支持：~$sysdig': 1, 'csysdig是用于sysdig的简单，直观且可完全自定义的cursesui：~$csysdig': 1, 'sysdig是sysdigcloud出品的主要基于lua语言开发一个超强的工具，就像其在站点首页上所描述的“sysdigisopensource,system-levelexploration:capturesystemstateandactivityfromarunninglinuxinstance,thensave,filterandanalyze.thinkofitasstrace+tcpdump+lsof+awesomesauce.”，sysdig相当于strace+tcpdump+lsof+htop+iftop以及其他工具的合集，除此之外其还能对容器如docker、coreos、lxc进行监控，是不是感觉牛皮吹的很大': 2, 'sysdig是一个轻量级的系统监控工具，同时它还原生支持容器': 1, '二、常用用法默认按上面的方法安装好以后，执行sysdig是会出错的': 1}
telemetry:::{'q2:telemetry是如何使用测试库构架框架（thetestlibraryarchitectureframework）以及测试脚本模块化框架（thetestscriptmodularityframework）的': 1, 'a2:由于telemetry工程量较大，为了方便多人协作开发，整体上telemetry是采用测试库构架框架（thetestlibraryarchitectureframework）来设计的': 1, 'microsoftcompatibilitytelemetry是微软下的一个监测数据收集服务，如果加入microsoft客户反馈改善计划，该服务就会在监测系统异常并收集反馈到微软': 1, '顾名思义，在chromium测试人员看来telemetry是一种可以用来很方便对chromium性能进行测试并查看其性能报表的平台': 1, 'telemetry是chromium／chrome项目组开发的，显然telemetry最主要的功能是提供支持chromium和chrome的性能测试': 1}
locust:::{'locust是一个开源负载测试工具': 1, 'locust是非常简单易用，分布式，用户负载测试工具': 1, 'locust是完全基于时间的，因此单个机器支持几千个并发用户': 1, 'locust是一款易于使用的分布式负载测试工具，完全基于事件，即一个locust节点也可以在一个进程中支持数千并发用户，不使用回调，通过gevent使用轻量级过程（即在自己的进程内运行）': 4, '通过上面简单的对几个工具的评测，从这组数据的体现来讲，locust是最弱的，jmeter和网络上的评测结果接近': 1, '但是因为locust属于python系列，所以还是抱着希望来看看locust是否还有优化的潜力': 1, '通过事务：1125（由于locust是手动停止，而loadrunner是设置好的时间，所以在时间把控上有一些出入，影响到了总请求数量，不过不是主要关注的指标，可以忽略）': 1, 'locust是一个简单易用的分布式用户负载测试工具': 1, '可以测试任何系统尽管locust是面向web的，但它几乎可以用于测试任何系统': 1, 'locust是一款可以用于分布式用户负载测试的工具，可以对网站或其他系统进行负载测试': 1, 'locust是一个可扩展的，分布式的，开源的，用python编写的压力测试工具': 1, '④可以测试任何系统，尽管locust是基于网站的，但它几乎可以测试任何系统': 1, '一、简介：locust是一款易于使用的分布式用户负载测试工具': 1, '即使locust是面向web的，它也可以用来测试几乎任何系统': 1, '而locust则不同，locust是基于协程实现并发用户的，协程是比线程更小的单位，也称为子线程，在一个线程中可以运行多个协程': 1, 'locust是一个用于可扩展的，分布式的，性能测试的，开源的，用python编写框架/工具，它非常容易使用，也非常好学': 1, '但是，有时（例如，在测试url端点时，你期望返回404，或者在测试一个设计糟糕的系统时，即使出现错误也可能返回200ok）——需要手动控制locust是否应该将请求标记为成功或失败': 1, 'locust是一个简单易用、分布式的用户压测工具，并确定系统可以处理多少并发用户': 1, 'locust是一款基于好多组件来实现运行的压测工具，包括依赖于gevent,requests和flask等许多成熟的第三方组件': 1}
riak:::{'riak是basho公司推广开发的基于amazon的dynamo理论的键值对分布式数据库': 1, 'riak是开源的，但是basho的riakenterprise增加了multi-datacenter复制等主要功能，这项特性使得在全球范围内分布式工作负载、监控和不间断支持成为可能': 1, '例如，riak是一种分布式系统，而mongodb是一种单独的系统数据库，也就是说，riak没有主节点的概念，因此在处理故障方面有更好的弹性': 2, 'riak是用erlang编写的': 1, '我们当然可以实现这一点，并且riak是使用链接实现的': 1, 'riak是基于amazon的dynamo文件中记载的规则的一种开源的、高度可扩展的键值存储库': 1, '#+setupfile:"doc/basho-doc-style.iorg"welcometoriak.*overview综述riakisadistributed,decentralizeddatastoragesystem.riak是一个分布式的分散数据的存储系统': 1, 'riak是以erlang编写的一个高度可扩展的分布式数据存储，riak的实现是基于amazon的dynamo论文，riak的设计目标之一就是高可用': 1}
fpm:::{'fpm是fastcgiprocessmanager的缩写，由全称我们可以知道其和fastcgi有关，就是一个fastcgi的进程管理器': 1, '对于fastcgi我们可以理解成一个协议，儿fpm是其在php中的一个实现': 1, '(6)到现在还是没明白php-fpm是个什么东西?就是来管理启动一个master进程和多个worker进程的程序.': 1, 'php-fpm是一个phpfastcgi管理器，是只用于php的,可以在http://php-fpm.org/download下载得到.': 1, 'php-fpm是php内置的一个fastcgi进程管理器': 1, 'php-fpm是独立于web服务器和php之前的一层服务器，所以，我们需要开机启动它': 1, '在前面我学习过了php中的mod_php模式和mode_fastcgi和php-fpm模式：地址，中大致的讲述了几种模式的区别，也明白了php-fpm是fastcgi模式的管理器': 1, '之前接说过php-fpm是独立于web服务器和php之前的一层服务器，所以，我们需要开机启动它': 1}
appharbor:::{'appharbor是个不错的选择，操作简单': 1, '2、appharbor是国外支持asp.net的免费云空间': 1, 'appharbor是个不错的选择，操作简单，此外需要添加配置文件来识别plist,ipa文件，有关如何使用appharbor转自:': 1, '2、appharbor是国外支持asp.net的免费云空间，虽然不支持绑定域名，但是其提供免费sql等数据库应用，还是可以好好玩一玩的': 1}
registry:::{'这里的registry是failbackregistry': 1, 'registry是docker的镜像存储、分发服务': 1, 'dockerregistry是一个私有镜像仓库服务，可存储和分发docker镜像': 1, '由于默认建的registry是使用http的，而客户端默认则是使用https的，如果不告诉客户端应该使用http的话，就会出现': 1, '注：/var/lib/registry是默认的根目录，可以通过修改环境变量registry_storage_filesystem_rootdirectory自定义，参考配置registry': 1}
identity:::{'1.什么是asp.netidentityasp.netidentity是微软推出，用于在asp.net应用中管理用户的组件': 1, '开始安装其它服务之前验证identity服务是否正常安装': 1, '验证identity服务是否正确的安装和配置，清空os_service_token和os_service_endpoint环境变量：': 1, 'scope_identity()也是得到最后一条自增域的值，但是它是仅限在一个操作范围之内，而不@@identity是取全局操作的最后一步操作所产生的自增域的值的': 2, 'asp.netidentity是一种新的身份验证系统，旨在取代asp.net的现有成员资格系统': 1, 'asp.netidentity是一个基于owin（.net的开放web接口）的库': 1}
openstackidentity:::{}
ws:::{}
soa:::{'b）soa服务是黑匣子': 2, '\u3000\u3000目前提供soa全套解决方案和产品的厂商很多，包括ibmsap和oracle，国内金蝶用友浪潮软件等等，比如苏宁的soa是以sap为主的八国联军组装，既然soa中间件服务商已经为我们提供了成熟的架构方案和产品，那么作为soa使用者是否就无需顶层架构设计了呢': 1, '也许你已经深入其中却不知，今天我们拨开云雾见月明，阐明soa是何方神圣': 1, '通过以上，你应该了解soa是怎么回事了吧，更深入的了解靠你自己了': 1, 'soa是一种使用松耦合的黑盒子服务构建业务应用的体系架构，这些服务可以通过编排连接在一起以实现特定的功能': 1, 'soa是一种思想，它是一个架构理念，web服务是完成它的技术方法': 1, '一、soa是什么': 1, 'soa是service-orientedarchitecture的首字母简称，它是一种支持面向服务的架构样式': 1, 'soa是一种粗粒度、松耦合服务架构，服务之间通过简单、精确定义接口进行通讯，不涉及底层编程接口和通讯模型': 2, 'soa是一种思想，一种方法论，一种分布式的服务架构': 1, '要说明一下，这种开发方式不符合soa的理念，那么soa是如何处理的呢': 1, '首先，soa是一种开发思想': 2, 'soa是一场革命': 1, '但就软件开发本身来说，soa是一种技术，又超越了所有具体的技术': 1, '其次，soa是基于消息请求响应的一个系统，对请求类型有高度的兼容性': 1, '笔者一直没法理解soa是什么，百度百科一搜也是看的一脸懵逼，直到有一天看到了知乎上的一篇文章本文是对这篇文章的一个补充和完善，以便后期查阅': 1, '由于它考虑到了系统内的对象，所以虽然soa是基于对象的，但是作为一个整体，它却不是面向对象的': 1, '对于面向同步和异步应用的，基于请求/响应模式的分布式计算来说，soa是一场革命': 1, '根据2003年4月的gartner报道，yefimv.natis就这个问题是这样解释的：“web服务是技术规范，而soa是设计原则': 1, '”从本质上来说，soa是一种架构模式，而web服务是利用一组标准实现的服务': 1, '服务导向架构并不是一种全新的解决方案；相反，soa是技术与架构的自然进化': 1, 'soa是一个关于干净的，可管理的架构': 1, 'soa是把保持不变的核心业务功能剥离成一个个独立的服务的实践': 1, 'soa是一个面向服务体系架构，是一个用于整合业务流程和支持it基础设施的框架，通过对其中作为安全、标准化的组件—服务的复用和组合来解决业务优先级的改变问题': 1, '由此造成，许多企业和客户对soa是非常茫然的，对soa的价值也转向怀疑和抵触': 2, 'oasis（一个soa标准组织）给予出的soa定义“soa是一个范式，用于组织和利用可能处于不同所有权范围控制下的分布式系统': 2, '总之，从科学哲学的角度来看，soa是一个不断解构的过程，传统软件强调系统性，耦合度过高，所以需要松耦合（解耦）；soa也是一个组件粒度的平衡，集成电路趋势是集成度越来越高，软件发展的趋势是相反的过程；soa是架构，更是方法，反映了人们对哲学思想的追求的原动力': 2, 'soa代表着一种正在蓬勃兴起的革命性it架构理念，和传统技术体系区别的关键特征之一就在于soa是战略导向和业务驱动的': 2, '具体大家也不知道你的soa是小蜜蜂论坛发帖机怎么实现的，所以不好评判好不好': 1, 'soa是一种架构模式，是设计原则，而web是技术规范': 1, 'soa是面向服务的架构，即企业的it系统是由服务组成的，也即企业的各个应用系统是由许多标准的服务件“组装”起来的，组成应用系统中的各个服务之间是一种非常松耦合的关系': 2, '在业界，也有人认为云计算将是soa的终结者，这个观点把不同层次的东西混为一谈，云计算不是新的技术和思想，它只是人们使用计算资源的一种模式，而soa是一种全新的软件构架思想': 2, 'esb是实现soa的主要技术之一，soa是组建大型云端的重要思想之一': 1, '云计算中soa是什么': 1, '解释1.soa是果，不是因，怎么设计架构，怎么降低耦合，易于扩展是你的事情，做好了，就是“soa”，做不好，你也可以吹自己做的是“soa”': 1}
couchbase:::{'由于couchbase是对等网集群，所有的节点都可以同时对客户端提供服务，': 1, '在它们各自的官方描述中，couchbase是高性能，高伸缩性和高可用的分布式缓存系统；redis是一个开源的内存数据结构存储系统': 1, '如果考虑到后期性能测试以及运维的可操作性，couchbase是更好的选择': 1, 'couchbase是一个开源的、分布式的、面向文档（document-oriented）的nosql数据库，并且内置了memcached服务': 1, 'springdataforcouchbase是springdata项目的一部分，旨在为新数据存储提供熟悉且一致的基于spring的编程模型，同时保留特定于商店的特性和功能': 1, 'couchbase是高性能，高伸缩性和高可用的分布式缓存系统': 1, '对于couchdb用户而言couchbase是个差别很大的数据库，尤其是当需要迁移现有应用时': 1, 'couchbase是一个具有高性能、可扩展性和可用性强的数据库引擎': 1, '以现在整体架构来看，couchbase是往分布式数据库的方向发展下去': 1, '在一定的场景下，使用couchbase是非常好的选择': 1}
namanode:::{}
service:::{'显然，webservice是soa的一种较好的解决方案，它更多的是一种标准，而不是一种具体的技术': 1, 'service是android系统中的四大组件之一（activity、service、broadcastreceiver、contentprovider），它跟activity的级别差不多，但不能页面显示只能后台运行，并且可以和其他组件进行交互': 1, '普通的service要创建一个线程去完成耗时操作，因为其运行在主线程，並且要手動停止intentservice是继承于service并处理异步请求的一个类，在intentservice内有一个工作线程来处理耗时操作，启动intentservice的方式和启动传统service一样，同时，当任务执行完后，intentservice会自动停止，而不需要我们去手动控制': 1, '我们还可以到手机的应用程序管理界面来检查一下myservice是不是正在运行，如下图所示：': 1, '你可能又会问，前面不是刚刚验证过service是运行在主线程里的么': 1, '在kubernetesv1.0版本，service是“4层”（tcp/udpoverip）概念': 1, '从上演示可以总结出：service不会直接到pod，service是直接到endpoint资源，就是地址加端口，再由endpoint再关联到pod': 1, 'dns如何实现自动配置，依赖于service是否定义了selector': 1, '首先，相信很多android开发者都知道service是android系统中的四大组件之一，它跟activity的级别差不多，但是它只能后台运行，并且可以和其他组件进行交互': 1, '\r\n于是webservice的概念诞生了，而这种webservice是‘rpc-style’的': 1}
tfs:::{'note:由于tfs是把大量小文件放在一个block里面，所以tfs的文件复制是基于block的，而且复制出来的block的blockid应该是一致的': 2, '缺点：上载团队项目比较慢(还好一个团队项目只是刚创建的时候有一次)使用团队项目的人数要少团队项目不能过多过大(估计10w行代码的项目能放10个)这些缺点都可以通过升级服务器改善tfs是源代码管理器对于其他文件的管理比较一般': 1}
nuget:::{'nuget是一个自由开源软件包管理系统，用于microsoft开发平台，以前称nupack': 1, 'nuget是一个包（package）管理平台，确切地说，是.net平台的包管理工具，它提供了一系列客户端用于生成、上传和使用包，以及一个用于存储所有包的中心库即nugetgallery，如果有需要也可以搭建自己的私有nuget库': 1, '从一件事情的发展顺序来说，nuget是用来管理项目库（下面统称为程序包）的，那么首先，程序包应该放到哪里呢': 1, 'nuget是用于微软.net（包括.netcore）开发平台的软件包管理器': 1, 'nuget是.net程序员熟知的给.net项目自动配置安装library的工具，已经整合在了vs2010sp1及以上的版本中': 1, 'nuget是.net程序员熟知的工具，它可以直接安装开源社区中的各个公用组件，可以说是非常方便': 1, '因此，我进入命令行，首先确保nuget是最新的': 1}
socket:::{'socket是一个接口，在用户进程与tcp/ip协议之间充当中间人，完成tcp/ip协议的书写，用户只需理解接口即可': 1, 'socket是应用层与tcp/ip协议族通信的中间软件抽象层，它是一组接口': 2, '之前一直不理解socket就是因为没学过计算机网络，所以对于很多概念都很模糊，那么今天我就争取用最简单的话来解释清楚到底socket是一个什么东西，希望能够帮助到那些正在学习socket的同学': 1, '3.socket是什么呢': 1, 'socket是什么呢': 1, '2、socket是什么': 1, '既然socket是“open—write/read—close”模式的一种实现，那么socket就提供了这些操作对应的函数接口': 1, '我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把tcp/ip层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信': 1, 'socket是一组接口，在设计模式中，socket其实就是一个门面模式，它把复杂的tcp/ip协议族隐藏在socket接口后面，对用户来说，一组简单的接口就是全部，让socket去组织数据，以符合指定的协议': 1, '0、将odsocket源码放在classes目录下（odsocket是仿照原生socket写的一个类似socket的一个类）': 1, 'tcp/ip协议族包括运输层、网络层、链路层，而socket所在位置如图，socket是应用层与tcp/ip协议族通信的中间软件抽象层': 1, 'socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写io、打开、关闭）.说白了socket是应用层与tcp/ip协议族通信的中间软件抽象层，它是一组接口': 1}
runner:::{'commandlinerunner是一个接口，我们需要时，只需实现该接口就行': 1, '可以到gitlab上看下，刚刚注册的runner是否存在': 1, '因为这个gitlab-runner是基于docker安装的，是一个独立的容器，你的服务器上的node,git都是无法使用的，如果此时，选择的是shell或者ssh,的话，后边写执行脚本的时候npmrunbuild就会报npmnotfound,因为我的gitlab-runner是docker装的，所以没有集成，其它环境': 1, '我从官网搜了一下，gitlabrunner是一个开源项目，它用来运行你定制的任务(jobs)并把结果返回给gitlab': 1, 'gitlab-runner是配合gitlab-ci进行使用的': 1, 'applicationrunner接口的使用方式与commandlinerunner接口基本相似，不同的只是run方法的参数类型，commandlinerunner是基本类型，而applicationrunner是applicationarguments对象类型，经过一次简单封装，用户可对参数进行更多操作，具体可见applicationarguments的方法': 1, 'gitlabrunner是一个开源项目，用于运行您的作业并将结果发送回gitlab': 1, 'gitlabrunner是用go编写的，可以作为一个二进制文件运行，不需要特定于语言的要求': 1, 'gitlab-runnerregister#默认交互模式下使用，非交互模式添加--non-interactivegitlab-runnerlist#此命令列出了保存在配置文件中的所有运行程序gitlab-runnerverify#此命令检查注册的runner是否可以连接，但不验证gitlab服务是否正在使用runner': 1, 'httprunner是一款完全由python语言编写的测试框架，并且简单、优雅、功能强大，同时支持http和https': 1, '而gitlab-runner是gitlab提供的持续集成工具': 1, '此命令检查已注册的运行程序是否可以连接到gitlab，但它不验证gitlabrunner服务是否正在使用运行程序': 1}
fleet:::{'fleet是通过systemd来控制你的集群的，控制的任务被称之为unit（单元）,控制的命令是fleetctl': 1, 'fleet是一组由标准k8sapi交互驱动的k8scontroller': 1, 'fleet是作为kubernetescontroller编写的': 1, 'fleet是一个分布式的服务启动管理系统，可以将某个服务自定义的运行在集群之中': 1, '那fleet是怎样解决依赖于整个集群service之间的依赖关系的呢': 1}
om:::{}
wed:::{}
mock:::{'1，定义：mock是在测试过程中，对于一些不容易构造/获取的对象，创建一个mock对象来模拟对象的行为': 1, '4，对于前端来说，mock是一个模拟数据生成器，能帮助前端独立于后端进行开发，帮助编写单元测试': 1, 'easymock是一个可视化，并且能快速生成模拟数据的持久化服务,我们可以登录https://www.easy-mock.com/': 1, '对于测试用例来说，我们不仅要关心mock是否返回了期望的结果，还需要关心sut是否以期望的方式调用了mock': 1}
server:::{'\u3000\u3000从网上找到的解决方案：\u3000\u3000vs2010自带的sqlserver是express简化版的，需要到“sqlserver安装中心>维护>版本升级”，把它升级成“具有高级服务的express”（很快就可完成）': 1}
signaling:::{}
dropwizard:::{'dropwizard是codahale在yammer公司时创立的，它旨在提升公司分布式系统的架构（现在叫：微服务）': 1, 'dropwizard偏执的认为框架就是用来写代码的，因此对于框架的底层技术栈的调整，原则上dropwizard是拒绝的': 1, 'dropwizard是一个微服务框架,是各项技术的一个集成封装': 1, 'dropwizard是一个开源的java框架，用于开发ops友好、高性能的基于rest的后端，提供同类最佳的java库到一个嵌入式应用程序包': 1, '一dropwizard是什么': 1, 'dropwizard是一个跨越了库和框架的界限，他的目标是提供一个生产就绪的web应用程序所需的一切性能可靠的实现': 1, 'springboot聚焦于spring应用，如果你希望进入spring生态环境，或者已经熟悉它，希望有一个快速起步，那么选择它是好的选择，而dropwizard是将其rest和jersey结合在一起，它帮助你离开对spring的依赖': 1, 'dropwizard是一个开源的java框架，用于开发ops（orbeonpresentationserver，是一个开源的基于j2ee平台且是以xml为中心的web框架）友好、高性能的基于rest的后端': 1, 'dropwizard是一个开源的java框架，用于开发ops友好、高性能的基于rest的后端': 1}
foreman:::{'foreman是功能强大的sysadmin工具，使用起来既有趣又充满挑战': 1, 'foreman是一个集成的数据中心生命周期管理工具,提供了服务开通,配置管理以及报告功能,和puppetdahboard一样,foreman也是一个rubyonrails程序.foreman和dashboard不同的地方是在于,foreman更多的关注服务开通和管理数据中心的能力,例如和引导工具,pxe启动服务器,dhcp服务器及服务器开通工具进行集成.': 2, 'foreman是基于puppet的一个“增强工具”，主要能够帮到我们运维狗的有：': 1, '本文引入另外一个非常出色的前端管理工具foreman，什么是foreman呢，官方是这样定义的：foreman是一个物理和虚拟服务器的完整的生命周期管理工具(foremanisacompletelifecyclemanagementtoolforphysicalandvirtualservers)': 1, 'foreman是对物理机或虚拟机进行生命周期管理的工具，其灵活的接口可以管理机器的安装、配置、运行时的软件包管理、监控': 1, 'foreman是一个全面的工具，系统庞大不是一朝一夕能全部实现的，争取在以后不断增加新功能并持续维护和修正bug': 1}
api:::{'api是指应用程序编程接口，我们通过api接口可以实现特定的功能，而不需要了解其内部实现细节': 1, 'api是applicationprogramminginterface（应用程序接口）的缩写，它是拿来描述一个类库的特征或是如何去运用它': 2, '事实上，创建一个restapi是超出此教程范围的，因为它是有特定语言的': 2, 'api是服务端提供的服务，sdk就是调用服务的软件开发工具': 1, '翻译：api是用于构建应用程序软件的一组子程序定义，协议和工具': 1, 'api是用于构建应用程序软件的一组子程序定义，协议和工具': 1, 'api是一些预定义函数，目的是用来提供应用程序与开发人员基于某软件或者硬件得以访问一组例程的能力，并且无需访问源码或无需理解内部工作机制细节': 1, '在windows中，系统api是以函数调用的方式提供的': 1, 'sda和api可以认为api是包含在sdk中的：sdk是一系列文件的组合，包括lib、dll、.h、文档、示例等；api是对程序而言的，提供用户编程时的接口，即一系列模块化的类和函数': 1, '从严格的技术角度来看，api是一组访问基于internet的服务或应用程序的标准和说明': 1, '大多数api是由服务提供商设计的，并为如何与特定服务交互提供指导': 1, '实际上，有一些功能可以帮助您确定api是否良好': 1, '您必须意识到，一个伟大的api是由它所集成的软件的最终用户看不到的': 1, 'restfulapi是怎么定义的': 1, '1.api定义：1）api是用于构建应用程序软件的一组子程序定义，协议和工具': 1, '这样做的主要原因是，应用程序会通过android:minisdkversion声明的api级别来告知系统——该应用程序使用的api是指定引入的api级别': 1, 'api是接口的一种，在程序交互中具有重要的作用，而sdk与api有着密不可分的关系': 1, 'api是applicationprograminterface的缩写，中文的意思就是应用程序接口，那么短信api就是一对一发短信或是一对多群发的应用程序接口，网站，app，或是软件接入短信应用接口也就是短信api就可以实现短信群发或是系统触发自动发短信验证码的功能': 1, 'windowsapi是一套用来控制windows的各个部件的外观和行为的预先定义的windows函数': 1}
sql:::{}
moco:::{'moco是一个简单搭建模拟服务器的程序库/工具，这个基于java开发的开源项目已经在github上获得了不少的关注': 1, '该项目的简介是这样描述自己的：moco是一个简单搭建stub的框架，主要用于测试和集成': 1, 'moco是一个简单搭建模拟服务器的程序库/工具moco本身支持api和独立运行两种方式': 1, 'moco官方网站，即github地址为https://github.com/dreamhead/moco给出解释，moco是一个简单搭建的stub框架，那么何为stub呢': 1, '桩程序可以用来模拟已有程序的行为（比如一个远端机器的过程）或是对将要开发的代码的一种临时替代那么moco是什么呢': 1, 'moco是从上到下的执行顺序：也就是说，当请求进入，moco会从主配置文件开始从上往下一行行执行，一行行的匹配url，根据这一点我们可以写一个全局请求处理，例如：拦截所有get请求、处理所有无匹配的请求': 1, 'moco是一个搭建模拟服务器的工具，其支持api和独立运行两种方式': 1, 'moco是一个简单易用的mock工具，可以通过简单的配置request和response对象，达到模拟请求效果': 1, 'moco是热更新的，所以当你启动了jar包的服务之后，即使此时修改了json文件中的内容，你也不需要重启服务，就可以生效了': 1, 'moco是一个搭建模拟服务器的工具，其支持api和独立运行两种方式，前者通常是在junit等测试框架中使用，后者则是通过运行一个jar包开启服务': 2, 'moco是一个简单搭建模拟服务器的程序库/工具，主要用于测试集成': 1, '安装、运行moco是一个搭建模拟服务器的工具，其支持api和独立运行两种方式': 1, '一简介moco是一个服务器，能处理http、https、socket请求，可以用来调测前端或后端请求接口时使用，详情查看：https://github.com/dreamhead/moco/tree/master/moco-doc': 1, 'mock-server/moco是啥': 1, '跟moco是差不多的，但是mockservice的写法和功能是比moco多的，mockserver能适应更多场景': 1}
owin:::{'如果仅从名称上解析，可以得出这样的信息：owin是针对.net平台的开放web接口': 3, 'owin是对asp.netruntime的抽象': 3, 'owin是一个开源开放的标准，有助于建设.net开发的开源生态环境，owin定义了如下几个概念：': 1, 'owin是一个开放标准规范，它定义了.netweb服务器和web应用程序之间的标准接口': 1, 'owin是朝着更加模块化、轻量级、开放平台和开源microsoftweb产品迈进的架构设计的开始和基础': 1, 'owin是openwebserverinterfacefor.net的首字母缩写，他的定义如下：owin在.netwebservers与webapplication之间定义了一套标准接口，owin的目标是用于解耦webserver和webapplication': 1, '正如你看到的这样，owin是接口、契约，而非具体的代码实现，仅仅是规范(specifications)，所以要实现自定义基于owin的webserver必须要实现此规范': 1, '既然owin是规范，而非真正实现，所以是无法使用在项目中的，若要使用owin，必须要实现他，owin的实现方式为：katana': 1, 'owin是一个社区所有的规范，而非实现': 1, '从实现的角度讲，owin是一个标准，他的目标不是下一代web开发框架，而是一个web框架和web服务器交互的标准': 1, '本文对用于定义owin，owin是.netweb服务和web应用程序之间的一个标准接口': 1, 'owin是根据委托类型定义的，这儿没有被称作owin.dll或类似的程序集【译者注：我的理解是这用于强调owin是规范（或协议），而不是具体实现】': 1}
swagger:::{'swagger是一款restful接口的文档在线自动生成+功能测试功能软件': 1, 'swagger是一个规范和完整的框架，用于生成、描述、调用和可视化restful风格的web服务': 5, 'swagger是什么：': 1, 'swagger是一个规范且完整的框架，用于生成、描述、调用和可视化restful风格的web服务': 1, '接口文档的维护一直是我们开发过程中的一个很费时间的工作，每次更新线下文档都需要好多人确认更新，很费时间和精力，我之前的博客也搭建过yapi接口维护平台，但今天swagger是一个无需人员维护的自动化的接口在线文档': 1, 'swagger是符合openapi规范的接口开发工具，支持从设计和文档到测试和部署的整个api生命周期的开发': 1, '1.什么是swaggerswagger是一个规范和完整的框架，用于生成、描述、调用和可视化restful风格的web服务': 1, '简单来说，swagger是一个功能强大的接口管理工具，并且提供了多种编程语言的前后端分离解决方案': 1, 'swagger是一组开源项目，其中主要要项目如下：': 2, '我的总结：swagger是一套基于openapi规范构建的开源工具，可以帮助我们设计、构建、使用和测试restapi': 1, 'swagger是一套基于openapi规范构建的开源工具，可以帮助我们设计、构建、记录以及使用restapi': 1, 'swagger是一个与语言无关的规范，用于描述restapi': 1, 'swagger是一个流行的api开发框架，这个框架以“开放api声明”（openapispecification，oas）为基础，对整个api的开发周期都提供了相应的解决方案，是一个非常庞大的项目（包括设计、文档以及测试和部署，几乎支持所有语言）': 1, 'swagger是最流行的api开发工具，它遵循openapispecification（openapi规范，也简称oas）': 1, 'swagger是一种通用的，和编程语言无关的api描述规范': 1}
tomcat:::{'tomcat是全世界最著名的基于java语言的轻量级应用服务器，是一款完全开源免费的servlet容器实现': 1, '环境搭建完之后，就是需要tomcat的配置了，那先了解下tomcat是什么，可以干嘛': 1, 'tomcat是由apache开发的一个servlet容器，实现了对servlet和jsp的支持，并提供了作为web服务器的一些特有功能，如tomcat管理和控制平台、安全域管理和tomcat阀等': 1, '简单总结下，tomcat是一个中间件，在b/s架构中，浏览器发出的http请求经过tomcat中间件，转发到最终的目的服务器上，响应消息再通过tomcat返回给浏览器': 1, 'tomcat是干什么的': 1, '乙说：tomcat是servlet的容器': 1, 'apache是web服务器（静态解析，如html），tomcat是java应用服务器（动态解析，如jsp）': 1, 'tomcat是一个servlet(jsp)容器，是apache的扩展，可以独立于apache运行': 1, 'tomcat是jsp/servlet容器，同时也支持html、jsp、asp、php、cgi等，其中cgi需要一些手动调试，不过很容易的': 1, 'apache是最开始的页面解析服务，tomcat是后研发出来的，从本质上来说tomcat的功能完全可以替代apache，但apache毕竟是tomcat的前辈级人物，并且市场上也有不少人还在用apache，所以apache还会继续存在，不会被取代，apache不能解析java的东西，但解析html速度快': 1, 'tomcat是apache软件基金会（apachesoftwarefoundation）的jakarta项目中的一个核心项目，由apache、sun和部分公司和个人一起开发完善的轻量级web应用服务器，是servlet规范和jsp规范的开源实现': 1, '但是绿色解压版的tomcat是不会直接在windows服务中出现的': 1, 'tomcat是常见的免费的web服务器.tomcat这个名字的来历，tomcat是一种野外的猫科动物，不依赖人类，独立生活': 1, '实际上tomcat是apache服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat时，它实际上作为一个与apache独立的进程单独运行的，tomcat实际上运行jsp页面和servlet': 1}
order:::{}
ethereum:::{'ethereum是加入这一运动的最新技术之一': 1}
consumer:::{'该参数指定consumer是否自动提交位移': 1, '在kafka中kafkaconsumer是线程不安全的': 1, 'broker收到join_group请求后，让目标group进入preparingrebalance状态，等待一段时间后，返回一些信息，这些信息包括consumer在group中对应的memberid以及该group的leaderid、generationid(每次reblance都会+1)等等，如果对应consumer是leader，那么还会将当期组中所有的members信息返回给leader用于后面让leader来分配各个member要消费的partition（第一个加入该group的consumer就是该group的leader）': 1, '如果consumer是follower，就直接发送一个sync_group请求给broker': 1, '如果该consumer是leader，则该consumer会在本地进行partition的分配，然后把partition的分配结果随着sync_group请求一起上报给groupcoordinator': 1}
prometheus:::{'prometheus是一个最初在soundcloud上构建的开源系统监控和警报工具包': 1, '先访问http://ip:9090/alerts，查看prometheus是否根据告警规则收集到对应的告警内容': 1, '即：假设prometheus是每5秒采集一次，但是exporter是每11秒生成一次数据，那么第一次采集成功后，第二次采集的数据还是之前的历史数据，并未更新': 1, '已经知道prometheus是基于pull形式进行数据采集，prometheus可以通过静态配置更新监控的目标，但这样势必带来巨大的运维开销': 1, 'prometheus是一个完整的监控和趋势系统，包括基于时间序列数据的内置和主动抓取，存储，查询，绘图和警报': 1, 'prometheus是一个最初在soundcloud上构建的开源系统监视和警报工具包': 1, 'prometheus是由前google工程师从2012年开始在soundcloud以开源软件的形式进行研发的系统监控和告警工具包，自此以后，许多公司和组织都采用了prometheus作为监控告警工具': 1, 'prometheus是专门为提高系统可靠性而设计的，它可以在断电期间快速地诊断问题，每个prometheusserver都是相互独立的，不依赖于网络存储或其他远程服务；当基础架构出现故障时，我们可以通过prometheus快速地定位故障点，而且不会消耗大量的基础架构资源': 1, '这么多系统，接口、机制各不相同，prometheus是如何实现各类系统的统一监控的呢': 1, '然后再根据不同系统实现discoverer，那么我们就来看看prometheus是如何管理这些discoverer的': 1, '接下来，我就要看看prometheus是如构造各种discoverer': 1, '本文不对具体的discoverer做解释，本文只对服务发现的实现机制进行详细讲解，我会有专门的文章讲解prometheus是如何实现kubernetes的discoverer的': 1, 'prometheus加载配置文件部分不是本文重点，读者自行分析代码，本章节介绍prometheus是如何将数组型的配置转换为map类型的，如下代码所示：': 1}
angularjs:::{'angularjs服务是单例对象，这意味着只有一个实例被创建，服务使用angularjs的依赖注入机制来定义和注册': 1, 'angularjs服务是单例对象，这意味着只有一个实例被创建过，服务使用angularjs的依赖注入机制来定义和注册': 1, '看了几天angularjs的各种中文教程，一直没有理解angularjs是做什么的': 1, '那么angularjs是什么呢': 1, 'angularjs是把html进行扩展，这句话很多教程里都会提及，但是我一直不明白这个“扩展”是什么意思': 1}
hystrix:::{'hystrix是一个库，可通过添加延迟容错和容错逻辑来帮助您控制这些分布式服务之间的交互': 1, 'hystrix是这样的一个库，它通过添加容许时延和容错逻辑来帮助你控制这些分布式服务之间的交互': 1, 'hystrix是一个用于分布式系统的延迟和容错的开源库': 1, 'hystrix是由netflix开源的一个服务隔离组件，通过服务隔离来避免由于依赖延迟、异常，引起资源耗尽导致系统不可用的解决方案': 1, 'hystrix是2011从netflixapi团队发展而来': 1, 'hystrix是一个库，通过添加延迟容忍和容错逻辑，帮助您控制这些分布式服务之间的交互': 1, '什么是hystrixhystrix是一个处理分布式系统的延迟和容错的开源库,在分布式系统里,许多依赖不可避免的会调用失败,比如超时,异常,hystrix能够保证在一个依赖问题的情况选,不会导致整体服务的失败,避免级联故障,一提高分布式系统的弹性.\u2003\u2003"断路器"本身是一种开关装置,当某个服务单元发生故障后,通过断路器的故障监控(类似熔断保险丝),向调用方法返回一个服务预期的,可处理的备选响应,而不是长时间的等待或者抛出调用方法无法处理的异常了.这样就可以保证了服务调用方的线程不会被长时间,不必要的占用,从而避免故障在分布式系统中的蔓延,乃至雪崩.作用:服务降级,服务熔断,服务限流,接近实时的监控.上图所示:一个程序进来,需要连续调用a,g,e2,e3这四个服务,如果说这四个服务正常运行,则没啥问题,但是如果e2出现了问题,没有任何解决措施的情况下,会导致在运行完g时出现等待,延迟,异常等,进而该程序无法进行下去,这个时候我们就需要给服务备份,可以考虑异步等方法,给予用户提示,服务崩溃,但后面的服务能继续运行.解决措施就是我们这里考虑的hystrix,这也是一个最经典的应用服务熔断:熔断机制是对应雪崩效应的一种微服务链路保护机制.现在进行一项实例测试:按照之前的项目:如果要加上hystrix我们可以增加一个module:代码:': 1, 'hystrix是netflix公司开源的一个项目，它提供了熔断器的功能，能够阻止分布式系统中出现的联动故障': 1, 'hystrix是通过隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高了整个分布式系统的弹性': 1, 'hystrix是一个用于处理分布式系统延迟和容错的开源库，在分布式系统里，许多依赖不可避免出现调用失败的情况，常见的超时、程序异常报错等，hystrix能够保证在一个依赖出现问题的情况下，不会导致整体服务失败，避免了级联故障，从而提高分布式系统的弹性': 1, 'hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性': 1, 'hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，hystrix能够保证在一个依赖出问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性': 1, 'hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会调用失败，比如超时，异常等，hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性': 1, 'hystrix是一个微服务关于服务保护的框架，是netflix开源的一款针对分布式系统的延迟和容错解决框架，目的是用来隔离分布式服务故障': 1, 'hystrix是一款开源的容错插件，具有依赖隔离，系统容错降级等功能，这也是其最重要的两种用途，还有请求合并等功能': 1}
jsf:::{'jsf是一种web框架，其实我也没有用过，这是我很久之前在网上看到的一种框架，当时大致简单的了解一下': 1, 'jsf常用来和struts对比，struts是一种mvc框架，jsf是一种事件驱动的框架': 1, '注册中心与rpc框架可各种交互：注册中心和rpc框架是长链接，而且jsf是支持callback的，注册中心可以调用rpc框架进行服务列表变化之外的操作；例如查看状态，查看配置，配置下发等': 2, '与jsp本质上是一个具有服务器端功能html页面不同，jsf是一个xml文档，它表示逻辑树中的正式组件': 1, 'jsf是一个mvc框架，实现了model-view-controller模式': 1, 'jsf是一种用于构建javaweb应用程序的标准框架(是javacommunityprocess规定的jsr-127标准)': 1, '从应用开发者的角度看，两种框架十分相似，但是jsf可能会得到更多的支持，因为jsf是java的标准': 1, '最后，由于jsf是通过javacommunityprocess(jcp)开发的一种java标准，因此开发工具供应商完全能够为javaserverfaces提供易于使用的、高效的可视化开发环境': 1, '此外，因为jsf是一种java标准，因此多个软件供应商将继续提供始终高效的开发环境，这些开发环境毫无疑问将达到或很可能超过专有的可视化开发环境': 1, 'ajax4jsf是一个很容易使用的框架.有什么问题可以在jsf中文论坛讨论.': 1, 'ajax4jsf是一个添加ajax功能到jsf项目中的开源框架,使用该框架不用写js代码.': 1, 'jsf是一个简单的静态依赖注入(di)框架': 1, 'jstl包下载在http://jakarta.apache.org/site/downloads/downloads_taglibs-standard.cgi\u3000\u3000所以，从jsf的驱动包组成看，其开源基因也占据很大的比重，jsf是一个sun伙伴们工业标准和开源之间的一个混血儿': 1}
token:::{'1、token的引入：token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，token便应运而生': 7, '2、token的定义：token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码': 7, 'token是计算机术语：令牌，令牌是一种能够控制站点占有媒体的特殊帧，以区别数据帧及其他控制帧': 1, 'token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码': 2, 'token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，token便应运而生': 1, 'token的引入：token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，token便应运而生': 1, 'token的定义：token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码': 1, '自拼多多客户端从4.20版本开始,就有了动态更新的行为,token成功登录到客户端之后,会有一定概率会被更新,这个时间是不确定的,有可能是登录成功后马上更新,有可能是10几分钟甚至几十分钟.然而软件有个检测机制,在任务执行过程中会检测token是否被更新,若被检测到了,会自动更新到备份文件中,若是在任务完成后没有检测到更新,那么之后更新了就失效了.': 1, '1.什么是token：token是服务端端生成的一串字符串，作为客户端进行请求时辨别客户身份的的一个令牌': 1, '这样查询速度绝对就不是问题了，也不用太担心占据内存，就算token是一个32位的字符串，应用的用户量在百万级或者千万级，也是占不了多少内存的': 1, 'token是很容易泄露的，如果不进行加密处理，很容易被恶意拷贝并用来登录': 1, 'token是什么意思推荐阅读：什么是token': 1, 'token是什么意思': 1, 'token是一个用户自定义的任意字符串': 1, 'sha1的加密过程是不可逆的，即不能通过timestamp、signature和nonce计算出token是什么': 1, 'token是在服务端产生的，如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回token给前端': 1, '三、token的作用token是在服务端产生的': 1, 'token是有时效的，一段时间之后用户需要重新验证': 2, '通过这个与当前时间对比发现token是否过期': 2, '/***校验token是否是服务器生成的，以防token被修改*@paramjwtbase64*@return*@throwsexception*/publicstatic<t>booleanverifyjwt(stringjwtbase64)throwsexception{stringjwt=newstring(base64util.decryptbase64(jwtbase64));': 2, '再来看看token是怎么做的：': 1}
faas:::{'faas是一种实现无服务器计算的方法，藉此开发人员可以编写业务逻辑，然后在完全由平台管理的linux容器中执行这些业务逻辑': 1, '现在faas的说法还不太一致，但是可以明确的是**faas是paas能力的一种缩放，缩放到function级别**': 1, '另一个主题是无服务器faas是“存储过程即服务”': 2, 'faas是computeasaservice（计算即服务）的一种形式': 2, 'faas是一种构建和部署服务端软件的新方式，面向部署单个的函数或者操作': 2, '从表面上看，baas和faas是两码事——前者是把应用中的各个部分完全外包出去，后者是一种新的运行代码的托管环境': 2, '其实一个更细分的服务化叫做faas，faas是functionsasaservice的缩写，可以广义的理解为功能服务化，也可以解释为函数服务化': 1, '所以可以说一开始faas是和paas融合在一起的，而现在paas就更加专注于服务编排和资源管理，而faas也开始独立出来，faas逐渐形成以代码函数为主体的事件驱动架构，使用faas的时候可以将函数作为一个线上服务、远程计算服务，可以通过api执行、通过邮件执行、通过iot执行，通过队列执行': 1, 'faas是一种事件驱动架构，所以事件源很重要': 1, '从faas是运行后端代码而无需管理自己的服务器系统或应用程序': 1, '与kubeless类似，openfaas是一个使用docker和kubernetes构建无服务器功能的框架': 1}
consul:::{'consul是一个基于cp的轻量级分布式高可用的系统，提供服务发现、健康检查、k-v存储、多数据中心等功能，不需要再依赖其他组件(zk、eureka、etcd等)': 1, '从架构图中发现有一个gossip，一个dc中涵盖了两个gossip池，lan池和wan池，为什么会有gossip，因为consul是建立在serf基础之上的，gossip由serf提供，gossip是一个去中心化的协议': 1, 'consul是一个用于实现分布式系统的服务发现与配置的开源工具': 1, '安装consul后，通过打开一个新的终端会话并检查consul是否可用，通过执行consul，你应该会看到类似这样的帮助输出：$consul': 1, 'consul是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面': 1, 'ok，那么这里就来讨论一下consul是如何实现数据一致性的': 1, '最后说说consul是如何通过各个服务机器上部署agent来实现分布式健康检查的': 1, 'consul是hashicorp公司推出的开源工具，官方网址：https://www.consul.io/，用于实现分布式系统的服务发现与配置': 1, 'consul是hashicorp公司推出的开源工具，用于实现分布式系统的服务发现与配置': 1, '官网文档描述：consul是一个网络工具，提供功能齐全的服务网格和服务发现': 1, '输出结果说明：consul是系统自带的服务，hi-linux是刚才注册的服务,其tags为web': 1}
signalr:::{'signalr是一个基于asp.net平台构建，利用javascript或者websockets，实现在客户端和服务端异步通信的框架': 1, '\u200bsignalrasp.netsignalr是一个asp.net下的类库，可以在asp.net的web项目中实现实时通信': 1, 'signalr是.net上的一个开源库，主要用于实时更新的应用程序': 1, 'mapsignalr是默认的注册signalr入口，可以定义任意signalr实现接口，比如重新定义服务器地址（默认是/signalr）、自定义身份证验证和授权机制等等': 1, '###简介###asp.netsignalr是一个asp.net下的类库，可以在asp.net的web项目中实现实时通信': 1, '这篇文章描述signalr是什么，和一些它旨在创建的解决方案': 1, 'asp.netsignalr是为asp.net开发人员提供的一个库，可以简化开发人员将实时web功能添加到应用程序的过程': 1, 'signalr是开源的，可以通过github访问': 1, 'signalr是对一组在构建客户端和服务器之间的real-time功能所需要使用的传输技术的抽象': 1, 'asp.netsignalr是asp.net开发人员的库，它简化了向应用程序添加实时web功能的过程': 1, 'signalr是开源的，可通过github访问': 1, 'signalr是一种抽象，通过某些要求进行客户端和服务器之间的实时工作的传输': 1}
proxy:::{}
rest:::{'要具体知道什么是rest，我们又必须提到web，因为rest是以web为平台的': 1, '在某种意义上，通过强调uri和http等早期internet标准，rest是对大型应用程序服务器时代之前的web方式的回归': 1, 'rest是一种软件架构风格而非协议也非规范，是一种针对网络应用的开发方式，可以降低开发的复杂性，提高系统的可伸缩性': 1, '分布式能力：rest更适合在分布式环境中使用、因为rest是基于原生http协议的，而http协议是无状态的': 1, 'rest服务是一种web服务架构，其目标是为了创建具有良好扩展性的分布式系统': 1, 'rest是representationalstatetransfer（表现层状态转移）的缩写，它是由罗伊·菲尔丁（royfielding）提出的，是用来描述创建httpapi的标准方法的，他发现这四种常用的行为（查看（view），创建（create），编辑（edit）和删除（delete））都可以直接映射到http中已实现的get,post,put和delete方法': 2, '如果你把这个名称搞懂了，也就不难体会rest是一种什么样的设计': 1, '我们也可以说rest是api的体系结构样式或设计模式': 1, '在这里我们再重复一次：rest是一种组织web服务的架构，其只在架构方面提出了一系列约束': 1, '但是反过来说，理论常常与实际有些脱钩，更何况rest是在2000年左右提出的，无法做到能够预见到十余年后所使用的各项技术': 1, '【基本概念】rest是一种软件架构模式': 1, 'rest是由royfielding提出的一种软件架构，现如今也是因为rest模式的web服务与复杂的soap、xml-rpc对比来说，更加简洁，越来越多的web服务开始采用rest风格设计和实现': 1, 'rest是什么呢': 1, '要具体什么事rest，我们又必须提到web，因为rest是以web为平台的': 1, '1、rest是面向资源的，这个概念非常重要，而资源是通过uri进行暴露': 1, '日常开发中，调用远程的rest服务是很常见的，比如微服务情况下的rest服务调用，又或者是调用第三方服务': 1, 'rest：是一组架构约束条件和原则，rest是roythomasfielding在他2000年的博士论文中提出的': 1, '说了很多，从上面几点来简单总结下rest是为解决web应用在互联网环境中出现的可伸缩性差（如：并发量增高），安全性，幂等性等问题而出现的一种分布式应用架构风格': 1, 'restfulapi就是rest风格的api，即rest是一种架构风格，跟编程语言无关，跟平台无关，采用http做传输协议': 1, '由于rest是representationalstatetransfer的首字母缩写，无国籍是关键': 1}
agent:::{'在该模型中,agent是运行在被管理单元上的自主行为实体,它能够对被管理单元上的相关事件作出反应、响应manager发来的管理命令等等': 1, 'uniaccessagent是用来监视员工的，是由leagsoft开发的监控软件，使用360卸载时会提示需要输入管理员密码，使用360的进程管理器也看不到对应的进程': 1, 'user-agent是http协议中的一部分，属于头域的组成部分，useragent也简称ua': 1, 'netscapenavigator3发布不久，微软公布了它的首款web浏览器：ie3¹，但是netscape是当时首选浏览器，大多数服务器在加载页面前都会检查user-agent是否为该款浏览器': 1, '既然已经知道user-agent是http的头域，那我们在编程的时候就可以获得它': 1}
mariadb:::{'mariadb是一个关系型数据库': 1, 'mariadb是mysql的分支版本': 1, 'mariadb是一个通用的数据库管理系统（dbms），它具有可扩展的架构，可通过可插拔存储引擎支持大量的用例': 1, 'mariadb是一款开源的多线程关系数据库管理系统，在gnu公共许可证（gpl）下发布': 1, '而mariadb是mysql的一个分支，因此具有相同的数据库结构和索引': 1, 'mariadb是一个社区开发的mysql关系型数据库管理系统的分支': 1, 'mariadb是mysql的一个分支': 1}
gitlab:::{'为了方便大家知道我的gitlab是如何配置的，现将我的配置信息公布如下：': 1, '安装教程在这里安装完成后，最新版本的gitlab是12.0.1': 1, '而gitlab是直接在本企业的服务器上搭建，仅供本企业的人用': 1}
appium:::{'appium是一个移动端的自动化框架，可用于测试原生应用，移动网页应用和混合型应用，且是跨平台的': 2, '重要的是appium是跨平台的，何为跨平台，意思就是可以针对不同的平台用一套api来编写测试用例': 2, 'appium是一个app的自动化框架，可用于测试app、网页(web)、混合型应用，而且是跨平台(可以针对不同平台用一套api来编写测试用例)的，': 1, 'appium是依赖于nodejs的，所以第一步先安装nodejs,nodejs下载地址：https://nodejs.org/en/download/': 1, '我们可以通过socket模块来检查appium是否启动，如果未启动，可以通过subprocess模块来启动，需要导入socket和subprocess模块，具体如下图：': 1}
lambda:::{'对于没有计算机科学背景的人来说，计算机科学世界中的lambda是什么': 2, 'lambda是内联定义的一种函数': 1, '他们的快速解释：lambda是一种将代码（函数）视为数据的方法': 1, '在计算机编程中，lambda是一段代码（语句，表达式或一组代码），它从外部源获取一些参数': 1, 'lambda是一个通用术语，用于定义计算中的不同事物': 1, 'amazonlambda是saas服务，其中pythonlambda是运算符': 1, 'amazonlambda是一种无服务器计算服务，用户可以使用该服务进行计算，而无需置备和管理服务器和虚拟机': 1, 'pythonlambda是一个特殊功能，称为匿名函数': 1, '1、lambda函数比较轻便，即用即扔，很适合需要完成某一项简单功能，但是这个简单的功能只在此一处使用，连名字都很随意的情况下；2、lambda是匿名函数，一般用来给filter，map，reduce这样的函数式编程服务；（具体使用请参考本人的上一篇博文：https://blog.csdn.net/little_fire/article/details/80498767）3、作为回调函数，可以传递给某些应用，比如消息处理等': 1, 'lambda是aws在2014年底推出的事件驱动计算服务': 1, 'awslambda是无服务器编程': 1, 'awslambda是awscloud上开发人员和技术解决方案提供商中非常流行的技术之一': 1, '与awsec2计算机相比，awslambda是轻量级的按需解决方案': 1, '话虽如此，您几乎可以部署任何解决方案，但是在许多用例中，awslambda是理想的解决方案': 1, 'awslambda是amazonwebservice（aws）上的事件驱动的无服务器平台': 1, 'awslambda是基于事件的应用程序的最佳解决方案': 1, '问：awslambda是否会再使用函数实例': 1, '问：awslambda是否支持环境变量': 1, '问：awslambda是否支持版本控制': 1, '问：用于执行函数的jvm环境lambda是什么': 1}
gateway:::{'springcloudgateway是springcloud新推出的网关框架，之前是netflixzuul': 1, '分词解读下，504是http的状态码，gateway是指网关，time-out是指超时': 1, 'springcloudgateway是spring官方基于spring5.0，springboot2.0和projectreactor等技术开发的网关，springcloudgateway旨在为微服务架构提供一种简单而有效的统一的api路由管理方式': 2, 'springcloudgateway是springcloud的⼀个全新项⽬，⽬标是取代netflflixzuul，它基于spring5.0+springboot2.0+webflux（基于⾼性能的reactor模式响应式通信框架netty，异步⾮阻塞模型）等技术开发，性能⾼于zuul，官⽅测试，gateway是zuul的1.6倍，旨在为微服务架构提供⼀种简单有效的统⼀的api路由管理⽅式': 1, '相比zuul，gateway是spring体系内的产物，和spring融合更好': 1, '注：gateway是springcloud官方提供的新一代网关组件，是基于netty的，与servlet不兼容': 1, 'gateway是zuul1.x替代': 1, 'gateway是在spring生态系统之上构建的api网关服务，基于spring5，springboot2和projectreactor等技术': 1, 'springcloudgateway是springcloud官方推出的第二代网关框架，取代zuul网关': 1, 'springcloudgateway作为springcloud生态系统中的网关，目标是替代zuul1，在springcloud2.x版本中，没有对新版本zuul2最新高性能版本进行集成，仍然使用的zuul1非reactor模式的老版本，为了提升网关性能，springcloudgateway是基于webflux框架实现的，而webflux框架底层使用了高性能的reactor模式通信框架netty': 1, 'springcloudgateway建立在springframework5+projectreactor+springboot2.x之上，使用异步非阻塞api，springcloudgateway是基于webflux框架实现的，而webflux框架底层使用了高性能的reactor模式通信框架netty；springcloudgateway还支持websocket，与spring紧密集成拥有更好的开发体验': 1}
rpc:::{'1.grpc是google最近公布的开源软件，基于最新的http2.0协议，并支持常见的众多编程语言': 1, '首先了解什么叫rpc，为什么要rpc，rpc是指远程过程调用，也就是说两台服务器a，b，一个应用部署在a服务器上，想要调用b服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据': 2, 'rpc是面向过程，restful是面向资源的': 1, 'json-rpc是一种无状态的，轻量级的远程程序调用协议': 1, 'rpc是remoteprocedurecall的缩写，译为远程过程调用': 1, 'rpc是指计算机a上的进程，调用另外一台计算机b上的进程，其中a上的调用进程被挂起，而b上的被调用进程开始执行，当值返回给a时，a进程继续执行': 2, 'grpc是google开发的高性能、通用的开源rpc框架，其由google主要面向移动应用开发并基于http/2协议标准而设计，基于protobuf(protocolbuffers)序列化协议开发，且支持众多开发语言': 1, 'rpc是远程过程调用（remoteprocedurecall）的缩写形式，birrell和nelson在1984发表于acmtransactionsoncomputersystems的论文《implementingremoteprocedurecalls》对rpc做了经典的诠释': 1, 'rpc是通过类似的途径来获得透明性': 1, 'xml-rpc是1998年作为一个rpc消息传递协议，将请求和响应封装解析为人类可读的xml格式': 1, 'xml-rpc是一个简单的规范(约7页)，没有雄心勃勃的目标——它只关注消息，而并不处理诸如垃圾收集、远程对象、远程过程的名称服务和其他方面的问题': 1, 'rpc是将远过程调用进行了一层封装，使得使用者像调用本地方法一样调用远程方法': 1}
nlp:::{'nlp是什么?': 1, 'nlp是计算机科学领域与人工智能领域中的一个重要方向': 1, 'nlp是计算机以一种聪明而有用的方式分析，理解和从人类语言中获取意义的一种方式': 1, 'nlp是人工智能和语言学领域的交叉学科，自然语言处理在广义上分为两大部分：': 1, 'hanlp是一系列模型与算法组成的nlp工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用': 1, 'nlp是金融科技的核心技术之一，依托nlp的智能金融项目要考虑具体的nlp技术的工程化问题': 1, '关于这些开源工具的发展速度，根据github上star数量的趋势，hanlp是发展最迅猛的，如图1-7所示': 1, 'nlp是人工智能和语言学领域的交叉学科，用于分析、理解和生成自然语言，以方便人和计算机设备进行交流，以及人与人之间的交流': 1}
zipkinserver:::{}
like:::{}
websocket:::{'二、websocket是什么样的协议，具体有什么优点首先，websocket是一个持久化的协议，相对于http这种非持久的协议来说': 1, 'websocket是html5出的东西（协议），也就是说http协议没有变化，或者说没关系，但http是不支持持久连接的（长连接，循环连接的不算）': 1, '首先，websocket是一个持久化的协议，相对于http这种非持久的协议来说': 1, '首先websocket是基于http协议的，或者说借用了http的协议来完成一部分握手': 1, 'websocket是存在于互联网交互架构应用层的协议，虽然在实际的运用场景中websocket需要http去启动链接，但该依赖关系不是必要的': 1, '而websocket是非常好的通讯解决方案': 1, 'websocket是html5一种新的协议': 1, 'websocket是真正实现了全双工通信的服务器向客户端推的互联网技术': 1, 'pywebsocket是一个由python编写的websocket服务器': 1, 'websocket是html5开始提供的一种在单个tcp连接上进行全双工通讯的协议，使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据': 1, 'websocket是html5新增加的一种通信协议，目前流行的浏览器都支持这个协议，例如chrome，safari，firefox，opera，ie等等，对该协议支持最早的应该是chrome，从chrome12就已经开始支持，随着协议草案的不断变化，各个浏览器对协议的实现也在不停的更新': 1, 'websocket协议是一种双向通信协议，它建立在tcp之上，同http一样通过tcp来传输数据，但是它和http最大的不同有两点：1.websocket是一种双向通信协议，在建立连接后，websocket服务器和browser/ua都能主动的向对方发送或接收数据，就像socket一样，不同的是websocket是一种建立在web基础上的一种简单模拟socket的协议；2.websocket需要通过握手连接，类似于tcp它也需要客户端和服务器端进行握手连接，连接成功后才能相互通信': 1, '但是如果想搭建一个websocket服务器就没有那么轻松了，因为websocket是一种新的通信协议，目前还是草案，没有成为标准，市场上也没有成熟的websocket服务器或者library实现websocket协议，我们就必须自己动手写代码去解析和组装websocket的数据包': 1, '首先，相对于http这种非持久的协议来说，websocket是一种持久化的协议': 1, '（2）websocket是基于http协议的，或者说借用了http协议来完成一部分握手，在握手阶段与http是相同的': 1, 'websocket是html5开始提供的一种在单个tcp连接上进行全双工通讯的协议': 1}
quote:::{}
reliable:::{}
networkmapcache:::{}
hello:::{}
sensu:::{'sensu是一个开源基础结构和应用程序监视解决方案，用于监视服务器，服务和应用程序的运行状况，并通过第三方集成发送警报和通知': 1, '如果您想以简单有效的方式监控您的云基础架构，sensu是一个不错的选择': 1, 'sensu是功能强大的工具，本文仅介绍其功能': 1, 'sensu1.sensu框架sensu是开源的轻量级监控框架，其核心代码1000行左右，使用ruby开发': 1, 'sensu是由sonian公司使用ruby开发的一种监控框架，主要用于拥有大规模节点的云计算平台的检查与监控': 1, 'sensu是开源的监控框架': 1, 'sensu是一款开源的监控框架': 1, 'sensu是一个开源的监控系统sensu运行一系列的check脚本检查应用和服务的可用性，当某个条件满足时触发handlers，check脚本也可以附带数据实现计量数据收集': 1, '我们先理解sensu是一个远程执行脚本的工具，这里的脚本不限形式，可以是shell,python或者是ruby等，任何一个脚本语言': 1, 'sensu是由sonian公司开发的一种监控框架，主要用于拥有大规模节点的云计算平台的检查与监控': 1, 'sensu是一个开源的基础设施和应用程序监控解决方案，它可以监控服务器、相关服务和应用程序健康状况，并通过第三方集成发送警报和通知': 1, '如果你想以一种简单而有效的方式监控云基础设施，sensu是一个不错的选择': 1, 'sensu是一个功能强大的工具，本文只简要介绍它可以干什么': 1, 'sensu是多云端容器基础设施监控工具': 1, '1.sensu是由sonian公司开发的一种监控框架，主要用于拥有大规模节点的云计算平台的检查与监控': 1, 'sensu是一个可组合的监视工作流，可以复用现有的nagios检查': 1, '如果您希望按原样扩展现有nagios设置，或者希望利用sensu的自动注册特性，那么sensu是一个不错的选择': 1}
etcd:::{'etcd是一个高可靠的kv存储系统，支持put/get/delete接口；为了支持服务注册与发现，支持watch接口（通过httplongpoll实现）；支持key持有ttl属性；cas（compareandswap)操作;支持多key的事务操作；支持目录操作': 1, 'etcd是为一个需要被分布式系统或集群提供了强一致性分布式键值数据库，它优雅的处理了当出现网路阻断也能容忍机器宕机(哪怕是leader结点)': 1, '\u3000\u3000\u3000\u3000etcd是一个强大的一致性的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器群访问的数据': 1, 'etcd是用于共享配置和服务发现的分布式，一致性的kv存储系统': 1, 'etcd是coreos公司发起的一个开源项目，授权协议为apache': 1, 'etcd是一个分布式键值存储系统，在一个集群中，如果一个节点配置了某些属性，集群中的每个节点都可以使用完整的存档，我们每次在网关节点后的计算节点集群加一个服务，只需要向etcd注册该服务（其实就是存一个值）然后向etcd发送心跳，当etcd没有检测到心跳就会把这个键值对删了(这整个动作是etcd里的租约模式)，网关那边就只需要watch这个key，就能够知道所有服务的所有动态了': 1, '一句话，千万要指定etcdctl的api版本，只有2和3，它对应的是grpc的版本(因为etcdctl和etcd是通过grpc通信的,而grpc2和grpc3是不兼容的)': 1, '假设你的etcd是3.0的，这时候你用etcdctl没有指定api版本，那么这时候就是默认是2.这里你创建的key，将无法被你看到，秀吗': 1, 'etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现': 1, 'etcd是由coreos开发并维护的，灵感来自于zookeeper和doozer，它使用go语言编写，并通过raft一致性算法处理日志复制以保证强一致性': 1, 'etcd目前默认使用2379端口提供httpapi服务，2380端口和peer通信(这两个端口已经被iana官方预留给etcd)；因为etcd是go语言编写的，安装只需要下载对应的二进制文件，并放到合适的路径就行': 1, 'etcd是server端，etcdctl是客户端': 2, 'etcd是coreos团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库': 2, '要问etcd是什么': 2, 'etcdetcd是一个高可用的键值分布式存储系统，主要用于共享配置和服务发现': 1, 'etcd是一个分布式一致性k-v存储系统，可用于服务注册发现与共享配置，具有以下优点：': 1, '因为etcd是go语言编写的，安装只需要下载对应的二进制文件，并放到合适的路径就行': 1, 'etcd是一个分布式、高可靠的键值存储，可以容忍集群中部分节点故障，只要有一半以上节点存活即可对外提供服务': 1, '在分布式系统中，如何管理节点间的状态一直是一个难题，etcd是由开发并维护的，它使用go语言编写，并通过raft一致性算法处理日志复制以保证强一致性': 1}
vm:::{'graalvm是java虚拟机的新运行时，它为多种语言（包括java，javascript和ruby）提供了高性能的执行环境': 1, '想一下，根据java虚拟机的原理，可以猜想一下graalvm的基本工作原理，我们知道无论是java还是kotlin都需要经过编译后生成字节码文件交给jvm来运行，也就是说对于jvm，它是与字节码打交道的，所以啊，字节码文件相当于一个中间表示，那对于graalvm是不是也一样，要想实现对更多的语言的支持，那就需要把这些语言，比如js，需要把它编译后的特定格式代码或者直接源代码通过一种特定的解释器转换成graalvm可以认识的中间代码，就比如jvm中的字节码文件一样': 1}
coap:::{'而coap是通过定义二进制各位段功能来描述协议包内容': 2, 'udp部分的描述非常清晰，该部分与常见的2g模块/3g使用较为相似，但是coap相关的at指令很难体现coap特性，例如at指令未指定coap请求方法、coap请求路由等等，coap的使用需要与华为cdp服务器配合，这让不少用户忽略了coap的细节而仅仅认为coap是个透传的通道': 1, '❷mqtt是长连接而coap是无连接': 1, '既然coap是基于udp来组包的，那肯定是可以实现': 1, 'coap是在udp上的代替了在tcp上的http，由于在http协议太大，coap协议却很小的，所以很适合嵌入式开发的环境，同样对比的还有mqtt协议在这里不讲解': 1, 'nb-iot模块有一个coap的功能，coap是基于udp协议的一种带有重传机制的事务处理机制的应用层传输协议': 1, 'coap是一种符合rest规范(主要是幂等性)的，适用于物联网通讯的数据协议': 1, '具体使用起来和http比较类似，同样有着get、post、put、delete四种操作，不过coap是基于udp的，并且数据包是按字节码拼接的，甚至有些信息是按位标识的，不像是http一样用各种字符串来表达各个部分': 1, '3、coap是二进制格式的，http是文本格式的，coap比http更加紧凑': 1, 'coap是一种应用层协议，它运行于udp协议之上而不是像http那样运行于tcp之上': 1}
servicea:::{}
default:::{}
rancher:::{'rancher是什么rancher是一个开源的企业级容器管理平台': 1, 'rancher是一个开源的企业级容器管理平台': 1, 'rancher是进入容器服务管理中的后起之秀，后发优势也确实一览无余': 1, '旗舰产品rancher是一个开源的企业级kubernetes管理平台，实现了kubernetes集群在混合云+本地数据中心的集中部署与管理': 1}
nomad:::{'nomad是：一个简单而灵活的工作负载编排器，可以跨内部部署和云大规模部署和管理容器和非容器化应用程序': 1, '摘要：nomad简介nomad是一个管理机器集群并在集群上运行应用程序的工具': 1, 'nomad是一个管理机器集群并在集群上运行应用程序的工具': 2, '检查nomad是否安装成功': 1, 'nomad是一个集群调度引擎，它有几种驱动类型，允许您在跨工作负载节点的分布式网络调度应用程序工作负载': 1, '对于那些还没有准备好进行容器化的遗留应用程序，nomad是一个很好的选择，它允许对那些还没有准备好迁移到新部署框架中的工作负载类型灵活地进行动态作业调度': 1, 'nomad是一个复杂的系统，有许多不同的部分': 1, '只观察单个区域，在高层次上，nomad是这样的:': 1, 'nomad是一个功能强大、灵活的调度器，适用于长期运行的服务和批处理任务': 1, 'nomad是一种乐观并发的共享状态调度器，这意味着所有服务器都可以并行地参与调度决策': 1}
dubbo:::{'dubbo是：': 1, '先去b站看了视频，然后网上找来资料，终于把dubbo是什么以及怎么用了解清楚了': 1, 'dubbo是一个分布式、高性能、透明化的rpc服务框架，提供服务自动注册、自动发现等高效服务治理方案，可以和spring框架无缝集成': 1, 'dubbo是一个分布式服务框架，而springcloud是一个分布式的整体解决方案': 1, 'dubbo是阿里巴巴内部使用的一个分布式服务治理框架': 1, 'dubbo是一个分布式服务框架，致力于提供高性能和透明化的rpc远程服务调用方案，以及soa服务治理方案': 3, '1.2、什么是dubbodubbo是一个分布式服务框架，致力于提供高性能和透明化的rpc远程服务调用方案，soa服务治理方案': 1, 'dubbo是什么?他的核心功能是什么': 1, '通过telnetipport方式可以测试dubbo服务是否连通，命令如下：': 1}
locksmith:::{}
amoeba:::{'3.4\u3000\u3000开启防火墙amoeba设置的端口，本人amoeba服务器没有安装mysql，因此自定义的amoeba是3306端口，开启如下': 2, 'amoeba是一个以mysql为底层数据存储，并对应用提供mysql协议接口的proxy': 2, '在主机amoeba上安装java环境(因为amoeba是基于jdk1.5版本开发的，所以官方推荐使用1.5或1.6版本)': 1, '安装amoeba前要安装jdk，因为amoeba是由java开发的': 1, 'amoeba是java编写的，运行需要jdk环境，可以通过#echo$java_home看是否安装配置了jdk，如果没有，参考如下方法：': 1, '可使用命令[/usr/local/amoeba/bin/amoeba]验证amoeba是否安装成功': 1, '如果你想安装软件来解决读写分离，那amoeba是不错的，mysql-proxy不太建议，目前只有alpha版本，效率还不太理想，amoeba目前在阿里巴巴是内部项目，正在生产环境使用的': 1, 'amoeba是java写的，所以，需要我们的服务器配置java运行环境，这里我就不讲如何配置java运行环境了，大家可以参考博文《linuxcentos下搭建java运行环境》': 1, 'amoeba是一个代理服务器，介意client与server之间': 1, '一、amoeba是什么': 2, 'amoeba是mysql代理，增强mysql': 1, '3.准备：amoeba是基于java的所以必须有jdk': 1, '如果你可以安装软件，那amoeba是不错的，mysql-proxy不太建议，目前只有alpha版本，效率还不太理想，amoeba目前在阿里巴巴是内部项目，正在生产环境使用的': 1}
discoveryclient:::{'discoveryclient是一个接口,以eureka服务发现为例,通过该接口的具体实现类eurekadiscoveryclient在eureka注册中心获取注册的服务信息discoveryclient的使用示例(底层也是调用这些方法去获取eureka上注册的服务信息)': 1}
pinpoint:::{'pinpoint是一个开源的apm(applicationperformancemanagement/应用性能管理)工具，用于基于java的大规模分布式系统': 3, 'pinpoint是一个分析大型分布式系统的平台，提供解决方案来处理海量跟踪数据': 2, 'pinpoint是一个开源的apm(applicationperformancemanagement/应用性能管理)工具': 1, '简单的说，pinpoint是一款对java编写的大规模分布式系统的apm工具，有些人也喜欢称呼这类工具为调用链系统、分布式跟踪系统': 1, 'pinpoint是一款调用链跟踪工具，目前最新版是1.8.5，官方github地址：https://github.com/naver/pinpoint': 1, 'pinpoint是一款非常好用的监控服务器请求和资源的软件': 1, 'pinpoint是一个开源的java监控项目，也是分布式监控项目中比较知名的': 1, 'dapper和zipkin,twitter的一个分布式系统跟踪平台,生成随机traceids(pinpoint是transactionids)并将冲突情况视为正常': 1, 'pinpoint是和应用一起运行的另外的应用': 1, 'pinpoint是用java编写的大型分布式系统的apm（应用程序性能管理）工具': 1, 'pinpoint是一款apm工具，apm全称applicationperformancemanagement，应用性能监控，顾名思义，跟性能有关': 1, '而pinpoint是韩国人开发的，免不了有沟通障碍': 1, 'skywalking是通过在oap模块的application.yml中配置保留时间，而pinpoint是通过hbase的ttl功能实现': 1, 'pinpoint是开源在github上的一款apm监控工具，它是用java编写的，用于大规模分布式系统监控': 4, 'pinpoint是用java编写的大型分布式系统的apm(应用程序性能管理)工具': 1}
webrtc:::{'前面我们讲了很多开源webrtc服务器，到底webrtc是个什么东西，又包含哪些模块呢，我们从下面几个方面逐一分析：': 2, '从官网上的描述我们可以知道，webrtc是一个免费的开放项目，它通过简单的api为浏览器和移动应用程序提供实时通信（rtc）功能': 1, '经常有人说webrtc是javascriptapi的媒体引擎，准确说webrtc是一个带有javascriptapi的媒体引擎': 1, '所以webrtc是一组标准、协议也没错': 1, '当下载编译了webrtc的demo代码时需要运行测试时，发现demo代码里的服务器地址指向了https://appr.tc，webrtc是google推出，在中国就意味着需要翻墙，为何不在自己的linux虚拟机上自己搭建一个https://appr.tc服务来测试，webrtc已经开源了这个信令服务器，参考github': 1, '由于webrtc是基于p2p技术的一个协议栈，大多数情况下能满足1-5人的同时并发音视频通讯': 1, 'webrtc是依照叫peerconnection的连接过程，其连接过程需要四个角色来合作完成，即：': 1}
coordinator:::{'groupcoordinator是一个服务，每个broker在启动的时候都会启动一个该服务': 1, '由于transactioncoordinator是分配pid和管理事务的核心，因此producer要做的第一件事情就是通过向任意一个broker发送findcoordinator请求找到transactioncoordinator的位置': 1, '如果transactioncoordinator是第一次收到包含有该transactionid的initpidrequest请求，它将会把该<transactionid,pid>存入transactionlog，如上图中步骤2.1所示': 1, '之前介绍过presto的架构，coordinator是presto架构中负责调度的master节点': 1}
etl:::{'etl是bi项目的关键部分，也是一个长期的过程，只有不断的发现问题并解决问题，才能使etl运行效率更高，为bi项目后期开发提供准确与高效的数据': 11, '做数据仓库系统，etl是关键的一环': 11, '说大了，etl是数据整合解决方案，说小了，就是倒数据的工具': 11, 'etl是bi/dw（商务智能/数据仓库）的核心和灵魂，按照统一的规则集成并提高数据的价值，是负责完成数据从数据源向目标数据仓库转化的过程，是实施数据仓库的重要步骤': 1, 'etl是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据': 9, 'etl是bi项目重要的一个环节': 10, '本文转自：etl是什么': 1, 'etl是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据，etl是bi(商业智能)项目重要的一个环节': 1, 'etl(orelt)的流程可以用任何的编程语言去开发完成，由于etl是极为复杂的过程，而手写程序不易管理，有愈来愈多的企业采用工具协助etl的开发，并运用其内置的metadata功能来存储来源与目的的对应(mapping)以及转换规则': 1, 'etl是什么，在经过强大的搜索后，将自己的理解整理如下：': 1, 'etl是商业智能bi项目重要的一个环节': 2, 'etl是实现bi的基础，因为保证了数据的质量与正确性': 2, '个人觉得，etl是一个非常重要，非常基础的过程': 1, '而且目前大数据，ai,datascience这些概念特别火，其实万变不离其宗，etl是其中的一宗': 1, 'etl是重要的数据仓库技术，包括数据抽取（extract）、清洗（cleaning）、转换（transform）、装载（load）等过程': 1, 'etl是bi项目最重要的一个环节，通常情况下etl会花掉整个项目的1/3的时间，etl设计的好坏直接关接到bi项目的成败': 1, 'etl是构建数据仓库的重要的一环，用户从数据源抽取所需的数据，经过数据清洗，最终按照预先定义好的数据仓库模型，将数据加载到数据仓库中': 1, 'etl是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将公安部门中的分散、零乱、标准不统一的数据整合到一起，为办案的决策提供分析依据': 1}
node:::{'输入uname-a查看系统版本，我的64位的，到时候下载linux下64位的node我的本机的node是8.x版本的，所以我到官网上下载了历史版本的nodehttps://nodejs.org/en/download/releases/下载好的文件用ftp工具丢到/usr/local/node文件夹下然后进入node目录解压压缩包': 1}
kayenta:::{'kayenta是基于netflix内部的canary系统，但已更新为可处理更高级的使用案例，并减少易出错且耗时的临时canary分析': 1, 'spinnaker和kayenta是快速、可靠和易于使用的工具，可以最大限度地减少部署风险，同时允许大规模高速度运行': 1}
emq:::{'最近的开发中用到mqtt协议和emq消息服务器，mqtt和emq是物联网的产物，想必会随着5g时代和万物互联的到来而逐渐火热': 1, 'emq是一款开源的物联网mqtt消息服务器，使用erlang/otp语言平台设计，在diy智能家居时可以作为网关，前几天摸索了一下在树莓派中安装emq的方法，记录一下': 1}
patroni:::{'接着上期说,既然在众多的postgresql的高可用中patroni是有让他被选择成为postgresql的一种高可用方式的先进性,那下面就有另一个选择点,为什么选择etcd来作为patroni的分布式协调服务,而不是zookeeper,或其他的方式.': 2, '作为一个系列,下面在介绍完什么要使用patroni以及为什么选择etcd后,今天就开始需要安装patroni,由于patroni是一个基于python的程序,这就与patroni的版本和python有关.': 1, 'etcd+patroni是在一个postgrsql的高可用方案，依然是基于postgreqlstreamreplication': 1, '因此，除非只有2台机器没有多余机器部署dcs的情况，patroni是一款非常值得推荐的postgresql高可用工具': 1, '2、验证patroni是否安装成功': 1, '由于不是后台启动的服务，所以这里我们克隆一个窗口，切换到postgres用户下，并执行psql-h127.0.0.1-uadminpostgres连接数据库，验证patroni是否正常托管postgres服务': 1, '作为一个系列，下面在介绍完为什么使用patroni以及为什么选择etcd后，接下来介绍patroni的安装，由于patroni是一个基于python的程序，这就与patroni的版本和python有关': 1}
automl:::{'automl是机器学习中一个新的方向，用自动的方式寻找超参数组合，志在解决老大难的调参问题': 1, '目前貌似只支持macos和linux，其实我觉得就算不支持windows也没什么的，因为automl是个非常需要算力的事情，没很多块gpu，automl的功能基本发挥不出来，所以你需要一个强大的服务器（不过微软怎么会放弃支持呢2333）': 1, 'automl是一个很宽泛的术语，理论上来说，它囊括从数据探索到模型构建这一完整的数据科学循环周期': 1, 'automl是一个将耗时、迭代的机器学习任务自动化的过程': 2, '作为automl的提出和尝鲜者，googlecloudautoml是当前最早也是最成熟的automl系统，覆盖了图像分类，文本分类以及机器翻译三大领域，另外也上线了测试版的视频相关服务，支持迁移学习和模型结构搜索，超参数搜索': 1, '虽然谷歌此次声称automl是市面上唯一提供类似服务的产品，但诸如clarif.ai这样的服务也已打出过类似的旗号，而微软的认知服务也能让你定制预先训练好的视觉、语音识别和决策模型（不过所有这些服务都还未被正式发布）': 1, '最后，automl是向机器学习民主化迈出的一步，它使所有人都能使用ml的功能': 1, 'cloudautoml是来自google的一套机器学习产品，利用google最先进的迁移学习和神经架构搜索（nas）技术，让具有有限的机器学习专业知识的开发人员能够训练出特定的业务需求的高质量模型': 1, 'automl是否成功取决于它的使用率和在这个领域所取得的进展': 1, '很明显，automl是机器学习未来的一个重要组成部分': 1, 'automl是需要同时追求效果和效率的，一要降低成本，二要提高效果': 1}
django:::{'django是python下的一款网络服务器框架': 1, 'django是重量级选手中最有代表性的一位': 1, 'django是一个用python语言写的开源web框架，可帮助开发人员在构想形成后仅数小时内启动web应用程序': 1, '一些高流量网站使用django是因为它能够快速、灵活地进行调整，从而可满足流量波动高峰期的需求': 1, '这样测试下来，可证明web客户端通过uwsgi到django是通畅的：': 1}
elk:::{'一、elk是什么鬼': 1, '以上检查elk进程号与端口匹配入主节点在哪个位置，还有elk是否正常': 1, '1、elk是什么': 1, 'elk是elastic公司提供的一套完整的日志收集以及展示的解决方案，是三个产品的首字母缩写，分别是elasticsearch、logstash和kibana': 3, '传统意义上，elk是作为替代splunk的一个开源解决方案': 4, '截图安装的elk是5.3.1版本的，按照文档搭建6.2.4版本的也能成功': 1, 'elk是elasticsearch、logstash、kibana的简称，这三者是核心套件，但并非全部': 1, '最重要一点，elk是免费的，splunk则需要昂贵的费用': 1, 'elk是三个开源软件的缩写，分别表示：elasticsearch,logstash,kibana,它们都是开源软件': 4, 'elk是elasticserach、logstash、kibana三款产品名称的首字母集合，用于日志的搜集和搜索，今天我们一起搭建和体验基于elk的日志服务；': 1}
feignserver:::{}
npm:::{'一、npm是什么': 1, '只有社区里的人都觉得「npm是个宝」的时候，johnresig才会考虑使用npm': 10, '那么npm是怎么火的呢': 9, '网上的npm教程主要都在讲怎么安装、配置和使用npm，却很少告诉新人「npm是干什么的': 1, '文章出处npm是干什么的之前只是有个概念知道什么叫npm的人适合看这个文章': 1, 'npm是随同nodejs一起安装的包管理工具，能解决nodejs代码部署上的很多问题，node.js框架的最强大功能之一是能够轻松地使用node包管理器（nodepackagemanager，npm）用额外的node封装模块（npm）将其扩展': 1, 'npm是基于包管理的，所以开发者也能够找到很多用于服务器端的模块': 1, '到底npm是什么呢': 1, '从cnpm的架构图中，我们可以看出cnpm是对npm做的镜像服务，cnpm会定期同步npm的资源库，同时cnpm支持发布私有的库，这样就非常方便地集成了公有库和私有库，对于公司内部的开发者来说，基本感觉不到两种库的区别': 1, 'npm是随同nodejs一起安装的包管理工具，能解决nodejs代码部署上的很多问题，常见的使用场景有以下几种：': 1, '2、npm相关文档网上的npm教程主要都在讲怎么安装、配置和使用npm，却很少告诉新人「npm是干什么的': 1}
worker:::{'serviceworkers本质上充当web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理.serviceworker是一个注册在指定源和路径下的事件驱动worker': 1, 'cloudflare的worker是什么': 1, 'worker是celery的核心的执行模型，对其进行比较全面的理解，对于更加有信心地使用celery会有很大的好处': 1, 'serviceworker是一种webworker': 1, 'serviceworker是带有一个cacheapi，使得以后可以方便的存储响应以便重用': 1, '所以才有了gatewayworker框架，gatewayworker是基于workerman开发的一个tcp长连接框架，实现了单发、群送、广播等长连接必用的接口': 1, '可以说gatewayworker是基于workerman实现的一个更完善的专门用于实现tcp长连接的项目框架': 2, '而serviceworker是走的另外的线程，可以理解为在浏览器背后默默运行的一个线程，脱离浏览器窗体，因此，window以及dom都是不能访问的，此时我们可以使用self访问全局上下文': 1, 'webworker可以为javascript创建多线程，且webworker是运行在后台的javascript，独立于其他脚本，不会影响页面的性能': 1, '主线程可以监听worker是否发生错误': 1, '所以才有了gatewayworker框架，gatewayworker是基于workerman开发的一个tcp长连接框架，实现了单发、群送、广播等长连接必用的接口，并且内置了mysql类库': 1, 'serviceworker：一个serviceworker是一段运行在浏览器后台进程里的脚本，他独立于当前页面，提供了那些不需要与web页面交互的功能在网页背后悄悄执行的能力': 1, 'gatewayworker是workerman的框架，里面封装了很多好用的方法，比直接使用workerman要方便的多': 1, 'web-worker是构建于nodejs的worker_threads之上的，本文将会详细讲解worker_threads和web-worker的使用': 1}
presto:::{'上面讲述了presto是什么，查询速度，现在来看看presto适合干什么': 3, '不适合：多个大表的join操作，因为presto是基于内存的，多张大表在内存里可能放不下': 3, 'presto是一个交互式查询引擎，可以在很短的时间内返回查询结果，秒级，分钟级，能访问很多数据源': 3, '但是presto是取代不了hive的，因为p全部的数据都是在内存中，限制了在内存中的数据集大小，比如多个大表的join，这些大表是不能完全放进内存的，实际应用中，对于在presto的查询是有一定规定条件的，比比如说一个查询在presto查询超过30分钟，那就kill掉吧，说明不适合在presto上使用，主要原因是，查询过大的话，会占用整个集群的资源，这会导致你后续的查询是没有资源进行查询的，这跟presto的设计理念是冲突的，就像是你进行一个查询，但是要等个5分钟才有资源继续查询，这是很不合理的，交互式就变得弱了很多': 3, 'presto：presto是在它内部做hive类似的逻辑': 3, '最后，presto是通过connectorplugin获取数据和元信息的，它不是⼀个数据存储引擎，不需要有数据，presto为其他数据存储系统提供了sql能⼒，客户端协议是http+json': 3, 'presto是一个分布式sql查询引擎，它被设计为用来专门进行高速、实时的数据分析': 1, '既然presto是一个交互式的查询引擎，我们最关心的就是presto实现低延时查询的原理，我认为主要是下面几个关键点，当然还有一些传统的sql优化原理，这里不介绍了': 1, 'presto是一个开源的分布式sql查询引擎，适用于交互式分析查询，数据量支持gb到pb字节': 2, 'presto是完全基于内存的并行计算以及分布式sql交互式查询引擎': 2, 'presto是一个运行在多台服务器上的分布式系统': 3, 'facebookpresto是什么，继facebook创建了hive神器后的又一以sql语言作为接口的分布式实时查询引擎，可以对pb级的数据进行快速的交互式查询': 1, 'presto是当下比较流行的即席查询引擎，相比另一个相似的引擎impala，presto是java开发的，拥有更好的社区资源(毕竟做大数据的都喜欢用java)': 1, 'presto是专为大数据实时查询计算而设计开发的产品，拥有如下特点：': 1, 'presto是一个分布式sql查询引擎，用于查询分布在一个或多个不同数据源中的大数据集': 1, 'presto是一个开源的分布式的查询引擎，基于内存，它本身不接入数据，可以连接多种数据源，例如hive,mysql,kafka,mongedb等，一条presto查询可以将多个数据源进行合并查询': 1, 'presto是基于内存计算，减少了磁盘io，': 1, '举个例子，hiveconnector映射每个hive数据库到schema，因此hiveconnector挂载在hivecatelog（所以可以把catelog理解为目录，挂载），而且hive包含tableclicks在数据库web，所以这个table在presto是hive.web.clicks': 1}
mosquitto:::{'eclipsemosquitto是一个开源消息代理，实现了mqtt协议版本3.1和3.1.1': 1, '2.mosquitto是一款实现了mqttv3.1协议的开源消息代理软件，提供轻量级的，支持发布/订阅的的消息推送模式，使设备对设备之间的短消息通信简单易用': 1, 'mosquitto是一款实现了mqttv3.1协议的开源消息代理软件，包括了服务器端和客户端，可以跨平台部署，提供轻量级的，支持发布/订阅的的消息推送模式，使设备对设备之间的短消息通信简单易用': 1, '查看mosquitto服务是否开启': 1, '一、概念梳理1、mosquitto是一款实现了消息推送协议mqtt3.1的开源消息代理软件，提供轻量级的、支持可订阅/可发布的消息推送模式，是设备与设备之间的短消息通信变得简单，广泛应用于低功耗传感器、手机（app消息推送是场景之一）、嵌入式电脑、微型控制器等移动设备': 1}
flow:::{'flow是microsoft试图为您提供通知，警报，数据收集和通信的自动化的一种尝试，它将帮助您减少无聊的时间，但需要进行必要的管理工作，而将更多的时间花费在有趣的(富有成效的)事情上': 1, '如果您希望每次有人回答您创建的调查时都更新sharepoint列表，则flow是更好的选择': 1, 'gitflow是一套基于git的工作流程，这个工作流程围绕着项目发布定义了一个严格的如何建立分支的模型': 1, 'gitflow是基于git的强大分支能力所构建的一套软件开发工作流，最早由vincentdriessen在2010年提出': 1, 'githubflow是一个轻量级，基于分支的工作流，支持团队和项目的定期部署': 1, 'springclouddataflow是springxd升级版，继承了springxd优点的同时提供了基于云技术的原生方式来提供结合流计算和批量计算的混合计算模型': 1, '定义flow是facebook出品的javascript静态类型检查工具': 1, 'springclouddataflow是用于构建数据集成和实时数据处理管道的工具包': 1, 'git是一个工具，flow是一套管理流程': 1, 'gitflow是基于git的源代码管理模型，gitflow是一套使用git进行源代码管理时的一套行为规范和简化部分git操作的工具': 1, '要了解springwebflow是什么东西，最好的办法莫过于查看示例，一个简化的购物车的流程如下图所示：': 1, '同时，springwebflow是不是能够取代其他webmvc技术': 1, '由于flow是由开发人员自己定义的，可根据业务的需求自由改变，flow范围和conversation范围的使用也就突破了javaservlet规范中session范围和request范围的局限，真正做到了自由定制': 1, '另外，在springwebflow中重用webflow是比较容易的': 1}
dashboard:::{'hystrixdashboard是hystrix提供的实时监控系统': 1, 'hystrixdashboard是一个单独的微服务': 1, '由于hystrixdashboard是通过hystrix监控微服务的，所以被监控的微服务需要开启hystrix断路保护器': 1, 'kubernetes-dashboard是k8s官方提供的集群webui，可以查看集群详细的信息，比如集群的api资源，pod日志，工作负载，节点资源利用率等等': 1, '在部署kubernetes-dashboard前需要先安装heapster，heapster用于收集数据，而dashboard是展示数据的界面': 1, 'hystrixdashboard是hystrix的一个组件，提供一个断路器的监控面板，主要用来实时监控hystrix的各项指标': 1}
kubelet:::{'并且发现有时候运行systemctlstatuskubelet发现kubelet服务是正常的，一会再看又失败了的灵异事件': 2, 'virtualkubelet是kuberneteskubelet的一个实现，它伪装成一个kubelet，用于将kubernetes集群连接到其他api': 1, 'newmainkubelet是初始化kubelet的一个方法，主要逻辑为：': 1, 'virtualkubelet是基于社区virtualkubelet开源项目开发的插件，作为一种虚拟的kubelet用来连接kubernetes集群和其他平台的api': 1, 'kubelet是kubernetes工作节点上的一个代理组件，运行在每个节点上': 1, 'kubelet是工作节点上的主要服务，定期从kube-apiserver组件接收新的或修改的pod规范，并确保pod及其容器在期望规范下运行': 1, 'kubelet是运行在每个节点上的主要的“节点代理”，每个节点都会启动kubelet进程，用来处理master节点下发到本节点的任务，按照podspec描述来管理pod和其中的容器（podspec是用来描述一个pod的yaml或者json对象）': 1, '10248/healthz–kubelet健康检查,通过访问该url可以判断kubelet是否正常work,通过kubelet的启动参数–healthz-port–healthz-bind-address来指定监听的地址和端口．默认值定义在pkg/kubelet/apis/kubeletconfig/v1alpha1/defaults.go': 1}
graphql:::{'本文将从graphql是什么，为什么要使用graphql，使用graphql创建简单例子，以及graphql实战，四个方面对graphql进行阐述': 1, '关于graphql是什么，网上一搜一大堆': 1, 'graphql是一个新的令人兴奋的api，用于临时查询和操作': 1, 'graphql是一项令人兴奋的新api技术，与restapi相比，它具有许多优点': 1, '简单的说，graphql是一种描述请求数据方法的语法，通常用于客户端从服务端加载数据': 2, 'graphql是由facebook开发的，用于解决他们巨大、老旧的架构的数据请求问题': 2, 'graphql是facebook做的，但是我不信任facebook': 1, 'learngraphql是由kadira员工共同制作的课程': 2, '所以不管你最后会不会用上它，我相信多了解了解graphql是值得的': 2, 'graphql是当今软件技术中最大的流行语之一': 1, 'graphql是查询语言语法，与编程语言无关的执行引擎以及不断发展的规范': 1, 'graphql是开源api领域中一个令人兴奋的，相对较新的参与者': 1, 'graphql是一种新的api标准，它提供了一种比rest更有效、更强大和更灵活的替代方案': 2, '它是数据库无关的，而且可以在使用api的任何环境中有效使用，我们可以理解为graphql是基于api之上的一层封装，目的是为了更好，更灵活的适用于业务的需求变化': 2, '我用动图来分别演示下rest和graphql是怎么样的一个过程': 2, '再来看graphql是怎么做的：': 2, 'graphql是一种类json的语言，有自己的一套语法来请求获得客户端指定的数据或者进行增删改操作，而服务器端则根据客户端的请求封装数据，以json格式返回给前端': 1, '正如我以前所写，graphql是一种下一代api技术，它正在改变客户端应用程序与后端系统的通信方式以及后端系统的设计方式': 1, '在测试中我发现了很多网站开始使用graphql技术，并且在测试中发现了其使用过程中存在的问题，那么，到底graphql是什么呢': 1, '在测试中，我们最常见的graphql的数据包就像图中一样：和json类似的格式，但其中包含了很多换行符\\n，当你遇到这种结构的请求时，请多留心测试一下graphql是否安全': 1, 'graphql是一个用于api的查询语言，使用基于类型系统来执行查询的服务（类型系统由你的数据定义）': 1, '与rest相比，graphql是这个领域的新生事物，但是我认为它的改进是如此之大，以至于我正在开发新的api来使用它': 1, '这篇文章中，首先会简单介绍graphql是什么，它能够解决的问题；在这之后，我们会重点分析graphql在微服务架构中的使用以及在实践过程中遇到的棘手问题，在最后作者将给出心中合理的graphql微服务架构的设计，希望能为同样在微服务架构中使用graphql的工程师提供一定的帮助，至于给出的建议是否能够满足读者在特定业务场景下的需求就需要读者自行判断了': 1, 'graphql和falcor是对rest的json的进化发展，graphql是一种嵌套的有层次的json，如果说json代表一个对象，那么graphql代表的是父对象和子对象的这样有主次层次关系的聚合对象，如果你知道ddd，那么，后端的一个聚合根可以使用一个graphql来传递，一次性将一个聚合根打包后在前后端一次全部传输完毕，这样比分解成一个个json显然节省网络开销': 1, '官方的解释是graphql是一种用于api的查询语言': 1, '一般情况下，rest是一个api对应一个uri.而graphql是可以所有的api共用一个url，甚至客户端可以根据业务自己组合一个业务上的api': 1, '前边说了graphql是一套规范，是一个查询语言，自然就有它的使用规范和操作语法需要学习了': 1, 'graphql是2012年产生，与2015年开源的一套规范，相应的各个语言都有第三方实现的一套简单的框架': 1, '也有人认为，graphql只适合一些个新业务的小项目去练手，或者老系统中在rest的基础上再维护一套graphql，认为graphql是上不了台面或扛不起任务的一个技术，笔者认为这个观念有点悲观，一个新技术的流行，是需要全方位的配合，一整套系统中，需要前端，后端，还需要各个产品线的配合，如果只是一个点的试验，确实推行的阻力会很大': 1, '简而言之，graphql是描述如何请求数据的语法，通常用于将数据从服务器加载到客户端': 1, '那么graphql是如何开始的呢': 1, '同样，graphql是一个规范，这意味着您可以使用graphql实现，而无需运行facebook编写的一行代码': 1, 'learngraphql是一个互动的过程中通过在人放在一起kadira': 1, 'graphql是用于通过internet提取数据的查询语言': 1, '输入graphql：graphql是一种由模式驱动的方法来获取数据': 1, '如前所述，graphql是一种模式驱动的语言': 1, 'graphql是一项新兴技术，可以使客户的生活更轻松，并可改变我们在internet上的处理方式': 1, 'graphql是一个开源的查询语言和协议api，为了解决rest存在的短板，ibm、github、facebook等公司从rest转移到了graphql上': 1, '简单来说，graphql是一个开源的查询语言和协议api': 1, 'graphql是api开发领域向前迈进的重要一步': 1, 'graphql是基于图来创建的，而rest是基于文件而创建的': 1, '7综述我们不能说graphql是要完全取代rest，因为前者只是一个工具，而rest是一种架构模式': 1}
koa:::{'koa是一个基于node实现的web框架，koa通过封装原声的nodehttp模块，koa的context把node的request和response对象封装到单个对象中，并暴露给中间件等调用函数': 1, '第一个koa是基于nodejs的服务器框架，': 1, '之前就听说过koa是一个优雅的后台框架，小而美，今天读了读相关介绍，搭了个最简单的服务器，有点体会到为什么形容一个框架“优雅”、“美”': 1, 'koa是一个相对于express来说，更小，更健壮，更富表现力的web框架': 1}
keycloak:::{'keycloak是符合uma2.0标准的授权服务器，可提供大多数uma功能': 1, 'keycloak是是一个开源软件，源码地址是：https://github.com/keycloak/keycloak/': 1, 'keycloak是一个针对现代应用程序和服务的开源身份和访问管理解决方案': 1, 'keycloak是一个致力于解决应用和服务身份验证与访问管理的开源工具': 1, '如果没有与你的平台相适应的适配器，别担心，keycloak是建立在标准的协议之上，你可以使用任何openidconnectresourcelibrary或saml2.0serviceproviderlibrary来实现': 1, 'keycloak是基于标准协议开发的，支持openidconnect,oauth2.0和saml': 1, 'keycloak是jboss开源的，jboss是做服务器的，所以，对于服务器，它比谁都玩得熟，keycloak的强大之处也在于，它对于客户端应用的管控，直接可以到服务器层面（相当于给服务器装一个插件，然后进入这个服务器的请求，都会被拦截和认证）': 1, '由于keycloak是基于filter拦截器的，所以如果项目本身已经用了filter来作为登录控制的话，则需要进行改造，java项目常见情况如下：': 1, 'keycloak是一个开源的，面向现代应用程序和服务的身份认证和访问控制解决方案': 1, 'keycloak是基于标准协议的，支持openidconnect,oauth2.0,andsaml': 1, '独立运行keycloak是十分简单的，需要两个前提条件': 1, 'keycloak是一个开源的进行身份认证和访问控制的软件': 1, 'keycloak是一种面向现代应用程序和服务的开源的iam(身份识别与访问管理)解决方案': 1}
alexa:::{'alexaskillskit可以开发skills,alexa是亚马逊的语音服务，也是亚马逊echo，echodot和echoshow等数千万设备背后的大脑': 1, 'alexa是amazon自家的语音助手服务': 1, 'alexa是亚马逊声音识别服务，是在亚马逊的echo、echodot以及echoshow智能音箱背后的大脑': 1, 'alexa是什么alexa是以发布世界网站排名而引人注目的一个网站，url地址为http://www.alexa.com/': 1, '可以说，alexa是当前拥有url数量最庞大，排名信息发布最详尽的网站': 1, 'alexa是互联网一个重要的免费提供网站流量信息的公司，是一个专门发布网站世界排名的网站': 1, '如果你希望你的产品具有丰富和直观的用户体验，集成alexa是一个正确的选择': 1}
iam:::{'iam是一套全面的建立和维护数字身份，并提供有效地、安全地it资源访问的业务流程和管理手段，从而实现组织信息资产统一的身份认证、授权和身份数据集中管理与审计': 2, '通俗地讲：iam是让合适的自然人在恰当的时间通过统一的方式访问授权的信息资产，提供集中式的数字身份管理、认证、授权、审计的模式和平台': 2, '首先，让我们谈谈iam是什么': 1, 'iam是aws的身份认证管理服务，它为亚马逊服务的安全性提供了保证': 1, '应用层：iam是一个开放的基础性分布式平台网络，为链上用户提供了丰富的应用服务': 1, 'iam.token在未来发展中可能会呈现如下效应：(1)iam是一个以信用为基础的去中心化网络，随着iam生态中dapp越来越多，需要更多的iam.token进行流通，将会使得iam.token变得稀缺': 1, '通过下图可以看出，iam是如何对这资源进行访问控制的': 1, 'iam是identityandaccessmanagement的缩写，即身份认证和访问管理': 1}
phoenix:::{'phoenix是一个开源的hbasesql层': 1, 'phoenix是一个hadoop上的oltp和业务数据分析引擎，为用户提供操作hbase的sql接口，结合了具有完整acid事务功能的标准sql和jdbcapi，以及来自nosql的后期绑定，具有读取模式灵活的优点': 2, 'phoenix是通过命令行的方式进行查询（既可以输入单条sql语句，也可以执行sql文件）；也可以通过界面进行查询，但需额外安装squirrel': 2, '在建立映射表之前要说明的是，phoenix是大小写敏感的，并且所有命令都是大写，如果你建的表名没有用双引号括起来，那么无论你输入的是大写还是小写，建立出来的表名都是大写的，如果你需要建立出同时包含大写和小写的表名和字段名，请把表名或者字段名用双引号括起来': 3, 'phoenix是hbase的开源sql皮肤': 1, '注意：若在hbase中创建的表，在phoenix是没有（没有映射），我们可以在squirrelsqlclient工具编写作映射': 1, 'phoenix是构建在hbase上的一个sql层，能让我们用标准的jdbcapis而不是hbase客户端apis来创建表，插入数据和对hbase数据进行查询': 2, 'phoenix是由saleforce.com开源的一个项目，后又捐给了apache基金会': 3, 'phoenix是一个hbase的开源sql引擎': 3, 'phoenix是构建在hbase之上的sql引擎': 1, '你也许会存在“phoenix是否会降低hbase的效率': 2, 'phoenix是构建在hbase之上的关系型数据库层，作为内嵌的客户端jdbc驱动用以对hbase中的数据进行低延迟访问': 1, '在hbase中更新数据，phoenix是不会更新的': 1, '2.phoenix性能\u3000phoenix是构建在hbase之上的sql引擎': 1, 'apachephoenix是apachehbase上一个高效的sql引擎，也挺火的': 1, '3.apachephoenix是什么': 1, '首先phoenix是hbase之上的sql工具，至于hbase是什么，我就不介绍了，你若不懂，就不需要往下继续看了': 1, '因为phoenix是直接调用的hbase的api，coprocessors和自定义的filters，所以对于大量小查询可以实现毫秒级返回，千万级别的数据实现秒级返回': 1}
discovery:::{'go-discovery是bilibili开源的服务注册与发现中心，参考eureka设计': 1, 'nepxiondiscovery是一款对springcloud的服务注册发现的增强中间件，其功能包括多版本灰度发布，黑/白名单的ip地址过滤，限制注册等，支持eureka、consul和zookeeper，springcloud微服务可以方便引入该插件，并且代码零侵入，引入注意事项如下：': 1}
sdn:::{'过去30年里，ip网络一直是全分布式的，战功卓著，解决了各种客户需求，今天sdn是为了未来更好更快的实现用户需求': 3, 'sdn是对传统网络架构的一次重构，由原来分布式控制的网络架构重构为集中控制的网络架构': 3, '五．sdn网络架构sdn是对传统网络架构的一次重构，由原来分布式控制的网络架构重构为集中控制的网络架构': 1, 'sdn是一种简化网络的方法和体系架构，使得网络对其工作负载和服务的要求更具有反应性，从中也可以窥探出未来网络的发展趋向：走向智能化': 1, '从上文来看，sdn是如何贯彻soa的': 1, '也就是说，sdn是一种面向服务的体系结构(soa)，这是它通过可编程性来实现的': 1, '那么，sdn是什么': 1, '可以说sdn是一个浪潮，席卷了整个的it行业': 1, 'sdn是一种新型的网络架构，它的设计理念是将网络的控制平面与数据转发平面进行分离，从而通过集中的控制器中的软件平台去实现可编程化控制底层硬件，实现对网络资源灵活的按需调配': 2, '文章转自：《sdn是什么': 1, '过去30年里，ip网络一直是全分布式的，今天sdn是为了未来更好更快的实现用户需求，并不是有什么需求通过传统方法不能做到，知识sdn做的更快、更好、更简单': 1, 'sdn是一种新兴的控制与转发分离并直接可编程的网络架构': 1, '好啦，相信大家已经知道sdn是什么意思啦': 1, '而sdn是把每天设备的控制面从设备里面剥离出来，放到一个统一的外部服务器，由这个服务器通过统一的指令来集中管理转发路径上的所有设备，这个集中控制器知道所有必需的信息，而且这个控制器可以提供开放的api被上层应用程序通过编程控制，这样就可以消除大量手动配置的过程，添加管理员对全网的整体视图，提高业务部署的效率': 1, 'a：sdn是开源产品，所以是开发、厂商无关（vendor-neutral）软件': 1, 'sdn是为网络管理员提供控制接口的软件，管理员可以通过控制接口配置、管理和中断网络，而不需要物理地设置网络交换机和设备': 1, 'sdn是一种新型网络创新架构，通过将网络设备控制面与数据面分离开来，从而实现了网络流量的灵活控制，让网络成为一种可灵活调配的资源': 2, 'sdn是一个术语，描述的是在网络基础设施内部提供可编程接口来实现网络服务配置的高度自动化': 1, 'onrc对sdn的定义是：“sdn是一种逻辑集中控制的新网络架构，其关键属性包括：数据平面和控制平面分离；控制平面和数据平面之间有统一的开放接口openflow': 1, 'onf认为：“sdn是一种支持动态、弹性管理的新型网络体系结构，是实现高带宽、动态网络的理想架构': 1, '很多人都在谈sdn，但是难道每个人都真正知道sdn是什么吗?在最近的networkingfieldday活动中，有几个论坛集中讨论了几个话题，其中第一个话题是“什么是sdn?”每个人都对sdn是由什么构成的有很多不同的意见': 1, '虽然sdn是自动化的一个组成部分，但我不认为自动化的本质就是sdn': 1}
corda:::{'corda是一套分布式账本系统，用来记录、管理和同步传统金融机构间的「金融合约」': 1, 'corda是我们和银行联盟成员们一起，反复研究需求，不断迭代原型的技术成果，待它再渐进成熟一点，我们会开放源代码': 1, 'r3-corda是一个基于许可准入的信息共享区块链网络': 1, 'consensusispluggableusingnotarypoolscorda是一个基于见证人池的可插拔式共识机制': 1, 'corda是一个独特的区块链平台，它允许在法律上可识别的交易对手之间进行私人交易，以易于使用的方式保持传统区块链的优势': 1, '因为corda是被设计用来：': 1, '关于corda是什么，我们有三句话：首先，corda是一个分布式账本；第二，corda是一个去中心化数据库；第三，corda是一个“受区块链启发的”技术平台': 1, 'corda是一个分布式账本，这句话很好理解，一笔交易多处记载、同步维护么': 1, 'corda是一个去中心化的数据库，这点我们需要强调': 1, '按照r3内部人士的话说，corda是一个“受区块链启发的（blockchain-inspired）”平台': 1, '由于corda是面向银行间或银行与其商业用户之间的互操作场景的平台，其对股票、债券等市场的运行控制没有特别的考虑，在这方面可借鉴的内容不多': 1, '不可否认的是，corda是所有的分布式账本平台里“长得最像银行的”': 1, '所以，corda是在为一个最难搞定的联盟形态提供技术平台，这是一条最艰难的道路': 1, 'r3corda是一个基于半信任环境的、服务于现实世界金融活动的分布式账本，同时满足信息适度可见和高性能两个核心特性': 1, '可是corda是怎么处理的呢': 1}
jupyter:::{'如何jupyter启动问题在终端输入：jupyter-notebook后，在使用过程中出现下图：此时jupyter是不能用的，我们可以在终端输入piplist看见pywin32是225版本的，我们可以改为223版本，如图：然后再重新启动jupyter-notebook即可': 1, '如果你的jupyter服务是搭建在主机上，并且平时和业务人员想用notebook地址的方式交付，jupyterdashboard插件是一个不错的选择': 1, '这里请做个区别：ipython是负责和python交互的部分，jupyter是作为服务的部分': 1}
hangfire:::{'开源opensourcehangfire是开源软件，完全免费用于商业用途，它是根据lgplv3许可证授权的': 1, '是这样的，hangfire官网有一句话：bydefault,hangfireserverinstanceinawebapplicationwillnotbestarteduntilthefirstuserhitsyoursite.也就是说，默认情况下，无人访问时，即便网站正在运行未回收，hangfire是不会启动的（startup）': 1, 'hangfire是一个开源的.net任务调度框架，目前1.6+版本已支持.netcore': 2, 'hangfire是一个综合性的后台作业管理工具': 1, 'hangfire是一个开源框架（.net任务调度框架），可以帮助您创建，处理和管理您的后台作业，处理你不希望放入请求处理管道的操作：': 1, 'hangfire是一个后台可监控的应用，不用每次都要从服务器拉取日志查看，在没有elk的时候相当不方便': 1, 'hangfire是一款开源的，可扩展的，不需要基于windows服务及windows调度任务的，易于上手的，且自带dashboard的分布式后台作业调度框架，本系列文章将基于hangfire[1.7.10]源码揭秘hangfire的实现机制': 1, 'hangfire是一个开源框架（.net任务调度框架），可以帮助您创建，处理和管理您的后台作业，处理你不希望放入请求处理管道的操作': 1}
gcp:::{}
grpc:::{'grpc是一个高性能、开源和通用的rpc框架，支持多语言': 1, '在很多rpc(remoteprocedurecallprotocol)系统里，grpc是基于定义一个服务，指定一个可以远程调用的带有参数和返回类型的的方法': 1, 'grpc是google开源的高性能跨语言的rpc方案': 2, 'grpc是否会成为更多地方，更大领域的rpc标准': 2, 'grpc是一个高性能、开源和通用的rpc框架，面向移动和http/2设计': 1, 'grpc是由google开发的一个远程过程调用系统，目前是开源状态': 1, 'grpc是基于http/2协议的，nginx在1.9.5里开始支持http/2，在1.13.10里开始支持grpc': 1, '一、什么是grpcgrpc是一个高性能、通用的开源rpc框架，其由google主要面向移动应用开发并基于http/2协议标准而设计，基于protobuf(protocolbuffers)序列化协议开发，且支持众多开发语言': 1, 'grpc是google开发的高性能、通用的开源rpc框架，其由google主要面向移动应用开发并基于http/2协议标准而设计，基于protobuf(protocolbuffers)序列化协议开发，且支持众多开发语言': 1}
apollo:::{'activemqapollo是一个更快，更可靠，更容易维护从原来的activemq的基础建立的消息代理': 1, '像activemq一样，apollo是一个多协议代理，支持stomp，amqp，mqtt，openwire，ssl和websockets': 1, 'apollo是apache一个开源消息服务器，支持mqtt、websocket协议，之前毕设需要，是在windows下搭建的，相关可参考csdn、百度经验': 1, 'mybroker是broker实例名称，d:\\devtools\\apache-apollo-1.7.1-windows-distro\\myapollo是broker实例存放的目录': 1, '首先我们要了解apollo是做什么的：很简单就是把我们以前写在项目里的properties数据放到一个远程项目里面让我们远程获取': 1, 'apollo是apache的一个开源mqtt代理服务器，地址如下': 1}
ros:::{'下面通过rosmsgshow命令，检查ros是否能够识消息，基本用法：': 1, '下面通过rosmsgshow命令，检查ros是否能够识该服务，基本用法：': 1, 'ros是一个适用于机器人的开源的元操作系统': 1, 'ros是建立在linux特别是ubuntu系统上的一套软件系统，它具有操作系统的特征，负责管理各个模块的协同运行': 1, 'ros是一个分布式的进程（也就是节点）框架，这些进程被封装在易于被分享和发布的程序包和功能包集中': 1, 'ros是robotoperatingsystem的缩写，原本是斯坦福大学的一个机器人项目，后来由willowgarage公司发展，目前由osrf（opensourceroboticsfoundation,inc）公司维护的开源项目': 1}
dialogflow:::{'现在你已经知道dialogflow是什么，并且对于如何操作有很好的观念了，现在是时候移动到另一端，开始编写swift程式码': 1, '据悉，dialogflow是一个会话人工智能引擎，用于创建虚拟代理，可以理解和响应呼叫者的各种查询，并使用语音和文本作为媒介': 1}
eureka:::{'通常eureka是设置了密码的，那么我们直接请求是不行的，需要带上认证信息': 1, 'springcloudeureka是springcloudnetflix微服务套件中的一部分，它基于netflixeureka做了二次封装': 1, 'springcloudeureka是springcloudnetflix组件之一，是基于netflixeureka实现的': 1, 'eureka是netflix开发的服务发现框架，本身是一个基于rest的服务，主要用于定位运行在aws域中的中间层服务，以达到负载均衡和中间层服务故障': 1, 'eureka是netflix开发的服务发现框架，本身是一个基于rest的服务，主要用于定位运行在aws域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的': 1, '在如今的的服务注册与发现的框架中，springcloud提供了一套相对完整的技术组件，其中包括服务发现与注册eureka,eureka是netflix出品的用于实现服务注册和发现的工具': 1, '在cap原则中，相对于zookeeper满足ap(可用性和分区容错性)来说，eureka是满足cp(一致性和分区容错性)的': 1}
gke:::{"鉴于kubernetes'谷歌血统，并在azure上kubernetes服务或亚马逊eksgke的三年先声夺人，它不是完全不足为奇了gke是领先于其他主要管理kubernetes产品in为kubernetes支持方面的特点": 2}
tiller:::{'在helm2中tiller是helm的一个重要组成部分': 1, 'helmtiller是helm的server，用来管理release': 1, '2、为tiller赋rbac权限helm的服务端tiller是运行在pod中的，那么该pod要与apiserver通信的权限就需要apiserver授权，而pod与api通信是采用的serviceaccount机制，所以api需要通过rbac为tiller所在的pod中绑定的serviceaccount授予访问权限': 1, 'tiller是helm的服务端': 1, 'tiller是以deployment方式部署在kubernetes集群中的，只需使用以下指令便可简单的完成安装': 1, 'tiller是helm的服务端，部署在kubernetes集群中，tiller用于接受helm的请求，并根据chart生成kubernetes的部署文件，然后提交给kubernetes创建应用': 1}
portal:::{'portal是指一个门户网站例如sina就采用了portal技术他是.net的一个开源的网站模版': 1, 'portal是一个基于web的应用程序，它主要提供个性化、单点登录、不同来源的内容整合以及存放信息系统的表示层': 2, '在portlet规范里是这样讲的：“portal是一种web应用，通常用来提供个性化、单次登录、聚集各个信息源的内容，并作为信息系统表现层的宿主': 1, 'websphereportal是一个框架——包括运行时服务器、服务、工具和许多其他特性——您可以使用这些特性将企业集成到单个称为门户的可自定义界面中': 1, 'websphereportal是ibmworkplace的核心组成部分': 1, 'portal是指一个门户网站例如sina就采用了portal技术他是.net的一个开源的网站模版什么是portal': 1}
traefik:::{'traefik是一个前端负载均衡器，对于微服务架构尤其是kubernetes等编排工具具有良好的支持；同nginx等相比，traefik能够自动感知后端容器变化，从而实现自动服务发现': 1, 'traefik是一款开源的反向代理与负载均衡工具': 3, 'traefik是一个前端负载均衡器，对于微服务架构尤其是kubernetes等编排工具具有良好的支持；同nginx等相比，traefik能够自动感知后端容器变化，从而实现自动服务发现；今天小试了一下，在此记录一下使用过程': 1}
ui:::{'\u200belement-ui是目前针对于vue开发pc端项目的时候所使用到的一个主流ui库': 1, '1.element-ui是现在基于vue的一个非常好用的桌面端ui组件库2.支持@vue/cli项目的直接添加，支持按需导入、国际化、支持自定义主题3.文档清晰，学习成本低4.提供的组件足够使用5.ui的风格符合目前大众的普遍审美6.如果你想要做一个公司级别的产品，那么element-ui基本可以满足需求，但是难免样式、风格上会同质化严重': 1, '\u200blayui是自由职业者（贤心）进行开发的一个前端库，最低可以兼容到ie8，官网介绍它是一个更加适合服务端工程师来开发前端页面的库，但是对于前端工程师来说，如果你的项目要兼容到ie8的话，那么使用layui也是一个很好的选择': 1, '1.layui是自由职业者（贤心）进行开发的一个前端库，最低可以兼容到ie82.设置的初衷是让非前端的工程师可以很方便的开发前端页面3.使用简单，文档清晰，学习成本低4.提供页面元素和模块化的概念5.ui的风格并不过时6.适合非专业前端工程师使用': 1, '\u200bvant-ui是有赞前端团队开发的一个基于vue的移动端组件库': 1, '1.vant-ui是有赞前端团队所设计的一个ui库，一般用于基于vue的移动端项目2.支持@vue/cli项目的直接添加，支持按需导入、国际化、提供了定制功能（样式、颜色、主题等等）3.文档清晰，学习成本低4.提供的组件足够使用，性能不错，并且提供了基于商城业务的成套组件5.ui的风格以及交互操作可以达到现在的主流标准6.适用于webapp或者基于移动端的网页开发': 1, '\u200bweui是微信官方团队开发的一套同微信原生视觉体验一致的基础样式库': 1, '1.weui是微信官方团队开发的一套同微信原生视觉体验一致的基础样式库': 1, 'swaggerui是我们小组在做课程作业，前后端交互需要api文档时，我无意间发现的一个工具': 1, 'elementui一套为开发者、设计师和产品经理准备的基于vue2.0的桌面端组件库支持现代浏览器和ie10+.suisui是一套基于bootstrap开发的前端组件库，同时她也是一套设计规范': 1, 'weuiweui是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一': 1, 'jqueryweuijqueryweui是专为微信公众账号开发而设计的一个简洁而强大的ui库，包含全部weui官方的css组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间': 1, 'frozenuifrozenui是一套基于移动端的ui库': 1, 'ng-zrrorantdesign的angular实现，开发和服务于企业级后台产品现代浏览器和ie9及以上（需要polyfills）支持angular^6.0.0版本easyuieasyui是一种基于jquery的用户界面插件集合一个完美支持html5网页的完整框架javaserverfaces(jsf)用于构建javaweb应用程序的标准框架，提供了一种以组件为中心来开发javaweb用户界面的方法，从而简化了开发': 1, 'jqueryui是在jqueryjavascript库之上构建的一组精选的用户界面交互，效果，小部件和主题': 1, 'easyui是一种基于jquery、angular.、vue和react的用户界面插件集合': 1, 'at-ui是一个模块化的前端ui框架，开发基于vue.js的快速和强大的web界面': 1, 'material-ui是基于react的ui框架，更快速、更简便的web开发': 1, 'fineui是一组基于extjs的专业asp.net控件库，拥有原生的ajax支持和华丽的ui效果': 1, '虽然fineui是基于extjs组件的，但是不需要你事先了解extjs的知识，因为fineui是完全按照asp.net的命名习惯和开发框架完成的，你经常会发现很多控件的命名、属性、方法、事件和原生的asp.net控件一模一样': 1, 'fineui是一组基于extjs的asp.net控件库，也是本系列文章的主角': 1, '这篇文章阐述了fineui是如何选择开源协议的': 1, 'fineui是真正意义上的开源程序，是最好用的开源控件库': 1, '在开发环境开启swaggerui，生产环境关闭swaggerui是因为开发环境是内部人员，生产环境是客户': 1, 'swiftui是苹果大家族中用来构造app的全新方法': 1, 'swiftui是一个声明式的基于组件的框架': 1, 'weui是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一': 1, 'frozenui是一套基于移动端的ui库': 1, 'easyui是一种基于jquery的用户界面插件集合': 2, 'easyui是个完美支持html5网页的完整框架': 2, '资源：http://www.jeasyui.net/，easyui是国人的的作品，但服务器在国外，官网也是英文的，这个网站类似官网的中文版': 2, 'ligerui是基于jquery的ui框架，其核心设计目标是快速开发、使用简单、功能强大、轻量级、易扩展': 2, 'unity3d的ugui如果用得不好，非常的影响性能，可能很多人都不知道，其实ugui是基于网格模型渲染的，一个ugui组件就是一个mesh，ui组件的material为空，其实他是用了默认的material，我们在运行游戏的时候canvas回把所有ui的mesh合并成一个大的sharemesh，用于渲染': 1, 'ui是userinterfacedesign（界面设计）的简称': 1, '介绍：cube-ui是基于vue.js实现的精致移动端组件库': 1, '介绍：weui是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一': 1, '2、suimobilemsui是阿里巴巴共享业务事业部ued团队的作品': 1, '3、frozenuifrozenui是一个开源的简单易用，轻量快捷的移动端ui框架': 1, '6、weuiweui是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一': 1, '12、h-uih-ui是轻量级前端框架，简单免费，兼容性好，适用于中国网站': 1, '19、jqueryweuijqueryweui是专为微信公众账号开发而设计的一个简洁而强大的ui库，包含全部weui官方的css组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间': 1, '在android系统中systemui是以应用的形式运行在android系统当中，即编译systemui模块会生产apk文件，源代码路径在frameworks/base/packages/systemui/，安装路径system/priv-app/-systemui': 1, '在前文1.1章节中可知，systemui是一个普通的apk文件，即是一个普通的app，但是，手机使用者看见的所有systemui的内容都不像是一个app，为什么': 1, '至此，systemui的启动基本完成，从上文可知，systemui是系统中非常核心的应用，在android系统开机过程中server进程直接发起systemui启动，systemui也是固化程序，在保证系统正常运行发挥了非常重要的作用': 1, '从上图中的代码可见，volumeui是以dialog的形式显示ui，volumepanel的实例化过程创建dialog实例和初始化zenmodepanel，到此volumepanel将会待命': 1, '锁屏（keyguard）service在systemui是一个比较特殊的模块，特殊在于systemui启动的service只是一个信息传递者，也就是keyguardviewmediator，并没有做锁屏或解屏的实质操作': 1}
coredns:::{'coredns是一款go语言编写的开源dns服务器': 1, '从kubernetesv1.12开始，coredns是推荐的dns服务器，取代了kube-dns': 2, 'coredns是一个通用的权威dns服务器，可以作为集群dns，符合dns规范': 1, '现在我们来创建一个nginx的pod和service，测试一下coredns是否起作用': 1, '从上述信息中可以看到coredns是重新设定了一下，由于sleep的时间3秒之内，之前的pod的terminating还没有完成，所以上述的kubectlgetall-nkube-system的信息中关于coredns的pod信息有两个': 1, 'coredns是模块化且可插拔的dns服务器，每个插件都为coredns添加了新功能': 1, 'coredns是个很好学习k8s的实验，涉及到整个k8s的大部分功能，有些功能自己也还没有学深入，但是对于理解整个k8s有很好的帮助': 1, 'coredns是一个dns服务器，和caddyserver具有相同的模型：它链接插件': 1, 'coredns是云本土计算基金会启动阶段项目': 1, 'coredns是skydns的继任者': 1}
yarn:::{'yarn是一个资源调度平台，负责为运算程序提供服务器运算资源，相当于一个分布式的操作系统平台，而mapreduce等运算程序则相当于运行于操作系统之上的应用程序': 2, '1、yarn是什么?': 1, 'yarn是从0.23.0版本开始新引入的资源管理系统，直接从mr1(0.20.x、0.21.x、0.22.x)演化而来，其核心思想:': 1, '由于yarn是崭新的经过重新设计的npm客户端，它能让开发人员并行化处理所有必须的操作，并添加了一些其他改进，这使得运行速度得到了显著的提升，整个安装时间也变得更少': 1, '我确信yarn是一个更安全的选择，但是pnpm可能是一些测试用例的更好的选择': 1, 'yarn是一款应用资源管理框架.': 1, '从图上可以看出yarn是由两个部分组成：': 1, '1、yarn是一个集群资源管理系统：拥有一个集群一个的资源管理器和运行在集群中的所有节点上的节点管理器来启动和监控容器': 1, '查看是否有如下进程如果有说明有yarn，yarn是有resourcemanager和nodemanager组成，负责': 1, 'zookeeper和yarn是一起工作的，它们一起管理资源': 1, 'yarn是一个分布式资源调度器组件': 1, 'yarn是hadoopv2.0开始引入的一个组件，这个组件可以说是针对hadoop1.0系统所爆露出的计算资源使用不合理等设计上的问题进行的修正和补充': 1}
airflow:::{'airflow是一个编排、调度和监控workflow的平台，由airbnb开源，现在在apachesoftwarefoundation孵化': 2, 'airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度': 1, 'airflow是一个airbnb的workflow开源项目，使用python编写实现的任务管理、调度、监控工作流平台': 1, 'airflow是基于dag(有向无环图)的任务管理系统，可以简单理解为是高级版的crontab，但是它解决了crontab无法解决的任务依赖问题': 1, 'airflow是一个使用python语言编写的datapipeline调度和监控工作流的平台': 2, 'airflow是通过dag(directedacyclicgraph有向无环图)来管理任务流程的任务调度工具，不需要知道业务数据的具体内容，设置任务的依赖关系即可实现任务调度': 2, 'airflow是一种wms，即：它将任务以及它们的依赖看作代码，按照那些计划规范任务执行，并在实际工作进程之间分发需执行的任务': 1, '通过以上看出airflow是⼀款优秀的调度⼯具，下⽂将以airflow的服务构成、airflow的web界⾯、dag⽰例以及部署运维来介绍这款调度系统': 1, 'airflow是airbnb开源的一个用python编写的调度工具': 1, 'airflow是airbnb开源的datapipeline调度和监控工作流的平台，用于用来创建、监控和调整datapipeline(etl)': 1, 'airflow是apache下孵化项目，是纯python编写的一款非常优雅的开源调度平台': 1, 'airflow是airbnb开源出的一个数据流管理工具，关于使用，可参考官网http://pythonhosted.org/airflow/': 1}
dev:::{'只不过npmrundev是npm包管理工具的命令，yarnstart是yarn包管理工具的命令': 1}
adminservice:::{}
influxdb:::{'单机版influxdb是基于命令的，一直有个黑窗口，现场操作工不小心很容易把它关掉，因此我就把influxdb封装成一个windows服务，隐藏掉黑窗口，并随开机自启动': 1, 'influxdb是一款优秀的时间序列数据库，适合存储设备性能、日志、物联网传感器等带时间戳的数据': 1, 'influxdb是一个由influxdata开发的开源时序型数据': 1, '很多influxdb的文章都说influxdb是时序数据库，不支持删除': 1, 'influxdb是用go语言编写的一个开源分布式时序、事件和指标数据库，无需外部依赖': 1, 'influxdb是一个由influxdata开发的开源时序型数据库，专注于海量时序数据的高性能读、高性能写、高效存储与实时分析等，在db-enginesranking时序型数据库排行榜上排名第一，广泛应用于devops监控、iot监控、实时分析等场景': 2, 'influxdb是专注于时序数据场景（如，devops监控、iot监控、实时分析等）的高性能时序型数据库，支持灵活的自定义保留策略（retentionpolicy）和类sql的操作接口等': 2, 'influxdb是一种时序数据高效读写、压缩存储、实时计算能力为一体的数据库服务，除了具有成本优势的高性能读、高性能写、高存储率，influxdb还具有如下特点：': 2, 'influxdb是一个开源的时序数据库，使用go语言开发，特别适合用于处理和分析资源监控数据这种时序相关数据': 2, 'influxdb是一个用于存储时间序列，事件和指标的开源数据库，由go语言编写而成，无需外部依赖': 1, 'influxdb是一个开源分布式时序、事件和指标数据库': 1, 'influxdb是支持类sql语句的，具体的查询语法都差不多，这里就不再做详细的赘述了': 1, '数据保存策略（retentionpolicies）influxdb是没有提供直接删除数据记录的方法，但是提供数据保存策略，主要用于指定数据保留时间，超过指定时间，就删除这部分数据': 1, 'influxdb是目前比较主流的时序数据库，而时序数据库则是以时间序列为轴的数据库，与关系型数据库相比它有几个特点：': 1, 'influxdb是用go语言编写的一个开源时序型数据库，使用时无需外部依赖，用于存储大量带有时间戳的数据': 1, 'influxdb是没有直接删除数据记录的方法，但是提供了数据保存策略，主要用于指定数据保留时间，超过指定时间，就清理掉过期数据': 1}
jaeger:::{'上面图中分别展示了两条支付的调用链路，一条成功了，一条失败了，你可能会问：jaeger是怎么判断成功失败的呢': 1, 'jaeger是uber推出的一款开源分布式追踪系统，兼容opentracingapi,它用于监视和诊断基于微服务的分布式系统.分布式追踪系统用于记录请求范围内的信息，eg.一次远程方法调用的执行过程和耗时': 1, 'jaeger是uber推出的一款调用链追踪系统，类似于zipkin和dapper，为微服务调用追踪而生': 2, 'jaeger是uber公司研发，后来贡献给cncf的一个分布式链路追踪软件；另外对标jaeger的还有一个软件是zipkin，由谷歌dapper论文启发，twitter开发，现在有专门团队维护，需要注意的是，zipkin比jaeger开发的早，前者在2012启动，jaeger第一个正式版本发布于2017年，不过两者目前在github上的star数量相差不多；': 1, '注意：这个docker镜像封装的jaeger是把数据放在内存中的，仅用于测试，正式使用需指定后端存储': 1, 'jaeger是uber发布的一个开源系统，受到dapper和openzipkin启发，用来监控和排查微服务的分布式系统': 1, 'jaeger是一个比较有名的分布式链路追踪系统，底层用golang实现，兼容opentracing标准，这里利用其go-client来实现一个最简单的demo，仅供参考': 1, 'jaeger是一个优秀的基于opentracing的分布式服务跟踪系统': 1, 'jaeger是uber开发的一套分布式追踪系统，已在uber大规模使用': 1, 'jaeger是uber推出的一款开源分布式追踪系统，兼容opentracingapi': 1}
nameko:::{'nameko是此想法的实现': 1, '社区有大量不是核心项目但你会发现在开发自己的nameko服务是很有用的nameko扩展和补充的库': 2, 'nameko是一个用python语言写的微服务框架，': 1, 'nameko是python的一种微服务框架': 1, '社区有大量不是核心项目但你偶尔会发现在开发自己的nameko服务是很有用的nameko扩展和补充的库': 1, 'nameko是python下的一个微服务框架，小巧简洁，通过rabbitmq消息组件来实现rpc服务': 3, 'nameko是python语言的一个微服务框架，支持通过rabbitmq消息队列传递的rpc调用，也支持http调用': 1, '还是上面的例子，我在hello_service这个服务之后，又启动了三个服务，在rabbitmq的图形化界面里可以看到nameko是如何工作的（理解下面的内容要求读者必须对rabbitmq有一定的了解）': 1, 'nameko是python中的微服务框架，git地https://github.com/nameko/nameko，受欢迎度暂时还不高，官方文档的介绍实现了：': 1, '代码校长，分开展示，这部分是引用部分，需要nameko和swagger，nameko是提供微服务的rpc服务代理，同时需要提供config，内容是messagebroker地址，其实就rabbitmq': 1, '其中nameko是python的微服务框架': 1, 'nameko是python自己的微服务框架，它本身没有java语言下springcloud、dubbo等微服务框架体系来得完整和专业': 1}
oracle:::{'health：数据库名字protocol：是指定的通信协议,oracle是通过tcp/ip通信的host：如果客户端和数据库在同一台电脑可以用localhost也可以用ip': 1, '今天上头问windows下服务中的oracle服务是数据库名还是sid呢': 1}
tensorflow:::{'3.那么tensorflow是用来干什么的呢?tensorflow是用来训练模型的；': 1, 'tensorflow是一个开源软件库，用于使用数据流图进行数值计算': 1, 'tensorflow是一个采用数据流图（dataflowgraphs），用于数值计算的开源软件库': 1, 'tensorflow是一个编程系统,使用图来表示计算任务.图中的节点被称之为op(operation的缩写).一个op获得0个或多个tensor,执行计算,产生0个或多个tensor.每个tensor是一个类型化的多维数组.例如,你可以将一小组图像集表示为一个四维浮点数数组,这四个维度分别是[batch,height,width,channels].': 1, 'tensorflow是一个开源的、基于python的机器学习框架，它由google开发，并在图形分类、音频处理、推荐系统和自然语言处理等场景下有着丰富的应用，是目前最热门的机器学习框架': 1, 'tensorflow是由googlebrain团队为深度神经网络（dnn）开发的功能强大的开源软件库，于2015年11月首次发布，在apache2.x协议许可下可用': 2, 'tensorflow是谷歌开源的一款深度学习框架，首次发布于2015年，tensorflow2发布于2019年，tensorflow2.0.0正式稳定版发布于2019年10月1日，而今，tensorflow已被很多企业与创业公司广泛用于自动化工作任务和开发新系统，其在分布式训练支持、可扩展的生产和部署选项、多设备支持（如安卓）方面备受好评': 1, '推荐使用后一种方法使用keras，它和tensorflow是密不可分的，keras的简洁和tf的灵活必须配合使用，缺一不可': 1, '之所以选择tensorflow是基于多方面考虑的（主要对比tensorflow1.0和pytorch）': 1, '机器学习过程中，tensorflow是常被使用框架之一': 1, 'tensorflow是由googlebrain': 1, '以上便是此次小编带来的“tensorflow”相关内容，通过本文，希望大家对tensorflow是什么以及tensorflow使用过程中常需的python包具备一定的了解': 1, 'tensorflow是一个基于数据流编程（dataflowprogramming）的符号数学系统，被广泛应用于各类机器学习（machinelearning）算法的编程实现，其前身是谷歌的神经网络算法库distbelief': 1, 'tensorflow是主要用来进行深度学习应用的框架': 1, '这个问题应该先看看nlp（自然语言处理）相关的内容，tensorflow是实现你算法的工具': 1, 'tensorflow是由google公司开发的用于实现机器学习的一种架构': 1, '现在我们看到和使用的tensorflow是google在github上上传的开源版本，但是在google公司内部，有一个自己用的版本': 1, '总而言之，我们选择使用tensorflow是由于：': 1}
tango:::{'tango是一个用于构建基于对象的分布式控制系统的工具包，广泛应用于全球的大型实验装置控制系统': 1}
wiremock:::{'wiremock是一个开源的测试工具，支持http响应存根、请求验证、代理/拦截、记录和回放': 1, 'wiremock是基于http的模拟器': 3, 'wiremock是一个http模拟服务，其核心是web服务，wiremock可以为特定的请求（stubbing）提供固定的响应，并捕获传入的请求，以便后面校验（验证）wiremock可以作为第三方库在项目中使用（一般用于集成测试），也可以作为单独的进程启动（singleton），该篇文章首先介绍singleton的使用方式': 1, 'wiremock是一个针对webservice测试桩（stubbing）和模拟函数（mocking）开发库': 1, 'wiremock是一个基于request行为模型匹配response的java开源服务器项目': 1}
configservice:::{'\u2003\u2003metaserver只是一个逻辑角色，在部署时和configservice是在一个jvm进程中的，所以ip、端口和configservice一致': 1, '默认情况下，metaservice和configservice是部署在同一个jvm进程，所以metaservice的地址就是configservice的地址，修改eureka地址时不需要修改metaserver地址': 1}
loki:::{'grafanaloki是可以组成功能齐全的日志记录堆栈的一组组件': 2, '与其他日志记录系统不同，loki是围绕着仅索引有关日志的元数据的思路构建的：标签（就像prometheus标签一样）': 1, '这三种缓存类型各有自己的场景需求，如果你的loki是allinone部署话，三选一都可以': 1, '如果你的loki是分布式的架构，那么可以选着redis作为主要缓存服务': 1, 'loki是grafanalabs团队最新的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统': 2, 'loki是主服务器，负责存储日志和处理查询': 1, '得益于prometheus和loki是一个开发团队出品，我们只需简单的配置一步，在数据源中添加一个prometheus类型，并在地址栏中填写上http://loki:3100/loki,这样我们就能通过像查询prometheus一样查询日志的趋势图了': 1, 'loki是受prometheus启发由grafanalabs团队开源的水平可扩展，高度可用的多租户日志聚合系统': 1, '与其他日志记录系统不同，loki是基于仅索引有关日志的元数据的想法而构建的：标签（就像prometheus标签一样）': 1, 'loki是可以水平扩展、高可用以及支持多租户的日志聚合系统，使用了和prometheus相同的服务发现机制，将标签添加到日志流中而不是构建全文索引': 1, '简单说，loki是专门用于聚集日志数据，重点是高可用性和可伸缩性': 2, 'loki是一个水平可扩展，高可用性，多租户日志聚合系统,灵感来自prometheus，其设计非常经济高效，易于操作': 1, 'loki是一个水平可扩展，高可用性，多租户的日志聚合系统，受到prometheus的启发': 1, 'loki是grafanalabs团队发布的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统': 1}
es:::{'在前面的学习中，我们已经掌握了es是什么，同时也把es的服务已经安装启动，那么es是如何去存储数据，数据结构是什么，又是如何实现搜索功能的呢': 1, 'es是什么?': 1, '一、es是如何产生背景': 2, '此外在使用javaclient聚合查询日期的时候，需要注意时区问题，因为默认的es是按照utc标准时区算的，所以不设置的聚合统计结果是不正确的': 1, '默认不设置时区参数，es是安装utc的时间进行查询的，所以分组的结果可能与预期不一样': 1, '之前的示例工程中，贴出了新建索引和查询索引的相关代码，这里贴出分页查询索引的代码，以验证连接es是否成功': 1, '设置成功后，可以重启服务器后，直接访问：http://127.0.0.1:9200/_plugin/head/看看es是否已经正常启动': 1, '3.es是分布式实时搜索，并且响应时间比关系型数据库快': 1, 'elasticsearch简写es，es是一个高扩展、开源的全文检索和分析引擎，它可以准实时地快速存储、搜索、分析海量的数据': 1, '直白点讲，es是一个企业级海量数据的搜索引擎，可以理解为是一个企业级的百度搜索，除了搜索之外，es还可以快速的实现聚合运算': 1}
istio:::{'虽然istio是独立于平台的，与kubernetes（或基础设施）网络策略一起使用，但它的好处更大，包括在网络和应用层保护pod到pod或服务到服务通信的能力': 1, '4.4平台支持性istio是独立于平台的，设计用于在各种环境中运行，包括跨越云、内部部署、kubernetes、mesos等环境': 1, 'istio是一个服务网格，它允许集群中的pods和服务之间进行更详细、复杂和可观察的通信': 1, '后面我们在介绍istio的架构和功能模块时,大家可以了解到istio是如何做到这些的': 1, '所以我们需要关心的是istio是如何进行sidecar注入到应用pod中的': 1, 'istio是独立于平台的，旨在运行在各种环境中，包括跨云、内部部署、kubernetes、mesos等': 1, 'istio是一种服务网格（servicemesh）的实现': 1, '就像kubernetes生态系统中的许多开源项目一样，istio是希腊航海术语，意为“风帆”，就像kubernetes本身是希腊语中的“舵手”或“船上驾驶员”一样': 1, '跨平台：istio是独立于平台的，旨在运行在各种环境中，包括跨云、内部部署、kubernetes、mesos等': 1, 'istio是在创建和管理微服务时所需功能的sidecar容器实现': 1, '至于软件，istio是开源的，因此您可以立即开始使用它': 1}
firebase:::{'firebase成立于2011年，在被google收购之前，firebase是一个协助开发者快速构建app，能够提供行动应用专用开发平台及sdk的一款产品，简单的说大概就是一套集成后台服务工具': 1, 'firebase是一家实时后端数据库创业公司，它能帮助开发者很快的写出web端和移动端的应用': 2, 'firebase是一个用于开发baas应用的开发平台，它提供了诸如实时数据库、云存储、鉴权、crash上报、机器学习、远程配置以及托管你的静态文件等后台托管服务': 1, '再次用官网的话描述：firebase是一个移动平台，可以帮助您快速开发高品质应用，扩大用户群，并赚取更多收益': 2, '最后总结一下：firebase是一个用于构建移动应用、提供实时数据存储和同步、用户身份验证等功能的平台': 2, '总而言之，firebase是一个很棒的解决方案，我个人使用它': 1, 'firebase是谷歌提供的平台服务，这套服务非常强大': 1, 'firebase是一个移动平台，可帮助您快速开发高品质的应用程序，增加用户群，并赚取更多的收益': 1, 'firebase是一个后端服务，让开发者能快速部署应用程序': 1}
rendertron:::{'rendertron是nodejs框架下的产物，是google-chrome旗下的的配套产品': 3, 'rendertron是一款headless的chrome渲染解决方案，旨在即时渲染和序列化网页': 1, 'rendertron:rendertron是可使用docker进行容器化打包的，基于headlesschrome的渲染解决方案；rendertron可用于渲染动态网页，也可以用于增强pwa对于不同的bot的响应内容': 1}
angular:::{'angular服务是可以是一个函数或者对象': 1, 'angular是angularjs的重写': 1, '下面仅是个人对angular是mvc或者mvvm的理解': 1, '首先在讨论angular是哪种模式之前，我们得先了解什么是mvvm和mvc': 1}
elasticsearch:::{'我们先来看下百度百科的介绍：elasticsearch是一个基于lucene的搜索服务器': 1, 'elasticsearch是用java开发的，并作为apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎': 1, '总结：1、elasticsearch是一个基于lucene的高扩展的分布式搜索服务器，支持开箱即用': 1, 'elasticsearch是一个高可用开源全文检索和分析组件': 2, 'elasticsearch是一个能提供近实时查询的搜索服务引擎，这意味着从索引文档到真正可搜索之间会有一个轻微的延迟(大概在一秒内)': 1, '.field("title","elasticsearch是一个基于lucene的搜索服务器")': 1, 'elasticsearch是用java开发': 1, 'elasticsearch是一个基于apachelucene(tm)的开源搜索引擎': 1, 'elasticsearch是一个分布式，高性能、高可用、可伸缩的搜索和分析系统看了上面这段话，估计很多人都懵了，这个是啥': 1, '3、elasticsearch是什么lucene是单机的模式，如果你的数据量超过了一台物理机的容量，你需要扩容，将数据拆分成2份放在不同的集群，这个就是典型的分布式计算了': 1, '1)近实时查询(nearrealtime)elasticsearch是一个能提供近实时查询的搜索服务引擎，这意味着从索引文档到真正可搜索之间会有一个轻微的延迟(大概在一秒内)': 1, 'elasticsearch是一款流行的开源搜索和分析引擎，适用于日志分析、实时应用程序监控、点击流分析等使用案例': 1, '原因：而elasticsearch是基于倒排索引的': 1, 'elasticsearch是一个基于lucene的搜索服务器': 1, 'elasticsearch是用java语言开发的，并作为apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎': 1, 'es=elaticsearch简写，elasticsearch是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理pb级别的数据': 1}
ktor:::{'根据其官方网站，“ktor是一个开放源代码框架，可使用强大的kotlin编程语言在连接的系统中构建异步服务器和客户端': 1, 'ktor是一个高性能的、基于kotlin的web开发框架，支持kotlincoroutines、dsl等特性': 3, 'ktor是一个由kotlin团队打造的web框架，可用于创建异步、高性能和轻量级的web服务器，并使用kotlin惯用的api构建非阻塞的多平台web客户端': 3, 'ktor是一个基于kotlin的使用最小的代价，快速创建一个web应用程序的框架': 1, 'ktor是一个使用kotlin以最小的成本快速创建web应用程序的框架': 3, 'ktor是一个用于在连接系统(connectedsystems)中构建异步服务器和客户端的kotlin框架': 3, 'ktor是用kotlin编写并设计的异步web框架': 2, 'ktor是一个使用强大的kotlin语言在互联系统中构建异步服务器与客户端的框架': 1, 'ktor是一个使用强大的kotlin语言在互联系统中构建异步服务器与客户端的框架，但国内的相关资料确实很少': 1, 'ktor是一款优秀的轻量型异步web框架，但目前的中文文档资料较少，甚至英文文档也还不完善': 1, 'ktor是从其他框架（如wasabi和kara）的灵感中诞生的，旨在最大程度地利用kotlin提供的某些语言功能（例如dsl和协程）': 1, 'ktor是一个使用kotlin在互联系统中构建异步服务器与客户端的框架': 1, '与其他kotlin库一样，ktor是免费的开源软件，在github上开发，并在apache2协议下发布': 1}
canary:::{'httpcanary是一款功能强大的http/https/http2网络包抓取和分析工具，你可以把他看成是移动端的fiddler或者charles，但是httpcanary使用起来更加地简单容易，因为它是专门为移动端设计的': 1, 'nestcam是目前最流行的wi-fi摄像机之一，canary是一个受欢迎的选项，它具有一些非常酷的附加功能，例如温度监控，或者能够在房间内提供湿度和空气质量水平的功能另外，如果需要，您可以通过以太网而不是wi-fi进行连接': 1, 'httpcanary是什么': 1, 'httpcanary是android平台下功能最强大的抓包和注入工具，支持http、https、http2和websocket等多种协议': 1}
nacos:::{'nacos是构建以“服务”为中心的现代应用架构(例如微服务范式、云原生范式)的服务基础设施': 3, '1.1nacos是什么': 1, 'nacos是构建以“服务”为中心的现代应用架构(例如微服务范式、云原生范式)的服务基础设施，致力于微服务的发现、管理和信息配置，能帮助开发者快速实现动态服务发现、服务配置、服务元数据及流量管理，从而更敏捷、更容易的构建、交付和管理微服务平台': 1, 'nacos是什么nacos的发展历程nacos能做什么nacos无缝接入各大生态': 1, '首先要说nacos的发展历程就要从阿里巴巴的内部产品configserver说起了，因为nacos是configserver的开源实现': 1, 'nacos是阿里的一个开源产品，它是针对微服务架构中的服务发现、配置管理、服务治理的综合型解决方案': 1, 'nacos是构建以“服务”为中心的现代应用架构的服务基础设施': 1, 'nacos是阿里云中间件团队开源的一个项目，基于阿里云内部提供的acm配置管理服务进行独立，截止到现在github已经有8k以上的star了，虽然成熟度还不能和携程开源的apollo相提并论，比较也是在阿里云上提供服务的组件稳定性还是值得相信的，当然要使用介绍nacos必须要介绍介绍配置中心这样一个思想了': 1, 'nacos不止支持二进制部署也支持支持docker和k8s部署，因为nacos是有状态服务存储的数据需要依赖于mysql而且集群的方式需要指定slave的ip所以使用k8s并不是很好的选择（k8s使用statefulset来运行有状态服务），笔者这里用docker-composer的方式来运行nacos': 1, '本节结合下一节，所要表述的是nacos是怎么实现': 1, 'nacos是阿里巴巴开源的一个集注册中心和配置中心为一体的组件，先已加入到apache大家庭中': 1, '一般流程下，nacos是服务注册中心，服务消费者要从nacos获取某一个服务的可用实例信息，对于服务实例有健康/不健康状态之分，nacos在返回给消费者实例信息的时候，会返回健康实例': 1, '服务在nacos是一等公民': 1, '（1）nacos是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台': 1, '（3）nacos是以服务为主要服务对象的中间件，nacos支持所有主流的服务发现、配置和管理': 1}
mina:::{'mina是一个基于javanio网络通信应用框架,使用mina可以轻松的搭建服务器，接下来将使用mina搭建一个小型的服务端': 1, '一样的道理，mina是nio和，netty也是基本nio，所以他长连接并不会hold住线程': 2, 'mina是一个韩国人写的基本javanio的一个高性能的传输框架,我们的搜索就是基本它作为一个搜索服务开放接口了': 1, '一、简介1、apachemina是一个网络通信应用框架，主要是对基于tcp/ip、udp/ip协议栈的通信框架（当然，也可以提供java对象的序列化服务、虚拟机管道通信服务等）': 1, 'mina是一个异步框架，是通过网络事件激发的，它包含两层：io层和协议层': 1, '第三，如果mina是作为服务器端等待连接的，当客户端正常关闭后业务逻辑也可继续正常执行，但是如果mina是连接服务器的客户端，则当服务器关闭后，mina的session也会关闭': 1, 'mina是基于nio编写的': 1, 'mina是一个简单但功能齐全的网络应用框架（其实已经被nettypk掉了，但都是一类型的东西，很多东西相通的，因为我们单位在用mina所以优先看这个）': 1, 'apachemina是一个网络应用框架，简化用户开发高性能、高可扩展性的网络应用程序的难度': 1, 'mina是阿帕奇的一个长链框架比起我们常用的环信融云等框架功能上来说是少了一些，但是用过环信融云的开发者都知道它们打出来的包是十分巨大的，单个app只配置环信能有18m大小这对使用流量的用户来说是不容易接受的，接下来我们就介绍下mina这个轻量级框架的使用': 1, 'mina是apache社区维护的一个开源的高性能io框架，在业界内久经考验，广为使用': 1}
oracleservicesid:::{}
ai:::{'主流文化想象的ai是r2d2和c3po的形象（星球大战中的机器人名字），而不是现代商业流程中的的重要组成部分': 1, '那我们一起感受一下ai是如何把图像识别技术、gan网络、自然语言处理技术应用到各行各业中': 1, '而游戏ai是为了支撑这段体验（游戏的其他部分其实也是）': 1, '在这一点上，behaviortrees和utility-basedai是比较好的': 1, '在这个例子中，可以说ai是完完全全的作弊': 1, '边缘ai是指在硬件设备上本地处理的ai算法，可以在没有网络连接的情况下处理数据': 1, '这主要是因为云和ai技术的基础不同:ai是由数据、大量的原始计算能力和大众难以理解的算法驱动的': 1, 'ai是新的尖端技术': 1, '小贴士：pinoai是什么': 1, 'pinoai是一个综合型大规模分布式人工智能平台，以统一框架的思路，用于广告各类复杂场景的训练和预估，由其支撑的广告业务占比已达70%': 1, '“ai是京东未来12年的核心战略”，京东集团副总裁颜伟鹏说': 1}
mqtt:::{'mqtt是基于发布（publish）/订阅（subscribe）模式来进行通信及数据交换的，与http的请求（request）/应答（response）的模式有本质的不同': 1, 'mqtt是一个基于客户端-服务器的消息发布/订阅传输协议': 2, '主流的mqtt是基于tcp连接进行数据推送的，但是同样有基于udp的版本，叫做mqtt-sn': 2, '目前如何搭建mqtt服务是个问题，先做个开头，近期补充': 1, '因为mqtt是协议，所以不能拿来直接用的，就好比http协议一样': 3}
mixer:::{'mixer是一个独立于平台的组件，负责在服务网格上执行访问控制和使用策略，并从envoy代理和其他服务收集遥测数据': 1, 'mixer是istio的大脑': 1, 'mixer是一个独立于平台的组件，负责在整个服务网格中实施访问控制和使用策略，并收集来自envoy代理和其他服务的遥测数据': 1, 'mixer是高度模块化和可扩展的组件': 1, 'mixer是一种属性处理机器': 1}
ingressgateway:::{'1、确认istio-ingressgateway是否有对外的ip': 1, '依据istio-ingressgateway服务是否是loadbalancers还是nodeport类型采用不同的方式获取ingressip和ports': 1, '1）若istio-ingressgateway是loadbalancers类型的服务（一般公有云上用loadbalancers，企业网上自建的集群用nodeport），则采用如下的命令将ingressip和端口存到环境变量中': 1, '2)若istio-ingressgateway是nodeport类型的服务，则采用如下的命令获取ingressports和ip': 1}
ebpf:::{'ebpf是linuxkernel的一部分': 2, 'ebpf是一个用于访问linux内核服务和硬件的新技术，由于其灵活性和高性能等特点，被迅速用于网络、出错、跟踪以及防火墙等多场景': 1, 'ebpf是什么，从字面上来看是扩展伯克利包处理器，那伯克利包处理器是什么呢': 1, 'ebpf是对linux观测系统bpf的扩展和加强版本': 1, 'ebpf是非常灵活而且可以跟踪几乎所有的主要内核子系统：涵盖了cpu调度，内存管理，网络，系统调用，块设备请求等等': 1, 'ebpf是linux内核近几年最为引人注目的特性之一，通过一个内核内置的字节码虚拟机，完成数据包过滤、调用栈跟踪、耗时统计、热点分析等等高级功能，是linux系统和linux应用的功能/性能分析利器': 1, 'ebpf是linuxkernel3.15中引入的全新设计，将原先的bpf发展成一个指令集更复杂、应用范围更广的“内核虚拟机”': 1, '在进一步讨论之前，我先简要介绍一下ebpf是什么，以及为什么它如此强大': 1, 'ebpf是如何诞生的呢': 1, 'brendan说在他的职业生涯中，ebpf是他见过的操作系统中最大的变革之一（oneofthebiggestoperatingsystemchanges），他为能身处其中而感到非常兴奋': 1, 'ebpf是linux内核中软件实现的虚拟机': 1, 'ebpf是一项革命性的技术，可以在linux内核中运行沙盒程序，而无需更改内核源代码或加载内核模块': 1, 'ebpf是一个开放社区，每个人都可以参与和共享': 1, 'ebpf是一项非常强大的技术，现在运行在许多关键软件基础架构组件的核心': 1, '然而，ebpf是更好的选择：programmingsocketlookupwithbpf：https://lwn.net/articles/797596/': 1, 'ebpf是如何在内核中的执行的': 1}
keepalived:::{'详情请参考：详细的详细的内容1)keepalived是什么keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于heartbeat，用来防止单点故障': 1, '2)keepalived工作原理keepalived是以vrrp协议为实现基础的，vrrp全称virtualrouterredundancyprotocol，即虚拟路由冗余协议': 1, 'keepalived是一个基于vrrp协议来实现的服务高可用方案，可以利用其来避免ip单点故障，类似的工具还有heartbeat、corosync、pacemaker': 1, '所以一般keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的lvs+keepalived、nginx+keepalived、haproxy+keepalived': 1, 'keepalived是一个类似于layer3,4&7交换机制的软件，也就是我们平时说的第3层、第4层和第7层交换': 1, 'keepalived是linux下一个轻量级别的高可用解决方案': 1, '\u3000\u3000\u3000\u3000所以一般keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的lvs+keepalived、nginx+keepalived、haproxy+keepalived': 1, 'keepalived是专门用来监控lvs集群系统中各个节点的状态，后来又加入了vrrp(虚拟路由器冗余协议)功能': 1, '之前一直认为keepalived是服务器级别的高可用，转移了一个vip就得全部转移': 1}
redis:::{'1.概念：redis是一款高性能的nosql系列的非关系型数据库redis本质上是一个key-value类型的内存数据库,纯内存操作redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1gb，另外redis也可以对存入的key-value设置expire时间': 1, '3.reis的持久化redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中，重启的时候可以再次加载进行使用': 1, 'redis是现在最受欢迎的nosql数据库之一，redis是一个使用ansic编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：': 1, '1redis是什么': 1, '一句话小结一下：redis是一个高性能的key-value数据库': 1, '问：redis是什么东西': 1, '答：redis是一个nosql型数据库，是以key-value型存储，基于内存（所有数据都放到内存中）但可以以日志和快照的形式持久化存储在硬盘中，当机器故障时，数据不会丢失，并且支持主从模式的数据备份': 1, 'redis是使用ansic（国际c语言标准）写的': 1, '如果你在以前面试的时候还没有遇到过面试官问你《为什么说redis是单线程的以及redis为什么这么快': 1, '我们先探讨一下redis是什么，redis为什么这么快、然后在探讨一下为什么redis是单线程的': 1, 'redis是一个开源的内存中的数据结构存储系统，它可以用作：数据库、缓存和消息中间件': 1, '看完上述的描述，对于一些常见的redis相关的面试题，是否有所认识了，例如：什么是redis、redis常见的数据结构类型有哪些、redis是如何进行持久化的等': 1, '官方faq表示，因为redis是基于内存的操作，cpu不是redis的瓶颈，redis的瓶颈最有可能是机器内存的大小或者网络带宽': 1, '1、我们知道redis是用"单线程-多路复用io模型"来实现高性能的内存数据服务的，这种机制避免了使用锁，但是同时这种机制在进行sunion之类的比较耗时的命令时会使redis的并发下降': 1, 'redis是有名的nosql数据库，一般linux都会默认支持': 2, '12、最后来测试一下redis是否正常提供服务': 2, '1.windows使用的这个redis是64位版本的，32位操作系统的同学就不要折腾了': 2, '11.点击“开始”按钮，右键“计算机”，点击“管理”，打开服务并查看redis服务是否已启动': 1, 'redis是一个开源的使用ansic语言编写、遵守bsd协议、支持网络、可基于内存亦可持久化的日志型、key-value数据库，并提供多种语言的api': 1, '多实用工具-redis是一个多实用工具，可用于多种用例，如：缓存，消息队列(redis本地支持发布/订阅)，应用程序中的任何短期数据，例如，web应用程序中的会话，网页命中计数等': 1, '1.1绑定ip,先看这个conf文件中的描述：默认redis是对全网段接口ip进行监听.当然也可以用’bind’来配置接口只监听一个或者几个ip端口': 1, 'redis是由意大利人salvatoresanfilippo（网名：antirez）开发的一款内存高速缓存数据库': 1, 'redis全称为：remotedictionaryserver（远程数据服务），该软件使用c语言编写，redis是一个key-value存储系统，它支持丰富的数据类型，如：string、list、set、zset(sortedset)、hash': 1, '我们都知道，redis是key-value数据库，我们可以设置redis中缓存的key的过期时间': 1, 'redis是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止': 1, '既然redis是如此的轻量（单实例只使用1m内存），为防止以后的扩容，最好的办法就是一开始就启动较多实例': 1}
whoami:::{'whoami是操作系统中用于查看当前有效用户名的命令': 1}
ingress:::{'ingress是k8s资源对象，用于对外暴露服务，该资源对象定义了不同主机名（域名）及url和对应后端service（k8sservice）的绑定，根据不同的路径路由http和https流量': 2, 'ingress是k8s官方提供的用于对外暴露服务的方式，也是在生产环境用的比较多的方式，一般在云环境下是lb+ingressctroller方式对外提供服务，可以使用ingress来使内部服务暴露到集群外部去，它为你节省了宝贵的静态ip，因为你不需要声明多个loadbalancer服务了，此次，它还可以进行更多的额外配置': 1, 'ingress是k8s官方提供的用于对外暴露服务的方式，也是在生产环境用的比较多的方式，一般在云环境下是lb+ingressctroller方式对外提供服务，这样就可以在一个lb的情况下根据域名路由到对应后端的service，有点类似于nginx反向代理，只不过在k8s集群中，这个反向代理是集群外部流量的统一入口': 1, 'ingress是对集群中服务的外部访问进行管理的api对象，典型的访问方式是http': 1, '说明：ingress-nginx是kubernetes官方提供的ingress控制器，nginx-ingress是nginx官方提供的ingress控制器，两者都支持域名和ip两种方式做kubernetes服务的统一入口，只是ingress的配置不太一样': 1}
camunda:::{'camunda是activiti最大的贡献者之一(除alfresco以外)，同时也是它一个主要的执行咨询合作伙伴': 1, '然而，问题并非真的是camunda是否将对activiti代码基做出巨大贡献(他们确实做了)，而是他们是否能维持并建立一个activiti的开源叉形指令': 1, '＃3-camunda是一个重要的开源项目': 1, 'camunda是activiti最大的贡献者之一(除alfresco以外)，同时也是它一个主': 1, '然而，问题并非真的是camunda是否将对activiti代码基做出巨大贡献(他们确实做了)，而是他们是否能维持并建立一个activiti': 1, 'camunda是一个基于java的框架，支持用于工作流和流程自动化的bpmn、用于案例管理的cmmn和用于业务决策管理的dmn': 1, '就流程引擎而言，camunda是一个灵活的工作流框架，它的核心是一个在java虚拟机内部运行的原生bpmn2.0流程引擎，因此它可以嵌入到任何java应用程序或运行时容器中': 1, 'camunda是一个流程引擎框架，forkactiviti得来，官网：https://camunda.org/': 1, 'camunda是使用java语言开发的，因此在下载camunda之前，请确保本地已经安装了java运行时环境': 1, 'camunda是一个非常灵活的框架，基于你想要如何使用它，它能够根据不同的使用环境选择不同的发行版本': 1}
keepalive:::{'体现在以下几个方面：（1）keepalive是在应用层面开始，配置再操作系统层面，不够灵活': 1, '（2）keepalive是操作系统面向网络层的，对于我们某些应用本身来说大多数情况本非这么简单（例如频繁fgc、load很高、rt很长），对于应用的异常情况，应用已经失去了活性，连接应该被认为是不可用的': 1, 'grpc的keepalive是对应于tpc的keepalive': 1, 'http的keepalive是开发者最长遇到的，所以要格外注意': 1, 'tcp的keepalive是在establish状态的时候，双方如何检测连接的可用行': 2, 'tcp的keepalive是侧重在保持客户端和服务端的连接，一方会不定期发送心跳包给另一方，当一方端掉的时候，没有断掉的定时发送几次心跳包，如果间隔发送几次，对方都返回的是rst，而不是ack，那么就释放当前链接': 1, '可以看到，tcp中的so_keepalive是一个开关选项，默认关闭，需要在应用程序需要代码中显式的开启': 1}
sybase:::{'关于登录用户和数据库用户由于sybase是多数据库结构，为了对多个数据库中的用户进行统一管理，因此使用了登录用户和数据库用户': 1}
keeaplived:::{'喜欢看我博客或文章的朋友都知道，我一直主力推崇nginx+keepalived作web的负载均衡高可用架构，并积极将其用于项目方案中；nginx负载均衡作服务器遇到的故障一般有①服务器网线松动等网络故障；②服务器硬件故障从而crash；③nginx服务死掉；遇到前二者情况，keeaplived是能起到ha的作用的；然而遇到③种情况就没有办法了，但可以通过shell监控解决这问题，从而实现真正意义上的负载均衡高可用': 1}
reactor:::{'reactor是一种广泛应用在服务器端开发的设计模式': 1, '特点：每个reactor都是一个线程，每个reactor都是一个eventloop，mainreactor是主io线程，将监听套接字加入进去，他只负责accept客户端连接，返回的已连接套接字会以round-robin的方式，依次添加到subreacor中去，使得连接可以均匀的分配到subreactor中去': 1, '注意此处的reactor是不能用进程去实现的，应为进程之间不能共享线程池': 1, '关于reactor是什么，我们先从wiki上看下:': 1, '但这依然不是一个完善的reactorpattern,首先reactor是一种设计模式，好的模式应该是支持更好的扩展性，显然以上的并不支持，另外好的reactorpattern必须有以下特点：': 1, 'reactor是一种事件驱动机制，和普通函数调用的不同之处在于：应用程序不是主动的调用某个api完成处理，而是恰恰相反，reactor逆置了事件处理流程，应用程序需要提供相应的接口并注册到reactor上，如果相应的事件发生，reactor将主动调用应用程序注册的接口，这些接口又称为“回调函数”': 1, '可以看出两者的区别：reactor是在事件发生时就通知事先注册的事件（读写由处理函数完成）；proactor是在事件发生时进行异步i/o（读写由os完成），待io完成事件分离器才调度处理器来处理': 1, '线程调度：ace的reactor是单线程调度，proactor支持多线程调度；': 1, 'reactor是我们从代码中抽取出来方便我们进行管理的': 1, 'reactor是什么?': 1, 'reactor是一个使用了同步非阻塞的i/o多路复用机制的模式，i/o多路复用是指使用一个线程来检查多个文件描述符(socket)的就绪状态，比如调用select，poll，epoll函数（现在多使用epoll函数，关于epoll可见上篇博文），传入多个文件描述符，如果有文件描述符就绪，就返回，否则阻塞直到超时': 1, '在学习reactor模式之前，我们需要对“i/o的四种模型”以及“什么是i/o多路复用”进行简单的介绍，因为reactor是一个使用了同步非阻塞的i/o多路复用机制的模式': 1, '流程：①服务器端的reactor是一个线程对象，该线程会启动事件循环，并使用selector来实现io的多路复用': 1, 'reactor是一个用于jvm的完全非阻塞的响应式编程框架，具备高效的需求管理（即对“背压（backpressure）”的控制）能力': 1, 'reactor是响应式编程范式的实现，总结起来有如下几点：': 1, 'reactor是reactivex家族的一个非常重要的成员，reactor是第四代的reactivelibrary，它是基于reactivestreams标准基础上开发的，主要用来构建jvm环境下的非阻塞应用程序': 1, 'reactor是基于jvm的非阻塞api，他直接跟jdk8中的api相结合，比如：completablefuture，stream和duration等': 1, '该api本质上是以事件驱动来处理网络事件的，而reactor是基于该api提出的一套io模型': 1}
leaf:::{'leaf是一个由go语言（golang）编写的开发效率和执行效率并重的开源游戏服务器框架': 4, 'leaf是一个由go语言(golang）编写的开发效率和执行效率并重的开源游戏服务器框架': 1, 'leaf是美团基础研发平台推出的一个分布式id生成服务，名字取自德国哲学家、数学家莱布尼茨的一句话：“therearenotwoidenticalleavesintheworld.”leaf具备高可靠、低延迟、全局唯一等特点': 3, 'leaf是美团开源的一款的唯一id生成器，具体可以参考https://github.com/meituan-dianping/leaf的介绍，文档写的很好，大家一定能够明白软件背后想要解决的问题': 1, 'leaf是一体式的框架，连最外围的接入服务器也被整合在一起': 1, '注：这里我再简单的总结一下leaf是如何解决时钟回拨问题的': 2, 'leaf是美团基础研发平台推出的一个分布式id生成服务': 1, 'leaf是一个使用go语言开发的开源游戏服务器框架，注重运行效率并追求极致的开发效率': 1}
prediction:::{}
iis:::{'iis是internetinformationservices的缩写，意为互联网信息服务，是由微软公司提供的基于运行microsoftwindows的互联网基本服务': 2, 'iis是一种web（网页）服务组件，其中包括web服务器、ftp服务器、nntp服务器和smtp服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事': 3, 'iis是缩写，全称internetinformationservices(iis,互联网信息服务),是由微软公司提供的基于运行microsoftwindows的互联网基本服务': 1, 'iis是指worldwidewebserver服务，iis是一种web（网页）服务组件，专业的说，iis可以赋予一部主机电脑一组以上的ip地址，而且还可以有一个以上的域名作为web网站': 1, 'iis是一种服务，是windows2000server系列的一个组件': 1, '有很多其他的服务器软件也可以提供良好的internet服务，如netscape的服务器、apacheforwin服务器等，但是iis是windows平台下最简单易用的服务器': 1, 'iis是一个支持http和ftp发布服务的web服务器': 1, '以上就是关于“iis是什么': 1, 's全程为internetinformationservice（internet信息服务），它的功能是提供信息服务，如架设http、ftp服务器等，是windowsnt内核的系统自带的，不需要下载什么是internetinformationserver(iis)?microsoftiis是允许在公共intranet或internet上发布信息的web服务器': 1, 'iis是internetinformationserver的缩写,它是微软公司主推的web服务器': 2, 'iis是随windowsntserver4.0一起提供的文件和应用程序服务器，是在windowsntserver上建立internet服务器的基本组件': 1, '那么究竟iis是什么': 1, 'iis是什么?': 1, 'iis是internetinformationservices英文全称的缩写，是一个worldwidewebserver服务': 1, 'iis是internetinformationservices的缩写，想必大家看到这个就会想起最近学习的计算机网络原理中的各种服务和协议': 1, 'iis是web的一个服务组件，其中包括web服务器、ftp服务器、nntp服务器和smtp服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事': 1, '什么是internetinformationserver(iis)?microsoftiis是允许在公共intranet或internet上发布信息的web服务器': 1, 'iis是什么iis有什么用?专业的说，iis可以赋予一部主机电脑一组以上的ip地址，而且还可以有一个以上的域名作为web网站，您可以利用tcp/ip内容设置两组以上的ip地址给它，除了为网卡再加进一组ip地址之外，必须在负责这个点的dns上为这组ip地址指定另一个域名，完成这些步骤以后，在internetservicemanage中就会出现一个虚拟web服务器，虚拟服务器（virtualserver）必须有它自己的主目录（homedirectory），对于iis来说，所有服务器都是它的虚拟服务器': 1, 'iis是一种web(网页)服务组件，其中包括web服务器、ftp服务器、nntp服务器和smtp服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络(包括互联网和局域网)上发布信息成了一件很容易的事': 1}
cxf:::{'apachecxf是一个开放源代码框架，提供了用于方便地构建和开发web服务的可靠基础架构': 1, '在web项目中创建cxf服务是我们在项目中最常用的，一般可以分为两类，一个是为类创建cxf服务，一个是为接口创建cxf服务，这篇博文就为大家介绍一下如何实现这两种方式': 1, 'apachecxf是一个开源的services框架，cxf帮助您利用frontend编程api来构建和开发services，像jax-ws': 1, 'apachecxf是apache旗下一个优秀的web服务（ws）开源框架，具备轻量级的特性': 1, 'cxf是celtrix（esb框架）和xfire（webserivice）合并而成，核心是org.apache.cxf.bus(总线)，类似于spring的applicationcontext，cxf默认是依赖于spring的': 1, 'apachecxf是一个开源的webservice框架，cxf大大简化了webservice的创建，同时它继承了xfire的传统，一样可以和spring天然的进行无缝的集成': 1, '对于cxf是干什么用的，我不想多说，大家都知道这是我们在java编程中webservice技术的一种实现工具': 1}
sqlserverbrowser:::{}
zabbix:::{'zabbix是一个用于网络，操作系统和应用程序的开源监控软件，它旨在监视和跟踪各种网络服务，服务器和其他网络硬件的状态': 1, 'zabbix是一个企业级分布式开源监控解决方案': 1, 'zabbix是免费的': 2, 'zabbix是根据gpl通用公共许可证的第二版编写和发布的': 1, 'zabbix是一个企业级的分布式开源监控方案': 1, 'zabbix是一款能够监控各种网络参数以及服务器健康性和完整性的软件': 1, 'zabbix是根据gpl通用公共许可证第2版编写和发行的': 1, '官方网站：http://www.zabbix.com/zabbix是企业级监控系统的开源解决方案，是一个基于web界面的分布式监控服务器': 1, '一、部署搭建zabbix监控服务器192.168.4.7用rpm在线安装zabbix，参考文章：https://www.zabbix.com/cn/download?zabbix=3.0&os_distribution=red_hat_enterprise_linux&os_version=7&db=mysqlzabbix4.0.2的安装与配置：https://cloud.tencent.com/developer/article/1375338用zabbix官方的yum仓库安装zabbix会有yum问题，参考该文章https://blog.51cto.com/11975865/2344911zabbix前端软件安装：https://www.zabbix.com/download_sources#tab:40lts1、部署zabbix监控的服务运行环境lamp2、安装zabbix软件（在安装php相关软件的过程中，出现yum源中版本php版本不符合的问题，解决办法更换本地yum源的镜像文件改为7.4版本的，然后#yummakecache一下就会出现新版本了）2.1安装准备]#systemctlstopfirewalld]#systemctldisablefirewalld]#sed-i‘s/selinux=enforcing/selinux=disabled/g’/etc/selinux/config]#reboot—#rpm-qgccgcc-c++—#useraddzabbix#tar-zxfzabbix-3.4.4…tar.gz#cdzabbix-3.4.4/2.2安装–#./configure--prefix=/usr/local/zabbix--enable-server--enable-agent--with-mysql(这里可能会出现一个问题：configure:error:unabletouselibevent(libeventcheckfailed)解决方法是：安装依赖库yuminstalllibevent-devel-y）（若出现zabbixconfigure:error:mysqllibrarynotfound的错误，安装yuminstallmysql-devel-y）#./configure--prefix=/usr/local/zabbix--enable-server--enable-agent--with-mysql--with-libevent=/usr/local/libevent#ls/usr/local/zabbix查看zabbix是否安装，目录里有文件就对了': 1, 'zabbix是由alexeivladishev开发的一种网络监视、管理系统，基于server-client架构': 1, 'zabbix是保证服务器系统的安全运营，主要功能：cpu负荷内存使用磁盘使用网络状况端口监视日志监视': 1, 'zabbix是一种企业级开源分布式监控解决方案，可以监控网络的众多参数信息以及服务器的健康状况和完整性的软件zabbix使用灵活的通知机制，允许用户为几乎任何事件配置基于电子邮件的警报，这可以对服务器问题作出快速反应zabbix存储的数据提供出色的报告和数据可视化功能': 1, 'zabbix报告和统计信息、配置参数、网络状态以及服务器运行状况都可通过web的前端访问zabbix是免费的': 1, '1、zabbix是一个高度集成的监控解决方案，可以实现企业级的开源分布式监控2、zabbix通过c/s模式采集监控数据3、zabbix通过b/s模式实现web管理': 1, 'zabbix是一个基于web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案': 1}
zk:::{'我们可以先看一下官网的回答：zk为分布式应用提供分布式协调服务，首先zk是用在分布式系统的，其次提供协调服务，提供什么样的协调服务呢，它另外一个属性是cp，也就是在分布式系统需要一致性的协调服务的时候我们就可以用zk了': 1, '其实，dubbo+zookeeper的使用大家可能听得多，但是具体干嘛用的，一头雾水，大家可以把dubbo理解成一个分布式框架，zk是管理dubbo服务的监控中心': 1, 'zk是如何保证一致性的': 1, '看到有文章说zk是cp，也有人说是ap': 1}
netty:::{'大家都知道，netty是一个基于nio的并发框架': 1, 'netty是由jboss提供的一个java开源框架': 1, '也就是说，netty是一个基于nio的客户、服务器端编程框架，使用netty可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用': 1, 'netty是一个吸收了多种协议的实现经验，这些协议包括ftp,smtp,http，各种二进制，文本协议，并经过相当精心设计的项目，最终，netty成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性': 1, 'netty是一个异步非阻塞的通信框架，所有的i/o操作都是异步的，netty的channelfuture机制': 1, 'netty是建立在nio基础之上，netty在nio之上又提供了更高层次的抽象': 3, '总之，netty是java程序员进阶的必备神奇': 2, 'netty是一个异步事件驱动的网络应用程序框架用于快速开发可维护的高性能协议服务器和客户端': 1, 'netty是一个nio客户端服务器框架，可以快速轻松地开发协议服务器和客户端等网络应用程序': 1, 'ps：简单讲，netty是一个基于协议，支持快速构建客户端、服务端，用于网络io交互的异步非阻塞、高性能、可维护框架': 1, 'netty是一个网络编程框架，所以事件是按照它们与入站或出站数据流的相关性进行分类的': 1, 'netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端': 1, '在上一篇文章netty入门案例中我们做出了netty的入门示例，那么netty是如何使用http服务的呢': 1, 'netty是后端开发常常听到，但是在实际工作中却不太能接触到的一个框架': 1, 'netty是后端研发进阶必备知识，学好netty能帮我们了解网络通讯的全貌': 1, 'netty是一个利用java的高级网络的能力，隐藏其背后的复杂性而提供一个易于使用的api的客户端/服务器框架': 1, "netty是一个广泛使用的java网络编程框架（netty在2011年获得了duke'schoiceaward，见https://www.java.net/dukeschoice/2011）": 1, '有人说netty的性能就一定比tomcat性能高，其实不然，tomcat从6.x开始就支持了nio模式，并且后续还有apr模式——一种通过jni调用apache网络库的模式，相比于旧的bio模式，并发性能得到了很大提高，特别是apr模式，而netty是否比tomcat性能更高，则要取决于netty程序作者的技术实力了': 1, '如第一部分所述，netty是一款收到大公司青睐的框架，在我看来，netty能够受到青睐的原因有三：': 1, 'netty是一款基于nio（nonblockingi/o，非阻塞io）开发的网络通信框架，对比于bio（blockingi/o，阻塞io），他的并发性能得到了很大提高，两张图让你了解bio和nio的区别：': 1, '才接触u3d和netty，我的理解是netty是对tcp/ip协议的封装，用来对客户端的请求进行处理，而对客户端请求的处理方法只有一个，那么如果客户端请求类型非常之多，这个方法的代码就肯定非常臃肿了，这个时候想到javaweb前端框架和servlet的设计': 1}
spi:::{'也可以这样理解：spi是“基于接口的编程+策略模式+配置文件”组成实现的动态加载机制': 1, '继续深入问呗，前面一些基础性的东西问完了，确定你应该都ok，了解dubbo的一些基本东西，那么问个稍微难一点点的问题，就是spi，先问问你spi是啥': 2, '然后问问你dubbo的spi是怎么实现的': 2, '我认为它比源生jdk的spi是更加灵活些的~': 1, '换个说法，spi是一个环形总线结构，主要是在sck的控制下，两个双向移位寄存器进行数据交换': 1, '下面通过一个例子来具体演示下javaspi是如何使用的，项目的工程结构如下：(1)「spi-api」项目': 1, '这里以jdbc为例，看看spi是如何自动加载驱动的': 1, 'spi是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为pcb的布局上节省空间，提供方便': 1, '一开始接触这个概念大部分人都会很懵，spi是啥': 1, 'spi是serviceproviderinterfaces的简称': 1, 'spi01-spi是什么': 1, 'spi是serviceproviderinterfaces的缩写': 1, 'spi是java提供的一种服务加载方式，全名为serviceproviderinterface': 1, 'spi在android工程中很少被使用到，主要因为spi是针对厂商或者第三方服务商设置的机制，在平常的项目中很少会用到spi': 1, 'spi是java中原有的机制，在android中可以直接使用，但是有上述提到的一些缺点，我们可以参考java中的spi机制，结合android的环境，输出一套新的spi机制': 1}
io:::{'fiofio是个非常强大的io性能测试工具，其作者jensaxboe是linux内核io部分的maintainer，可以毫不夸张的说，如果你把所有的fio参数都搞明白了，基本上就把linuxio协议栈的问题搞的差不多明白了': 1, '既然drawio是开源的，那么总是可以把整个项目给download下来，然后看看怎么玩': 1, '2、我们通过上面iostat的常用命令基本可以判断io是否存在瓶颈了，然后我们通过iotop命令来抓出罪魁祸首的进程，这里比较简单直接输入命令，然后执行（一般抓到的是java进程、mysqld，干的越多问题越多）': 1, '同步io是指用户空间线程是主动发起io请求的一方，内核空间是被动接受方': 1, '同步非阻塞io是在同步阻塞io的基础上，将socket设置为nonblock': 1, '注意，异步io是需要操作系统的底层支持，在java7中，提供了asynchronousio': 1, '物理硬盘提供的io是有限的，也是整个io系统存在瓶颈的最大根源': 1, '所以，一个os的io在经过多个中间层以后，发生在物理磁盘上的io是不确定的': 1, '当系统发起n个非常小的io请求（如：1k）时，因为一次io是有代价的，系统会取完整的一块数据（如4k、8k），所以当第一次io完成时，后续io请求的数据可能已经有了': 1, 'bio是一个连接一个线程': 1, 'nio是一个请求一个线程': 1, 'aio是一个有效请求一个线程': 1, '异步阻塞io：此种方式下是指应用发起一个io操作以后，不等待内核io操作的完成，等内核完成io操作以后会通知应用程序，这其实就是同步和异步最关键的区别，同步必须等待或者主动的去询问io是否完成，那么为什么说是阻塞的呢': 1, '可概括为：bio是“我要读”，nio是“我可以读了”，aio是“我读完了”': 1, '疑问：selector.select();阻塞，那为什么说nio是非阻塞的io': 1, 'socketio是在客户端和服务端之间建立的双向通信数据交换技术，底层使用engineio': 1, '如果要开始为有限数量的用户使用实时应用程序，则socket.io是一个不错的选择': 1, 'io是input/output的缩写': 1, 'netty整体架构是reactor模型,而aio是proactor模型,混合在一起会非常混乱，把aio也改造成reactor模型看起来是把epoll绕个弯又绕回来': 1, '注意同步io和异步io与阻塞io和非阻塞io是不同的两组概念': 1, '阻塞io和非阻塞io是反映在当用户请求io操作时，如果数据没有就绪，是用户线程一直等待数据就绪，还是会收到一个标志信息这一点上面的': 1, '也就是说，阻塞io和非阻塞io是反映在io操作的第一个阶段，在查看数据是否就绪时是如何处理的': 1, '异步io是需要操作系统的底层支持，在java7中，提供了asynchronousio': 1}
ful:::{'restful是基于http方法的api设计风格，而不是一种新的技术.': 1, 'restful是一种设计风格，是一种api接口设计规范，比如接口的命名不以动词命名（如findbyiddeletebyid等），不同的请求方式代表了相应的动作（get,post,put,delete,patch等动作）比如/user接口crud（增删改查）操作只需要更换不同的请求方式即可一个接口即可搞定而不需要定义多个接口': 1, '阮一峰的那篇文章我认为没有讲到实质，他能让人大概知道restful是啥，但无法令人信服地知道rest是一种和以往不同的、在一定场景下有一定优势的架构方式': 1}
sharepoint:::{'根据microsoft的说法，sharepoint是一个企业级的协作平台': 1, '在某些人眼里，sharepoint是一个文档存储中心': 1, '还有些人认为，sharepoint是信息共享的地方': 1, '或者认为sharepoint是快速创建网站的工具；还有些人觉得sharepoint是一个构建企业级应用的平台': 1, 'sharepoint是一个企业级的企业协作平台': 1, '从上面介绍的这些功能大家简单的了解sharepoint是如何实现了门户网站，文档管理，协作，社交等相关功能的无缝衔接': 1, '昨天看了一个资料，出处忘记了，说sharepoint是为员工交流文档、思想、信息以及沟通（废话': 1}
alertview:::{}
sqlserver:::{'\u3000\u3000从网上找到的解决方案：\u3000\u3000vs2010自带的sqlserver是express简化版的，需要到“sqlserver安装中心>维护>版本升级”，把它升级成“具有高级服务的express”（很快就可完成）': 1, 'sqlserver2017下载安装教程sqlserver是由microsoft开发和推广的关系数据库管理系统（dbms）第一步：打开浏览器，在浏览的搜索框中我们输入“sqlserver”': 1}
rsyslog:::{'rsyslog服务和logrotate服务======================================================================rsyslog是一个syslogd的多线程增强版': 1, '\u200b1、rsyslog是一个c/s架构的服务，可监听于某套接字，帮其它主机记录日志信息，在linux系统中可以分类两个日志：': 1, '\u200b前面已经介绍，rsyslog是一个c/s架构，可以通过套接字来进行监听记录工作，起可以基于tcp和udp工作，默认的监听端口是514，只需要在modules打开即可：': 1, '1、rsyslog是一个c/s架构的服务，可监听于某套接字，帮其它主机记录日志信息，在linux系统中可以分类两个日志：': 1, '前面已经介绍，rsyslog是一个c/s架构，可以通过套接字来进行监听记录工作，起可以基于tcp和udp工作，默认的监听端口是514，只需要在modules打开即可：': 1, 'rsyslog是一个强大而安全的日志处理系统': 1, 'rsyslog是一个syslog的升级版，可用于处理大型的系统的日志需求': 1, 'rsyslog是一个开源工具，被广泛用于linux系统以通过tcp/udp协议转发或接收日志消息': 1, '要验证rsyslog是否已经安装到你的centos系统上，请执行如下命令：#rpm-qa|greprsyslog#rsyslogd-v': 1, '1、rsyslog是一个c/s架构的服务，可监听于某套接字，帮其它主机记录日志信息': 1, 'linux中用来实现日志功能的服务为rsyslog，在centos5及更早版本中使用的是syslog，rsyslog是syslog的增强版本': 1}
fastdfs:::{'fastdfs是一款类googlefs的开源分布式文件系统，它用纯c语言实现，支持linux、freebsd、aix等unix系统': 1, 'fastdfs是一个开源的高性能分布式文件系统（dfs）': 2, 'fastdfs是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源': 1, '1.首先查询主机是否安装了gcc(因为fastdfs是c语言开发的)': 1, 'fastdfs是用c语言编写的一款开源的分布式文件系统': 4, 'fastdfs是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题': 5, 'fastdfs是专为互联网应用量身定做，目的是追求高性能和高拓展性': 1, 'fastdfs是阿里巴巴开源的一套轻量级,天生就是分布式设计的文件系统，fastdfs的源代码由c语言开发，目前可运行在linux,freebsd，unix等类操作系统上，fastdfs解决了大数据量文件存储(这里经常有人说成大数据,我本人是不赞同的)和读写分离,备份容错,负载均衡,动态扩容等问题，这也就是原作者所描述的高性能和高扩展性的文件系统': 1, '1.fastdfs是什么?': 1, '百度百科版：fastdfs是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题': 1, 'fastdfs是一款开源的轻量级分布式文件系统纯c实现，支持linux,freebsd等unix系统类googlefs,不是通用的文件系统，只能够通过专有api访问，目前提供了c，java和phpapi为互联网应用量身定做，解决大容量文件存储问题，追求高性能和高扩展性fastdfs可以看做是基于文件的key-value存储系统，称为分布式文件存储服务更为合适': 1, '所以在应用领域上，fastdfs是非常合适的': 1}
remoting:::{'原来的开发可能有一些委托回调，如果在remoting是不支持使用委托回调的方法，只能通过事件的方法': 1, '.netremoting是在dcom等基础上发展起来的一种技术，它的主要目的是实现跨平台、跨语言、穿透企业防火墙，这也是他的基本特点，与webservice有所不同的是，它支持http以及tcp信道，而且它不仅能传输xml格式的soap包，也可以传输传统意义上的二进制流，这使得它变得效率更高也更加灵活': 1, '1、remoting是marshbyreference的，可以传变量的引用，直接对服务器对象操作': 1, '2、一般来说，remoting是和平台相关的，需要客户和服务器都是.net，但可配置特性比较好，可以自定义协议': 1, '4)clr和cts的好处：由于.netremoting是基于.net框架的，所以他拥有commontypesystem(cts)和commonlanguageruntime(clr)所拥有的易于使用和功能强大的特点': 1, '我们的原因如下：1、.netremoting是目前分布式对象实现rpc的一种主要方式': 1, '基本概念.netremoting是微软随.net推出的一种分布式应用解决方案，被誉为管理应用程序域之间的rpc的首选技，它允许不同应用程序域之间进行通信（这里的通信可以是在同一个进程中进行、一个系统的不同进程间进行、不同系统的进程间进行）': 1, '区别：1、webservice是用的应用层协议http封装的，所以它可以被很多其它语言调用，很多语言也都实现了webservice代理端封装以及工具，只要知道webservice的地址(比如：http://www.baidu.com/someservice.asmx)，就可以用，所以webservice的点特是好用、通用、效率一般；.netremoting是用传输层协议tcp封装的，所以可以以二进制传输数据，效率高；.netremoting基于.net的反射机制，只方便.net使用（其它语言反射机制实现不同，有的根本没有反射）；2、webservice能穿越防火墙，是因为http协议是现在广泛应用的协议，防火墙一般不会作屏蔽，并不说webservice有某功能穿越防火墙；3、只能在winform下用吗': 1, '远程逻辑调用，remoing接口只能用在.netremoting是.net中用来跨越machine,process,appdomain进行方法调用的技术,对于三成结构的程序，就可以使用remoting技术来构建．它是分布应用的基础技术.相当于以前的dcomwebservice是一种构建应用程序的普通模型，并能在所有支持internet网通讯的操作系统上实施': 1, '1、.netremoting是目前分布式对象实现rpc的一种主要方式': 1, '.netremoting是微软随.net推出的一种分布式应用解决方案，被誉为管理应用程序域之间的rpc的首选技，它允许不同应用程序域之间进行通信（这里的通信可以是在同一个进程中进行、一个系统的不同进程间进行、不同系统的进程间进行）': 1, '本篇文章主要介绍了c#实现remoting双向通信，.netremoting是由客户端通过remoting，访问通道以获得服务端对象，再通过代理解析为客户端对象来实现通信的': 1, '.netremoting是由客户端通过remoting，访问通道以获得服务端对象，再通过代理解析为客户端对象来实现通信的': 1, '下面对.netremoting进行概括的阐述：.netremoting是在dcom等基础上发展起来的一种技术，它的主要目的是实现跨平台、跨语言、穿透企业防火墙，这也是他的基本特点，与webservice有所不同的是，它支持http以及tcp信道，而且它不仅能传输xml格式的soap包，也可以传输传统意义上的二进制流，这使得它变得效率更高也更加灵活': 1, '它们分别对应remoting通道的这两种类型1.remoting是marshbyreference的，可以传变量的引用，直接对服务器对象操作': 1, '2.一般来说，remoting是和平台相关的，需要客户和服务器都是.net，但可配置特性比较好，可以自定义协议': 1}
solr:::{'solr特点,solr是一个高性能，采用java5开发,基于lucene的全文搜索服务器': 1, '使用步骤；1,solr服务器搭建，因为solr是用java5开发的，所以需要jdk和tomcat搭建部署2,搭建完成后，我们需要将要展示的字段引入solr的库中': 1, 'solr是apache下的一个顶级开源项目，采用java开发,它是基于lucene的全文搜索服务器': 1, 'solr是一个全文检索服务器，只需要进行配置就可以实现全文检索服务': 2, 'solr是一个高性能，采用java5开发,基于lucene的全文搜索服务器': 1, '①solr是一个全文检索服务器，只需要进行配置就可以实现全文检索服务': 1, 'solr是apache下的一个顶级开源项目，采用java开发，它是基于lucene的全文搜索服务': 2, 'solr是java开发': 2, 'solr是java开发的是可以跨平台的安装方式和widows上其实是一样的所以产品用java开发的安装一般都是比较方便的': 1, '这就是为什么转移负载到一个外部的搜索服务器的主要原因，apachesolr是一个流行的开源搜索服务器，它通过使用类似rest的httpapi，确保你能从几乎任何编程语言来使用solr': 1, 'solr是一个开源搜索平台，用于构建搜索应用程序': 2, 'solr是企业级的，快速的，高度可扩展的': 1, 'solr是apache下的一个顶级开源项目，采用java开发，它是基于lucene的全文搜索服务器': 3, 'example\\solr是一个solrhome目录结构，如下：上图中“collection1”是一个solrcore（solr实例）目录，目录内容如下所示：说明：': 1, 'solr是一个独立的企业级搜索应用服务器，它对外提供类似于web-service的api接口': 1, 'solr与lucene不是竞争的关系，solr是基于lucene封装的，二者的索引库共用': 1, '是基于lucene的java搜索引擎服务器，solr是apache下的一个顶级开源项目，他可以独立运行在tomcat容器上，然后根据xml文档进行添加删除更新索引，solr只需要发送httpget请求，然后对solr返回xml，json': 1, '.1solr是lucene的封装体，所以索引功能特别好2.solr可以单独的部署在tomcat上，他可以提供服务，我们的业务系统只需要发送请求，接受相应就可以了，所以减低了业务系统的负载3.支持分布式集群，索引服务的容量和能力可以线性的扩展': 1, 'solr是一个可扩展的，可部署，搜索/存储引擎，优化搜索大量以文本为中心的数据': 1, '这就是为什么转移负载到一个外部的搜索服务器是一个不错的主意，apachesolr是一个流行的开源搜索服务器，它通过使用类似rest的httpapi，这就确保你能从几乎任何编程语言来使用solr': 1, 'solr是企业级的，快速的和高度可扩展的': 1}
crontab:::{'crond:crond的概念和crontab是不可分割的': 1, 'crontab是一个命令，常见于unix和类unix的操作系统之中，用于设置周期性被执行的指令': 1, '用crontab配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务': 1, '查看crontab服务是否已设置为开机启动，执行命令：': 1, '#*重点*#crontab配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务': 1, 'crontab-e配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务crontab-l//列出当前的所有调度任务crontab-l-ujp//列出用户jp的所有调度任务crontab-r//删除所有任务调度工作': 1, 'crontab是一个很方便的在unix/linux系统上定时(循环)执行某个任务的程序使用cron服务，用servicecrondstatus查看cron服务状态如果没有启动则servicecrondstart启动它，cron服务是一个定时执行的服务，可以通过crontab命令添加或者编辑需要定时执行的任务': 1}
nat:::{'从底层实现上讲,nat是工作在网络层的,直接对ip地址进行替换': 1, 'nat是一项神奇的技术，说它神奇在于它的出现几乎使ipv4起死回生': 1, 'basicnat是一种把一组ip地址映射成另一组ip地址的方法，映射的过程在ip中继设备上完成，对用户完全透明': 1, '1990年代中期，nat是作为一种解决ipv4地址短缺以避免保留ip地址困难的方案而流行起来的': 1}
sip:::{'•sip(sessioninitiationprotocol)，会话发起协议•sip是建立voip连接的ietf标准，ietf是全球互联网最具权威的技术': 1, 'sip是基于客户机/服务器结构的.基本分为用户代理和网络服务器,网络结构如图2所示.': 1, 'h.323第一版在呼叫建立时时延很大.第二版大大改进,而第三版则更好.sip在呼叫建立时非常类似于h.323第三版,然而,如果udp呼叫建立失败,则h.323第三版要好于sip,h.323第三版几乎同时建立一个udp的连接和一个tcp连接,它提供一个有效的机制,如果udp连接成功则关闭tcp连接;否则,立刻启用tcp.sip是顺序地操作udp和tcp,如果udp失败,则会增加呼叫建立时延.对于h.323如果网络质量比较好的情况下,tcp连接就浪费了.': 1, 'sip是一个应用层的控制协议，可以用来建立，修改，和终止多媒体会话，例如internet电话': 1}
vue:::{'vue是法语中视图的意思，vue.js是一个轻巧、高性能、可组件化的mvvm库，同时拥有非常容易上手的api': 1, 'antdesignvue是antdesign的vue实现，开发和服务于企业级后台产品': 1}
swift:::{'swift是基于一致性散列技术，通过计算可将对象均匀分布到虚拟空间的虚拟节点上，在增加或删除节点时可大大减少需移动的数据量；虚拟空间大小通常采用2的n次幂，便于进行高效的移位操作；然后通过独特的数据结构ring（环）再将虚拟节点映射到实际的物理存储设备上，完成寻址过程': 2, 'swift是用不到上面的数据库的': 1, 'main.swift是该服务器的门户入口，是一个典型的perfecttemplate模板程序': 1}
thriftserver:::{'sparkthriftserver是spark社区基于hiveserver2实现的一个thrift服务': 1, 'thriftserver是一个jdbc/odbc接口，用户可以通过jdbc/odbc连接thriftserver来访问sparksql的数据': 1, 'thriftserver是一个不同的用户之间可以共享数据，常服务sparkapplication是每次启动都要申请资源，是例行的': 1, 'thriftserver是主流的rpc框架，spark中已经嵌入了它，所以只需要启动它即可': 1, 'sparksql由core、catalyst、hive、hive-thriftserver组成thriftserver是一个jdbc/odbc接口，用户可以通过jdbc/odbc连接thriftserver来访问sparksql的数据': 1, 'thriftserver是长服务，而sparkapplication是例行的服务': 1}
selenium:::{'selenium是用于测试web应用程序用户界面(ui)的常用框架': 1, 'selenium是一个免费的(开源)自动化测试组件，适用于跨不同浏览器和平台的web应用程序': 1, '由于selenium是不同工具的集合，所以它也有不同的开发人员': 1, 'selenium是用来完成浏览器自动化相关的操作.可以通过代码的形式制定一些基于浏览器自动化的相关操作(行为动作),当代码执行后,浏览器就会自动触发相关的事件.但这并不能避免服务器的检测.': 1, '2.它支持对操作windows窗口，当你要从web上下载一些东西，自然此时就会弹出一个“下载框”，由于那个框框是windows窗口，selenium是处理不了的，所以必须通过第三方的脚本处理': 1, 'selenium简介一.selenium是什么': 1, 'selenium是throughtworks公司一个强大的开源web功能测试工具系列，本系列现在主要包括以下4款：': 1, 'selenium是thoughtworks专门为web应用程序编写的一个验收测试工具': 1, 'selenium是软件工程师、设计人员和测试人员的工具箱中又一个有用且重要的工具': 1, 'selenium是一个用于测试网站的自动化测试工具，支持各种浏览器包括chrome、firefox、safari等主流界面浏览器，同时也支持phantomjs无界面浏览器': 1, 'selenium是免费的开源功能测试工具，用于在多个浏览器和多个操作系统（平台）上测试web应用程序': 1, '尽管如此，由于其行为举止像人类一样自由，所以selenium是一种功能强大的刮网工具，与传统的刮网程序包相比，它具有最少的限制': 1, 'selenium是一个用于web应用程序自动化测试工具': 1, 'selenium是目前主流的用于web应用程序测试的工具，可以直接运行在浏览器中，就像真正的用户在操作一样': 1}
agentd:::{}
cron:::{'cron是linux系统下一个自动执行指定任务的程序.': 1, 'cron是一个linux下的定时执行工具，可以在无需人工干预的情况下运行作业': 3, '由于cron是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务:': 1, 'cron是unix中一个常见的工具，用来定期执行一些用户指定的任意任务': 1, 'cron是一个通用的工具，无论是管理员还是普通用户都可以用它来在系统上运行指定的命令，以及指定何时运行命令，这些指定运行的命令可以是定期垃圾回收，也可以是定期数据分析': 1, 'anacron是一个例外，它是crontab的一个补充，它尝试运行哪些因为服务器宕机而应该执行却没执行的任务': 1, 'cron服务是linux的内置服务，但它不会开机自动启动': 1, 'cron是服务名称，crond是后台进程，crontab则是定制好的计划任务表': 1, '查看cron服务是否起作用：': 1, 'cron服务是linux内置服务，默认不会开机自动启动': 1, '由于cron是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：': 1, 'tip：推荐一个小工具，可以验证你写的cron是不是正确的，也可以帮助你写出你需要的任何cron表达式：cron小工具': 1}
haproxy:::{'1.haproxy是一款提供高可用性、负载均衡以及基于tcp（第四层）和http（第七层）应用的代理软件；适用于负载大的web站点，这些站点通常又需要会话保持或七层处理': 1, 'haproxy是目前比较流行的一种群集调度工具，同类群集调度工具还有很多，比如：lvs和nginx': 1, 'haproxy是一个开源的、高性能的、基于tcp（第四层）和http（第七层）应用的负载均衡软件，借助haproxy可以快速、可靠地提供基于tcp和http应用的负载均衡解决方案': 1, 'ps-ef|grephaproxy或者netstat-ntpl|grephaproxy来检查haproxy是否启动成功': 1, '（1）haproxy是一款提供高可用性、负载均衡以及基于tcp（第四层）和http（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案': 1}
minion:::{'#backup_mode:minion#默认值：minion；当进行文件更新，修改操作时，备份文件的方式，minion是本地进行备份': 3, 'salt的esxiproxyminion是在salt的2015.8.4版本中添加进来的': 1, '确定saltminion是否应该运行预定的mine更新': 1, '当进行文件更新，修改，删除操作时，备份文件的方式，minion是本地进行备份': 1, '先查看salt-minion是不是和master的版本一致，查看发现是一致的，所以可以忽略': 1}
cassandra:::{'维基告诉我:cassandra是一个开源的分布式数据库管理系统通过大量商品服务器来处理大规模的数据信息提供没有单节点故障的高可用cassandra对客户跨中心提供很高的支持': 1, 'apachecassandra是一个开源的、分布式、无中心、弹性可扩展、高可用、容错、一致性可调、面向行的数据库，它基于amazondynamo的分布式设计和googlebigtable的数据模型，由facebook创建，在一些最流行的网站中得到应用': 1, 'cassandra是分布式的，这意味着它可以运行在多台机器上，并呈现给用户一个一致的整体': 1, '事实上，在一个节点上运行cassandra是没啥用的，虽然我们可以这么做，并且这可以帮助我们了解它的工作机制，但是你很快就会意识到，需要多个节点才能真正了解cassandra的强大之处': 1, '但cassandra是无中心的，也就是说每个节点都是一样的': 1, '综上所述，cassandra是分布式、无中心的，它不会有单点失效，所以支持高可用性': 1, '考虑一下你的应用的读写比例，cassandra是为优异的写吞吐量而特别优化的': 1, '答案是肯定的，cassandra是线性扩展，可以根据前台数据流量轻松确定集群规模，处理能力不够': 1, '所以说cassandra是被证明过的': 1, '由于cassandra是一个无主系统，环中的所有节点都是相同的;一个同质的系统': 1, 'cassandra是您理想的数据库原因有很多': 1, '如你所见，选择cassandra是一个十分明智的选择': 1, 'cassandra是分布式系统，只需要增加节点就可以扩充存储空间；众所周知，mysql的单表数据量是有瓶颈的，当数据量到达一定级别，就需要考虑分库分表或者分区等等': 1, '需要扩展的部署结构：cassandra是面向分布式的设计，这让它可以灵活地水平扩展，以在运维阶段满足你的需求，而不必考虑“将数据迁往更高性能的服务器”这样的问题': 1, 'apachecassandra是一种主要的nosql分布式数据库管理系统，它支撑着如今的许多现代商务应用系统，它提供了持续可用性、高扩展性和高性能、强安全性和操作简单性，同时降低了总体拥有成本': 1, 'apachecassandra是一套开源分布式nosql数据库系统': 1, 'cassandra是最终一致性（弱一致性）：成功写入后，读取的并不一定是最新数据，但过一段时间（毫秒级别，跨机房时间会更长）所有副本才会达成一致': 1, 'cassandra是最终一致性原因：优化写入性能，支持one、qurum、all等': 1, 'datastaxjavadriverforapachecassandra是apachecassandra的一个java驱动': 1, 'cassandra是有facebook开发并开源的一个nosql分布式存储': 1, 'cassandra是一套开源分布式nosql数据库，采用无中心对等分布式模型，具备高可用和高伸展性特点': 1, 'cassandra是不分主从节点的，也就是说，集群中每一个节点的地位都是相同的': 1, 'cassandra是一个分区的面向行存储的数据库': 1, '如前问所说，cassandra是按照name而不是value进行排序': 1}
saltstack:::{'saltstack是用python语音编写相当于设备是轻量级别的': 1, 'saltstack是开源的通过python可以自己写模块': 1, '由于saltstack是一种基于c/s架构的服务模式，可以简单地理解为如果我们想使用saltstack就需要在现有的环境下引入与维护一套c/s架构': 1, 'saltstack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，可以理解为简化版的puppet，它基于python语言实现，结合轻量级消息队列（zeromq）与python第三方模块构建': 1, 'saltstack是基于python开发的c/s架构的一款批量管理工具，底层采用动态的连接总线（zeromq消息队列pub/sub方式通信），使用ssl证书签发的方式进行认证管理，使其可以用于编配,远程执行,配置管理等等': 1, 'saltstack是基于c/s服务模式，在该架构中，服务器端master，客户端minion': 1, 'saltstack是一个开源的、新的基础平台管理工具，使用python语言开发，同时提供restapi方便二次开发以及和其他运维管理系统进行集成': 1, 'saltstack是一个服务器基础设施管理工具，它具有配置管理、远程执行、监控等功能': 1, 'saltstack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，基于python语言实现，结合轻量级消息队列（zeromq）与python第三方模块（pyzmq、pycrypto、pyjinjia2、python-msgpack和pyyaml等）构建': 1, '通过部署saltstack，我们可以在成千万台服务器上做到批量执行命令，根据不同业务进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，saltstack是运维人员提高工作效率、规范业务配置与操作的利器': 1, 'saltstack是一种自动化运维工具': 1, '通过部署saltstack环境，我们可以在成千上万台服务器上做到批量执行命令，根据不同业务特性进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，saltstack是运维人员提高工作效率、规范业务配置与操作的利器': 2, 'saltstack是基于python开发的一套c/s架构配置管理工具使用ssl证书签方的方式进行认证管理底层使用zeromq消息队列pub/sub方式通信–号称世界上最快的消息队列zeromq能快速在成千上万台主机上进行各种操作–采用rsakey方式确认身份': 1, 'saltstack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，一般可以理解为简化版的puppet和加强版的func': 1}
broker:::{'这里面存在一个问题，很难确定broker是挂掉了，还是仅仅只是短暂性的故障': 2, 'runtimebroker是什么进程,能禁用runtimebroker.exe进程么?今天看到网上有两位朋友因为这个进程，打起了口水仗，都是为别人好，这又何必呢?不过runtimebroker.exe进程确实有点特殊，如果我们打开win8或者win8.1系统，偶尔会发现这个进程，可能由于误操作，这个进程会占用很多内存，一起部分朋友的惊慌，下面我们力图详细的为朋友解释下这个进程，希望能解决您的疑惑!': 1, '一、runtimebroker是什么进程': 1, 'runtimebroker是什么进程,能禁用runtimebroker.exe进程么的内容，希望对您有所帮助!': 1, 'tssessionbroker是windowsserver2008中的新特点，是用于终端服务的microsoftnetworkloadbalancing更简单的一个替代': 1, 'tssessionbroker是提供下列功能的角色服务：': 1, 'broker是activemq的一个实例': 1, '而broker是activemq的一个简易实现，我们只需要在代码中启动broker（用跑代码的方式启动activemq），从而实现嵌入式的activemq': 1, 'broker是druid中一种类型的节点，在分布式集群部署环境中，它用来路由查询': 1, '返回一个标志，指明broker是否获取了zk中所有segment的信息': 1, '通过这个接口可以知道在比如重启的场景下，broker是否能接受查询请求': 1, 'springcloudopenservicebroker是一个用于构建实现openservicebrokerapi的springboot应用程序的框架': 1, '如果当前的broker是master，那么其brokerid必须是0': 1, '另外servicebroker是可以在同一个sqlserver实例上两个数据库间进行，也可以在两个sqlserver实例间进行(当然这个的配置会比': 1, '修改trustworth设置和检查servicebroker是否开启的脚本：': 1, '/*查看当前数据库的broker是否启用和它的guid(用来把唯一标志消息数据库)*/selectis_broker_enabled,service_broker_guidfromsys.databaseswheredatabase_id=db_id()': 1}
lvs:::{'在linux下用lvs和ipvsadm做web负载均衡,lvs是在linux操作系统基础上建立虚拟服务器，实现服务节点之间的负载均衡': 1, 'lvs是linuxvirtualserver的缩写，为linux虚拟服务器，是一个虚拟的服务器集群系统': 1, 'lvs是linuxvirtualserver的简写，意即linux虚拟服务器，是一个虚拟的服务器集群系统': 2, 'lvs是linuxvirtualserver的简称，也就是linux虚拟服务器,是一个由章文嵩博士发起的自由软件项目，它的官方站点是www.linuxvirtualserver.org': 1, '说明：由于check_lvs是要调用ipvsadm命令来获取lvs状态的，而ipvsadm命令是只能以root用户来运行的,所以需要将nagios用户设置成可以无需密码直接su成root，这样就能以nagios用户运行命令sudo/usr/lib/nagios/plugins/check_lvs': 1, '使用背景：在lvs中，后端服务器宕机，lvs是不对其进行操作的，也就是只要后端服务器的mac端有回应，代理服务器就会认为此服务端口是开启的，对其进行操作，但是如果端口服务关闭，就会出错，所以对其进行优化': 1, 'lvs是linux系统上的一种机制，类似于iptables，其相关属性也是通过(ipvsadm)与iptables命令类似的方式定义的,': 1, 'lvs是工作于linux系统内核空间，通过内核来提供工作，其工作空间在iptables的input链上，当客户端请求到达input链上以后，通过lvs规则的验证，如果是内��请求，发送至用户空间，如果发现是集群，将此请求发送至postrouting链，并交给后端应用程序服务器来响应用户的请求': 1, '常用的负载均衡开源软件有：nginx、lvs、keepalived商业的硬件负载设备：f5、netscale1、lb、lvs介绍lb集群是loadbalance集群的简写，翻译成中文就是负载均衡集群；lvs是一个实现负载均衡集群的开源软件项目；lvs架构从逻辑上可分为调度层(director)、server集群层(realserver)和共享存储层；': 1, 'lvs是国内的章文嵩博士的大作，比nginx被广泛接受还要早7年，并且已经被红帽作为了系统内置软件，可谓很牛了': 1, 'lvs是linuxvirtualserver的简称，也就是linux虚拟服务器，是一个由章文嵩博士发起的自由软件项目，官方站点是：http://www.linuxvirtualserver.org': 1, 'lvs功能详解1.1lvs（linuxvirtualserver）介绍lvs是linuxvirtualserver的简写（也叫做ipvs），意即linux虚拟服务器，是一个虚拟的服务器集群系统，可以在unix/linux平台下实现负载均衡集群功能': 1, 'lvs是由章文嵩博士开源的负载均衡系统，它现在是标准内核的一部分，它具备可靠性、高性能、可扩展性和可操作性，从而以低廉的成本实现最优的性能': 1, 'lvs是基于linux内核中netfilter框架实现的负载均衡系统，所以要学习lvs之前必须要先简单了解netfilter基本工作原理': 1, 'lvs是基于netfilter框架，主要工作于input链上，在input上注册ip_vs_inhook函数，进行ipvs主流程，大概原理如图所示：': 1, 'lvs是linuxvirtualserver的简称，也就是linux虚拟服务器': 1, '什么是lvslvs是linuxvirtualserver的简写，意即linux虚拟服务器，是一个虚拟的服务器集群系统': 1, '这说明master和backup的lvs是会独立的对rs进行health-check的': 1, '当然因为lvs是会持续检查rs的健康状态的，所以当web2再次启动http服务后，它会被重新加如到ipvsadm的rs列表中': 1}
jenkins:::{'jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码的编译、打包、部署）的基于web界面的平台': 1, 'jenkins是一个可扩展的持续集成引擎': 1, 'jenkins是一个开源软件项目，是基于java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能': 1, 'jenkins是一个开源软件项目，是基于java开发的广泛用于持续构建的可视化web工具，就是各种项目的的“自动化”编译、打包、分发部署，将传统编译、打包、上传、部署到tomcat中的过程交由jenkins，jenkins通过给定的代码地址，将代码拉取到jenkins宿主机上，进行编译、打包和发布到web容器中': 1, '使用ntsysv查看jenkins服务是否已启动': 1, '查看jenkins是否开,地址栏输入http://localhost:8080/,会默认进入jenkins的页面,否则无法连接服务器': 1}
cdh:::{'cdh是cloudera的100％开放源代码平台发行版，包括apachehadoop，是专门为满足企业需求而构建的': 1, 'cdh是你一个很好地选择': 1}
www:::{'www是internet的多媒体信息查询工具，是internet上近年才发展起来的服务，也是发展最快和目前用的最广泛的服务': 1, 'www是worldwideweb（环球信息网）的缩写，也可以简称为web，中文名字为“万维网”': 1}
cvstrac:::{'cvstracv1.1.2中文版build20031204====================================cnpack开发组与月共舞http://www.cnvcl.org1.cvstrac简介--------------cvstrac是与cvs搭配使用的任务管理和错误跟踪工具，基于web方式访问': 1, '关于cvstraccvstrac是一个开放源代码、与cvs搭配使用的任务管理和错误跟踪工具，基于web方式访问，非常适合网上分布式小团队协同开发使用': 1}
memcached:::{'首先来看下线程模型，redis是单进程单线程的模式，而memcached是单进程多线程，这肯定memcached性能比redis要好那么一点，这样的差距反应在qps/tps的比较中，不过这个差别也不是特别的大': 1, 'memcached是一个用c语言开发的分布式的缓存，内部基于类似hashmap的结构': 1, 'memcached是以key-value的方式进行数据存储的，': 1, 'memcached是高性能的分布式缓存服务器，用来集中缓存数据库查询结果，减少数据库访问次数，以提高动态web应用的响应速度': 1, '进入到服务器管理-服务中看memcached是否存在，并将其启动': 1, '1.memcached是原子的吗': 1, 'memcached是一个开源的，高性能的内bai存绶存软件，从名称上看dumem就是内存的zhi意思，而cache就是缓存的意思': 1, 'memcached是以livejournal旗下dangainteractive公司的bradfitzpatric为首开发的一款软件': 1, 'memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）': 1, '1、memcached是高性能的分布式内存缓存服务器': 1, 'memcached是高性能的分布式内存缓存服务器，通过缓存数据库查询结果，减少数据库访问次数，以提高动态web应用的速度和可扩展性': 1, '查看memcached服务是否在chkconfig管理列表：': 1, '##网络io模型\u2003memcached是多线程，非阻塞io复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写io，网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cachecoherency和锁的问题，比如：memcached最常用的stats命令，实际memcached所有操作都要对这个全局变量加锁，进行技术等工作，带来了性能损耗': 1, '##集群管理不同\u2003memcached是全内存的数据缓冲系统，redis虽然支持数据的持久化，但是全内存毕竟才是其高性能的本质': 1}
activemq:::{'activemq是apache流行、强大的开源消息传递和集成模式服务器，它完全支持jms1.1(严格实现“点对点”和“发布/订阅”两种消息模型)和j2ee1.4': 1, '官网:http://activemq.apache.org/apacheactivemq是最流行和最强大的开源消息传递和集成模式服务器': 1, 'apacheactivemq是在apache2.0许可下发布的': 1, 'activemq是什么?': 1, 'activemq是apache出品，最流行的，能力强劲的开源消息总线': 3, 'activemq是一个完全支持jms1.1和j2ee1.4规范的jmsprovider实现，尽管jms规范出台已经是很久的事情了，但是jms在当今的j2ee应用中间仍然扮演着特殊的地位': 2, 'activemq是一个完全支持jms1.1和j2ee1.4规范的jmsprovider实现,尽管jms规范出台已经是很久的事情了,但是jms在当今的j2ee应用中间仍然扮演着特殊的地位': 1, '另外不得不说的是，activemq是遵从jms规范的消息中间件，那么什么是jms规范呢': 1}
nimbus:::{'nimbus是storm集群的"控制器"，是storm集群的重要组成部分': 1, 'nimbusserver,首先从启动命令开始,同样是使用storm命令"stormnimbus”来启动看下源码,此处和上面client不同,jvmtype="-server",最终调用"backtype.storm.daemon.nimbus"的mainnimbus是用clojure实现的,但是clojure是基于jvm的,所以在最终发布的时候会产生nimbus.class,所以在用户使用的时候完全可以不知道clojure,看上去所有都是java.clojure只是用于提高开发效率而已.': 2, 'nimbus的main,最终会调到launch-server!,conf参数是调用read-storm-config读出的配置参数,而nimbus是inimbus接口(backtype.storm.scheduler.inimbus)的实现,可以参考standalone-nimbus.storm-core/backtype/storm/scheduler/inimbus.java': 2, 'nimbus是集群的总管,只有一台.而supervisor监督者有多个,对于master-slave的架构,slave要定期发送心跳信息给master.一个监督者也有多个worker,所以worker也要发送心跳信息给supervisor.supervisor和worker的心跳信息都保存在zk节点上.但是注意supervisor从nimbus下载的topology信息和已经处理完成的worker信息是保存在supervisor的本地目录中.': 1}
oned:::{'（2）oned是opennebula的核心服务进程，包括虚拟化管理模块和任务调度模块': 1, 'oned是opennebula的核心服务进程，包括虚拟化管理模块和任务调度模块': 1}
metircs:::{}
impalad:::{'impalad是最核心组件，负责接收用户查询请求(odbc协议)，生成查询计划，协调其他impalad执行查询计划，并汇总查询结果返回给用户': 2, '但从整体来看，impala是能很好的容错，所有的impalad是对等的结构，用户可以向任何一个impalad提交查询，如果一个impalad失效，其上正在运行的所有query都将失败，但用户可以重新提交查询由其它impalad代替执行，不会影响服务': 4, '同时impalad也与statestore保持连接，用于确定哪个impalad是健康和可以接受新的工作': 4, 'impalad是核心进程，负责接收查询请求并向多个数据节点分发任务': 1}
tracker:::{'bt服务器称为tracker，准确地说，tracker是指运行于服务器上的一个程序，这个程序能够追踪到底有多少人同时在下载同一个文件': 1, 'bt下载对dht和tracker是非常依赖，然而网上有不少的tracker列表项目，每次更新都要全部添加一遍，显然很麻烦': 1}
sunstone:::{}
one:::{'2016年，capitalone是美国第三大信用卡发卡行和第四大汽车贷款机构': 1, 'componentone是一款专注于企业应用高性能开发的.net全功能控件套包，包含300余种控件，支持7大平台，涵盖7大功能模块': 1, '输入rclone--version，可查看rclone是否成功安装': 1}
eucalyptus:::{'在四大开源iaas平台中，eucalyptus一直与和aws的iaas平台保持高度兼容而以众不同，eucalyptus是aws承认的唯一和aws高度兼容的私有云和混合云平台.': 1, 'eucalyptus是amazonec2的一个开源实现，它与ec2的商业服务接口兼容': 2, 'eucalyptus是一个面向研究社区的软件框架，它不同于其他的iaas云计算系统，能够在已有的常用资源上进行部署，eucalyptus采用模块化的设计，它的组件可以进行替换和升级，为研究人员提供了一个进行云计算研究的很好的平台': 2, 'eucalyptus是一个面向研究的开源云计算系统，为了满足众多研究者的上述需求，采用了独特的设计[22][30]：': 2, '因此，eucalyptus是iaas中一个比较独特的例子，也是未来的多集群开源设计的先驱': 2, '我所用的eucalyptus是免费版，缺少很多企业版的功能': 1}
hue:::{'hue是一个开源的apachehadoopui系统，最早是由clouderadesktop演化而来，由cloudera贡献给开源社区，它是基于pythonweb框架django实现的': 2, 'hue是一个用于开发和操作hadoop的图形化界面': 1, '3、启动hue是报错': 1, 'hue是一个开源的apachehadoopui系统，由clouderadesktop演化而来，最后cloudera公司将其贡献给apache基金会的hadoop社区，用pythonweb框架django实现的': 1, 'hue,即hadoopuserexperience.hue是一个开源的apachehadoopui系统，由clouderadesktop演化而来，最后cloudera公司将其贡献给apache基金会的hadoop社区，它是基于pythonweb框架django实现的': 1, '总结:hue是一个友好的界面集成框架，可以集成我们各种大数据框架，一个界面就可以做到查看以及执行所有的框架.hue提供的这些功能相比hadoop生态各组件提供的界面更加友好，但是一些需要debug的场景可能还是需要使用原生系统才能更加深入的找到错误的原因.hue中查看oozieworkflow时，也可以很方便的看到整个workflow的dag图，不过在最新版本中已经将dag图去掉了，只能看到workflow中的action列表和他们之间的跳转关系，想要看dag图的仍然可以使用oozie原生的界面系统查看': 1, 'hue是cdh专门的一套web管理器，它包括3个部分hueui，hueserver，huedb': 1, 'hue=hadoopuserexperiencehue是一个开源的apachehadoopui系统，由clouderadesktop演化而来，最后cloudera公司将其贡献给apache基金会的hadoop社区，它是基于pythonweb框架django实现的': 1, '添加如下配置，配置hadoop代理用户hadoop.proxyuser.${user}.hosts，第一个user是安装hadoop的user，或者说可以访问hdfs的user，从centos1:50070-》utilities-》browsethefilesystem可以看到的owner信息，第二个hue是给hue这样的权限，第三个是给httpfs这样的权限：': 1, '1、hue是什么': 1}
ldirectord:::{'ldirectord是heartbeat的一个插件，在安装heartbeat时，默认已经安装了此插件': 1, 'lldirectord是专门为lvs监控而编写的，用来监控lvs架构中服务器池（serverpool）的服务器状态': 1, '其中第十五章描述如何建立一个高可用、企业级的lvs-dr集群，本文说的是ldirectord是如何监视集群节点（真实服务器）的': 1, '2ldirectord是如何监视集群节点（真实服务器）的': 1, '前面讲了如何建立一个高可用、企业级的lvs-dr集群，本文说的是ldirectord是如何监视集群节点（真实服务器），并从集群中自动移除节点': 1, '##ldirectord是与keepalived之间是冲突的，所以需要关闭ldirectord在进行keepalived的实验的时候': 1, 'ldirectord是一个守护进程，用于监视和管理负载平衡虚拟服务器的lvs集群中的真实服务器': 1}
internet:::{'bytheway，internet是一个复杂的系统，想实现对系统很好的有序的控制，我们制定了协议': 1, 'internet服务是全球互联网络，为用户提供互联网服务，访问互联网，获取需要的信息，internet提供的主要服务有telnet,email,www,bbs,ftp等五种，下面将逐一了解这五种服务': 1}
puppet:::{'puppet是一种配置管理工具，可帮助系统管理员自动执行服务器基础架构的配置和管理': 1, 'puppet是一种跨平台、c/s架构的集中配置管理系统，可以用于管理linux、windows、unix、mac等平台下的用户、软件包、文件、服务和cron任务等，并且可以妥善处理资源之间的依赖关系': 1, 'puppet是一个跨平台的集中化配置管理系统，它使用自有的描述语言，可管理配置文件、用户、cron定时任务、软件包、系统服务等，puppet把这些统称为“资源”': 1, 'puppet是基于ruby语言编写的，故需要先安装ruby：': 1, '本人所用puppet是以客户端-服务端（c/s）的方式运行，故需要分别在两台服务器上安装客户端和服务端': 1, 'puppet是通过主机名来识别各客户端的连接的，故需要配置好主机名，要有一定的规律，后面才好用正则表达式匹配': 1, 'puppet是一种linux、unix、windows平台的集中配置管理系统，使用自有的puppet描述语言，可管理配置文件、用户、cron任务、软件包、系统服务等': 2, 'puppet是一种linux、unix、windows平台的集中配置管理系统，使用puppet自带的描述语言，可管理配置文件、用户、cron任务、软件包、系统服务等': 1, 'puppet是用ruby语言写的，所以要安装ruby环境，': 1, 'puppet是基于客户端和服务器端的c/s架构，基于ruby开发': 1, '既然puppet是c/s架构的，所以还得在每台服务器上部署客户端，但是500多台服务器，不可能手工的一台一台去部署，自然通过脚本的方式': 1}
jms:::{'jms是一系列的接口及相关语义的集合，通过这些接口和和其中的方法，jms客户端如何去访问消息系统，完成创建、发送、接收和读取企业消息系统中消息': 1, 'jms是一个由as提供的message服务': 1, 'jms是一种与厂商无关的api，用来访问收发系统消息，它类似于jdbc（javadatabaseconnectivity）': 1, 'jms是一个用于开发和集成企业应用程序的重要的工具': 1, 'jms是java的消息服务，jms的客户端之间可以通过jms服务进行异步的消息传输': 1, '一、jms消息服务介绍什么是jms:java消息服务（javamessageservice）,java平台中关于面向消息中间件的接口jms是一种与厂商无关的api,用来访问消息收发系统消息，它类似于jdbc(javadatabaseconnectivity).这里，jdbc是可以用来访问许多不同关系数据库的api使用场景：核心应用：解耦：订单系统——>物流系统异步：用户注册——>发送邮件，初始化信息削峰：秒杀、日志处理跨平台、多语言分布式事务、最终一致性rpc调用上下游对接，数据源变动——>通知下级二、消息中间件常见概念和编程模型常见概念jmx提供者：连接面向消息中间件的，jms接口的一个实现，rocketmq、rabbitmq、activemq、kafka等jms生产者（messageproducer）：生产消息的服务jms消费者（messageconsumer）:消费消息的服务jms消息：数据对象jms队列：存储消费消息的区域jms主题：一种支持发送消息给多个订阅者的机制jms消息通常有两种类型：点对点（point-to-point）、发布/订阅（publish/subscribe）基础编程模型mq中需要一些常用的类connectionfactory:连接工厂，jms用它创建连接connection:jms客户端到jmsprovider的连接session:一个发送或接收消息的线程destination:消息的目的地，消息发送给谁messageconsumer/messageproducer:消息消费者，消息生产者三、主流消息队列和技术选型对比当下主流的消息队列和选择问题主流消息队列和技术选型消息队列的模型:': 1, '2，jms是一种与厂商无关的api，用来访问消息收发系统消息，它类似于jdbc(javadatabaseconnectivity)': 1, 'jms是一种与厂商无关的api，用来访问消息收发系统消息': 2}
rocketmq:::{'rocketmq是一个轻量级，低延时，高可用，支持亿级消息处理的消息中间件': 1, '#一、rocketmq简介##1.1、介绍rocketmq是一款分布式、队列模型的消息中间件，由metaq3.x版本改名而来，rocketmq并不遵循包括jms规范在内的任何规范，但是参考了各种规范不同类产品的设计思想，自己有一套自定义的机制，简单来说就是使用订阅主题的方式去发送和接收任务，但是支持集群和广播两种消息模式': 1, 'rocketmq是这样做的，一个topic绑定的是一组queue，这样每个queue分摊部分压力，性能就上去了': 1, '消息那么多，项目都重启无数次了，rocketmq是如何记录消息消费到什么地方了呢': 1, 'rocketmq是一个低延时、高可靠、可伸缩、易于使用的分布式消息中间件，是由阿里巴巴开源捐献给apache的顶级项目': 1, '消息队列rocketmq是阿里巴巴集团自主研发的专业消息中间件': 1, '消息队列rocketmq是阿里云正式商用的产品，目前在阿里云多个地域（region）提供了高可用消息云服务，单个域内采用多机房部署，可用性极高，即使整个机房都不可用，仍然可以为应用提供消息发布服务，产品稳定性及可用性完全按照阿里巴巴内部标准来实施，无单点': 1, '1、rocketmq是什么': 1, 'rocketmq是一款分布式、队列模型的消息中间件，具有以下特点：': 1, '在开发网络游戏的时候，netty也常用于游戏服务器或网关的通信层框架，所以，可以通过学习rocketmq是如何使用netty框架，从中借鉴一此应用技巧': 1, 'apacherocketmq是一个采用java语言开发的分布式的消息系统，由阿里巴巴团队开发，与2016年底贡献给apache，成为apache的一个顶级项目': 1}
zookkeeper:::{}
sqoop:::{'apachesqoop是在hadoop生态体系和rdbms体系之间传送数据的一种工具，apache软件基金会提供': 1, 'sqoop是传统数据库与hadoop之间数据同步的工具，它是hadoop发展到一定程度的必然产物，它主要解决的是传统数据库和hadoop之间数据的迁移问题': 1, 'sqoop是连接传统关系型数据库和hadoop的桥梁': 1, 'sqoop是hadoop生态中与hadoop关系很紧密的一个组件，所以在cdh中无序下载多余的包，可以直接进行集成': 1, 'sqoop是apache旗下一款“hadoop和关系数据库服务器之间传送数据”的工具': 2, 'sqoop是一款开源的工具，主要用于在hadoop(hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如：mysql,oracle,postgres等）中的数据导进到hadoop的hdfs中，也可以将hdfs的数据导进到关系型数据库中': 1, '就是说sqoop是一款用来在hadoop（hive）和关系型数据库之间传输数据的工具': 1, 'sqoop是一款开源的工具，主要用于在hadoop(hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（如mysql，oracle，postgres等）中的数据导进到hadoop的hdfs中，也可以将hdfs的数据导进到关系型数据库中': 1, '测试sqoop是否能够成功连接数据库': 1, '一sqoopsqoop是一款开源的工具，主要用于在hadoop(hive)与传统的数据库(mysql、postgresql...)间进行数据的传递，可以将一个关系型数据库（例如：mysql,oracle,postgresql等）中的数据导进到hadoop的hdfs中，也可以将hdfs的数据导进到关系型数据库中': 1, '在sqoop服务是分布式服务，在7台机器都有，虽然连接数据库的脚本在81.81上，但是真实连接mysql的服务器可能是7台中的任意一台，所以需要把7台机器全部放开，最后问题解决': 1, 'sqoop是通过一个mapreduce作业从数据库中导入一个表，这个作业从表中抽取一行行记录，然后将记录写入hdfs': 1, '1、sqoop是apache旗下一款“hadoop和关系数据库服务器之间传送数据”的工具': 1, 'sqoop是apache基础提供的一种工具，在大数据世界中通常用于异构关系数据库（rdbms）和hadoop分布式文件系统（hdfs）之间的导入-导出数百万条记录': 1, '4.sqoop是批处理类型的任务，不是常驻服务，不需要像web服务一样常驻运行，在需要的时候提交任务就可以完成数据的导入导出': 1, '5.sqoop是使用命令行进行任务的提交，提供类似于shell的脚本的sqopp命令，提交方式很简便': 1, 'sqoop是怎么做的呢，它其实是依赖mapreduce的计算框架，将数据导入并行化，采用分而治之的思想，每个map只处理一部分数据，然后由reduce将map的中间结果聚合起来': 1, 'sqoop是基于mapreduce框架的数据同步工具，启用多个map进行数据的并发导入和导出': 1, 'sqoop是apache旗下一款“hadoop和关系数据库服务器之间传送数据”的工具，本质还是一个命令行工具，核心功能就是导入和导出：导入数据：mysql导入数据到hadoop的hdfs、hive、hbase等数据存储系统导出数据：从hadoop的文件系统中导出数据到关系数据库mysql等': 1}
metrics:::{'metrics是个很好的选择': 1, 'metrics是一个给java服务的各项指标提供度量工具的包，在java代码中嵌入metrics代码，可以方便的对业务代码的各个指标进行监控，同时，metrics能够很好的跟ganlia、graphite结合，方便的提供图形化接口': 1, 'piggymetrics是github上的一个springcloud应用项目，star数目3400多': 1}
cloudera:::{}
impala:::{'impala是hadoop上交互式mppsql引擎，也是目前性能最好的开源sql-on-hadoop方案': 1, 'impala是一款针对hdfs和hbase中的pb级别数据进行交互式实时查询工具': 2, 'impala是通过hive的metastore服务来访问和操作hive的元数据，但是hive对表进行创建删除修改等操作，impala是无法⾃动识别到hive中元数据的变更情况的，如果想让impala识别到hive元数据的变化，所以需要进入impala-shell之后⾸先要做的操作就是执行invalidatemetadata,该命令会将所有的impala的元数据失效并重新从元数据库同步元数据信息': 2, 'impala是⼀个分布式，⼤规模并行处理(mpp)数据库引擎，它包括多个进程': 2, 'hadoop、hive是否正常服务并且配置好，是决定impala是否启动成功并使用的前提': 3, '我这里要做的内容是，对比一下impala和hive在执行mapreduce任务的耗时（impala是完全基于内存的，所以执行的速度比较快），看来是没有办法实验了': 1, 'impala是hive的子集，impala的唯一的优点是，完全基于内存计算速度比较快，同时impala要求的硬件尤其是内存比较高': 1, '在hive上面创建的是外部表，hive和impala是无缝连的，现在将hive与hbase进行整合后，间接的相当于impala和hbase数据库是连接起来的': 1, 'impala是cloudera提供的一款高效率的sql查询工具，提供实时的查询效果，官方测试性能比hive快10到100倍，其sql查询比sparksql还要更加快速，号称是当前大数据领域最快的查询sql工具': 1, 'impala是参照谷歌的新三篇论文（caffeine–网络搜索引擎、pregel–分布式图计算、dremel–交互式分析工具）当中的dremel实现而来，其中旧三篇论文分别是（bigtable，gfs，mapreduce）分别对应我们即将学的hbase和已经学过的hdfs以及mapreduce': 2, 'impala是基于hive并使用内存进行计算，兼顾数据仓库，具有实时，批处理，多并发等优点': 2, 'impala是基于hive的大数据分析查询引擎，直接使用hive的元数据库metadata，意味着impala元数据都存储在hive的metastore当中，并且impala兼容hive的绝大多数sql语法': 2, 'impala是一款开源、与hadoop高度集成，灵活可扩展的查询分析引擎，目标是基于sql提供高并发的即席查询': 1, 'impala是标准的mpp架构，massively-parallelqueryexecutionengine，支持在上百台机器的hadoop集群上执行快速查询': 1, '在mpp架构中一个比较大的挑战就是如何在上百个节点中进行协同工作，同步集群的元数据，impala是一种p2p的架构设计，即没有主从的概念，每个节点都可以接收或者执行查询请求，因此所有的节点需要及时同步更新最新的元数据信息以及节点状态': 1, 'impala是建立在hadoop生态圈的交互式sql解析引擎，impala的sql语法与hive高度兼容，并且提供标准的odbc和jdbc接口': 2, 'impala是典型的内存性数据查询引擎，其他的内存型数据查询引擎有很多，比如sparksql、doris等': 1, 'impala是cloudera公司的产物，最简便的方式是直接安装cdh集群一键安装impala，这里不赘述': 1, '由于我们impala是从cdh的包中取出来的，impala安装目录下的包中，很多依赖的包默认是指向cdh版本的hadoop、hive、habse等的': 1, 'impala是cloudera提供的一款高效率的sql查询工具，提供实时的查询效果，官方测试性能比hive快10到100倍，其sql查询比sparksql还要更加快速，号称是当前大数据领域最快的查询sql工具，': 2, 'impala是用于处理存储在hadoop集群中的大量数据的mpp（大规模并行处理）sql查询引擎': 1, '换句话说，impala是性能最高的sql引擎（提供类似rdbms的体验），它提供了访问存储在hadoop分布式文件系统中的数据的最快方法': 1, 'impala是一个管理，分析存储在hadoop上的数据的工具': 2, 'impala是使用c++开发的': 2, 'impala是在hadoop集群中的许多系统上运行的mpp（大规模并行处理）查询执行引擎': 1, 'impala是cloudera在受到google的dremel启发下开发的实时交互sql大数据查询工具（实时sql查询引擎impala），impala没有再使用缓慢的hive+mapreduce批处理，而是通过使用与商用并行关系数据库中类似的分布式查询引擎（由queryplanner、querycoordinator和queryexecengine三部分组成），可以直接从hdfs或hbase中用select、join和统计函数查询数据，从而大大降低了延迟': 1, '但从整体来看，impala是能很好的容错，所有的impalad是对等的结构，用户可以向任何一个impalad提交查询，如果一个impalad失效，其上正在运行的所有query都将失败，但用户可以重新提交查询由其它impalad代替执行，不会影响服务': 1, 'impala是一个架构于hadoop之上的全新、开源mpp查询引擎，提供低延迟、高并发的以读为主的查询': 1, '基于这些特点，impala是cdh平台首选的pb级大数据实时查询分析引擎': 1}
storage:::{'sessionstorage和localstorage是html5webstorageapi提供的，可以方便的在web请求之间保存数据': 1, 'localstorage是用来做永久性存储的': 1, 'sessionstorage是用来做临时性存储的': 1, 'sessionstorage是在同源的同窗口（或tab）中，始终存在的数据': 1, 'googlestorage是一个构建在google的存储和网络设备上的restful云服务，开发者可以非常容易的使用restfulapi将他们的应用程序连接到googlestorage，这些数据将保存在全美的若干机房，所以将十分快速可靠': 1, 'azurestorage是微软azure云提供的云端存储解决方案，当前支持的存储类型有blob、queue、file和table': 2, 'azureblobstorage是用来存放大量的像文本、图片、视频等非结构化数据的存储服务': 1, 'azurefilestorage是一个通过servermessageblock(smb)协议提供云端文件共享的服务': 1, 'azurequeuestorage是一个用来存储大量消息的存储服务，和其他的storage一样，这些消息可以在任何地方通过http/https访问': 1, 'tablestorage是在云端存储结构化nosql数据的服务': 1, '注意:fusionstorage是华为的seversan产品': 1}
opennebula:::{'opennebula是一个简单但功能强大且灵活的交钥匙式开源解决方案，用于基于vmware，kvm，lxd和firecracker构建私有云并管理数据中心虚拟化': 1, 'opennebula是一款为云计算而打造的开源工具箱': 3, 'opennebula是一个开源项目，提供一个简单但功能丰富、灵活的解决方案来建立和管理企业云和虚拟化数据中心': 1, 'opennebula是专门为云计算打造的开源系统，用户可以使用xen、kvm、vmware等虚拟化软件一起打造企业云': 3}
flume:::{'flume是由cloudera软件公司产出的可分布式日志收集系统，后与2009年被捐赠了apache软件基金会，为hadoop相关组件之一': 2, 'apacheflume是一个从可以收集例如日志，事件等数据资源，并将这些数量庞大的数据从各项数据资源中集中起来存储的工具/服务': 1, 'flume是一个分布式': 1, '既然flume是java项目，那么最终还是通过java.exe运行，那么只要找到这条命令，就有办法注册成服务': 1, '可以看到flume是使用window的powershell.exe命令行运行的，但是经过测试，注册成服务后不能启动powershell.exe进程，个人感觉是权限问题，从事件查询器中可以看到403、600等错误代码，没有深究，回到使用java.exe运行的思路': 1, 'apacheflume是一个分布式的、可靠的、可用的系统，用于有效地收集、聚合和移动大量的日志数据，从许多不同的源到一个集中的数据存储': 1, 'flume是cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统': 1, 'flume是一种分布式，可靠和可用的服务，用于高效收集，聚合和移动大量日志数据': 1, 'flume是cloudera公司开发的用于实时收集服务器（apache/ngnix等）日志数据的框架，flume很多时候和storm以及sparkstreaming等流式处理框架结合使用': 1, 'apacheflume是apachesoftwarefoundation的顶级项目': 1, 'flume是可靠的，容错性高的，可升级的，易管理的,并且可定制的': 1, '1.什么是flume\u3000\u3000\u3000\u3000flume是hadoop生态圈中的一个组件': 1, '（一）flume架构介绍1、flume的概念flume是分布式的日志收集系统，它将各个服务器中的数据收集起来并送到指定的地方去，比如说送到图中的hdfs，简单来说flume就是收集日志的': 1, 'apacheflume是一个分布式的、可靠的、可用的系统，可以有效地收集、聚合和将大量日志数据从许多不同来源转移到集中的数据存储': 1, 'apacheflume是apache软件基金会的顶级项目': 1, '本文主要介绍了flume的功能用途和核心概念，是一个对flume是什么、能干什么的快速入门介绍，来自《企业大数据处理：spark、druid、flume与kafka应用实践》读书笔记': 1, 'flume是cloudera公司开发的分布式、高可用的日志收集系统，是hadoop生态圈内的关键组件之一，目前已开源给apache': 1, 'flume是apache的顶级项目，官方网站：http://flume.apache.org/': 1, 'flume是一个分布式、可靠、高可用的海量日志聚合系统，支持在系统中定制各类数据发送方，用于收集数据；同时，flume提供对数据的简单处理，并写到各种数据接收方的能力': 1, 'flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统': 2, 'flume是java开发的，所以先得安装jdk': 1, 'flume是一种分布式，可靠且可用的服务，用于高效地收集，汇总和移动大量日志数据': 1, '2、flume是一个灵活的分布式系统，易扩展，高度可定制化': 1, 'flume可以采集文件，socket数据包、文件、文件夹、kafka等各种形式源数据，又可以将采集到的数据(下下沉sink)输出到hdfs、hbase、hive、kafka等众多外部存储系统中对一般的采集需求，通过对flume的简单配置即可实现flume针对特殊场景也具备良好的自定义扩展能力，因此，flume可以适用于大部分的日常数据采集场景flume的管道是基于事务，保证了数据在传送和接收时的一致性.flume是可靠的，容错性高的，可升级的，易管理的,并且可定制的': 1}
cms:::{'苹果cms是国内优秀的开源php视频建站系统': 1, '苹果cms是什么': 1, 'cms是contentmanagementsystem的缩写，意为"内容管理系统"': 2, '\u3000\u3000\u3000\u3000cms是如何应运而生的': 1, '\u3000\u3000\u3000\u3000cms是如何发展的': 1, 'contentmanagementsystem或cms是用于轻松创建，编辑和更新web内容的软件': 1, 'cms是一种软件，主要提供两种类型的界面，分别称为用户或网站界面和管理界面': 1, 'cms是使用某些编程或脚本语言(例如php，python，ruby，c＃)创建的，可轻松创建流程和逻辑': 1, 'cms是contentmanagementsystem的缩写，意为“内容管理系统”': 1, 'cms是如何应运而生的': 1, 'cms是如何发展的': 1, '看名字就知道，cms是一款并发、使用标记-清除算法的gc': 1, 'cms是针对老年代进行回收的gc': 1, '前面我们讲过，cms是以获取最短停顿时间为目的的gc': 1, 'headlesscms是一个很好的机会，但在这里，我们必须了解使用它来优化成本/效益比的最佳方案': 1, '在本章中，我们将看到rawcms是什么以及我如何使用asp.netcore，mongodb，docker和一些幻想创建headlesscms': 1, '项目简介：jfinalcms是一个java开发的功能强大的信息咨询网站，采用了简洁强大的jfinal作为web框架，模板引擎用的是beetl，数据库用mysql，前端bootstrap框架': 1, '项目简介：publiccms是采用2018年最新主流技术开发的开源javacms系统': 1, 'cms是用于对tenuredgeneration的回收，也就是年老代的回收，目标是尽量减少应用的暂停时间，减少fullgc发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代': 1, 'cms默认启动的回收线程数目是(parallelgcthreads+3)/4)，如果你需要明确设定，可以通过-xx:parallelcmsthreads=20来设定,其中parallelgcthreads是年轻代的并行收集线程数3、cms是不会整理堆碎片的，因此为了防止堆碎片引起fullgc，通过会开启cms阶段进行合并碎片选项：-xx:+usecmscompactatfullcollection，开启这个选项一定程度上会影响性能，阿宝的blog里说也许可以通过配置适当的cmsfullgcsbeforecompaction来调整性能，未实践': 1, '5.为了避免perm区满引起的fullgc，建议开启cms回收perm区选项：+cmspermgensweepingenabled-xx:+cmsclassunloadingenabled6.默认cms是在tenuredgeneration沾满68%的时候开始进行cms收集，如果你的年老代增长不是那么快，并且希望降低cms次数的话，可以适当调高此值：-xx:cmsinitiatingoccupancyfraction=80这里修改成80%沾满的时候才开始cms回收': 1}
informatica:::{}
cobar:::{'cobar是ali的开源项目': 1, 'cobar是提供关系型数据库(mysql)分布式服务的中间件，它可以让传统的数据库得到良好的线性扩展，并看上去还是一个数据库，对应用保持透明': 1, '在安装cobar前先要安装好jdk,因为cobar是基于java的中间件；安装好mysql数据库，因为我们要测试mysql的分库分表功能': 1, '一，cobar是什么': 1, '画外音：需要注意，cobar是需要用户自己来实现负载均衡的，方式有三种：': 1, 'cobar是关系型数据的分布式处理系统，它可以在分布式的环境下像传统数据库一样为您提供海量数据服务': 1, '这几天研究了下cobar，cobar是阿里巴巴研发的关系型数据的分布式处理系统(amoeba的升级版，该产品成功替代了原先基于oracle的数据存储方案，目前已经接管了3000+个mysql数据库的schema，平均每天处理近50亿次的sql执行请求': 1, 'tablerule主要作用是用来判断sql语句路由到哪些datanode执行，cobar是通过在sql中提取一个或多个字段的值，并根据这些字段的值来决定路由到哪个库执行': 1, '谈到mycat就不得不谈谈cobar,cobar是阿里巴巴开源的数据库中间件，由于其存在使用限制及--些比较严重的问题，leader-us在其基础上于2013年年底实现了mycat1.0版本,mycat-经发布便引起了很多人的关注': 1, 'cobar是阿里巴巴研发的关系型数据的分布式处理系统，该产品成功替代了原先基于oracle的数据存储方案，目前已经接管了3000+个mysql数据库的schema，平均每天处理近50亿次的sql执行请求': 2, 'cobar是阿里巴巴开源的一个分布式关系数据库访问代理，介于应用服务器和数据库服务器之间（cobar也支持非独立部署，以lib的方式和应用程序部署在一起）': 1, 'cobar是提供分布式数据库服务的中间件，由阿里巴巴中间件团队开发，是阿里巴巴b2b前台应用访问数据库的统一入口，目前已在github上开源': 1, 'cobar是阿里巴巴研发的关系型数据的分布式处理系统(amoeba的升级版，该产品成功替代了原先基于oracle的数据存储方案，目前已经接管了3000+个mysql数据库的schema，平均每天处理近50亿次的sql执行请求': 1}
walrus:::{'walrus是一个轻量级olap查询框架': 1}
namenode:::{'2.namenode是普通的ha模式，没有配置federation;': 1, '很多人都认为，secondarynamenode是namenode的备份，是为了防止namenode的单点失败的，直到读了这篇文章secondarynamenode-whatitreallydo?(需翻墙)才发现并不是这样': 2, '在hadoop中，有一些命名不好的模块，secondarynamenode是其中之一': 2, '因此在我们深入了解secondarynamenode之前，我们先来看看namenode是做什么的': 2, '但是在产品集群中namenode是很少重启的，这也意味着当namenode运行了很长时间后，editlogs文件会变得很大': 2, '上面的图片展示了secondarynamenode是怎么工作的': 2, '最后补充一点细节，是关于namenode是什么时候将改动写到editlogs中的': 2, 'secondnamenode是对主namenode的一个补充，它会周期的执行对hdfs元数据的检查点': 1, 'secondnamenode是有一个后台的进程，会定期的被唤醒（唤醒的周期依赖相关配置）执行检查点任务，然后继续休眠': 1, 'secondnamenode最好与namenode部署到不同的服务器(应该在merge的过程中，secondnamenode对内存的需求与namenode是相同的，所以对于那些大型的生产系统中，如果将两者部署到同台服务器上，在内存上会出现瓶颈': 1, ')secondarynamenode是namenode的冷备份，如果namenode意外终止，需要人工切换': 1, '在一个典型的ha集群中，每个namenode是一台独立的服务器': 1, '(1)healthmonitor监控namenode是否处于unavailable或unhealthy状态': 1, '3、namenode是否可以有多个': 1}
hbase:::{'hbase是一个分布式的、面向列的、基于googlebigtable的开源实现': 1, 'hbase是用表来存储数据的': 1, 'hbase是一个构建在hdfs上的分布式列存储系统；hbase是基于googlebigtable模型开发的，典型的key/value系统；hbase是apachehadoop生态系统中的重要一员，主要用于海量结构化数据存储；从逻辑上讲，hbase将数据按照表、行和列进行存储': 1, '最近在学习和整理大数据hadoop的资料时，突然发现一个简单又复杂的问题：hive与hbase是什么关系': 1, '总结一下，hbase是nosql数据库的一种，基于分布式列式存储，适合海量半结构化带时间序列的数据的存储和检索，性能较优秀，hbase底层存储依赖于hdfs，与rdbms的区别与其他nosql类似，比如不支持sql、事务性相对较差等等': 1, '综上，hbase是数据库、hive是数据仓库，而这有很大的区别、也有很多类似的地方比如都属于hadoop生态圈、存储都基于hdfs等': 1, 'hbase是bigtable的开源山寨版本': 1, '\u3000\u3000\u3000hbase是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用hbase技术可在廉价pcserver上搭建起大规模结构化存储集群': 1, '\u3000\u3000\u3000hbase是googlebigtable的开源实现，但是也有很多不同之处': 1, '2）列式存储\u3000\u3000\u3000这里的列式存储其实说的是列族存储，hbase是根据列族来存储数据的': 1, 'hbase架构如图1所示：从图中可以看出hbase是由client、zookeeper、master、hregionserver、hdfs等几个组件组成，下面来介绍一下几个组件的相关功能：1）client\u3000\u3000\u3000client包含了访问hbase的接口，另外client还维护了对应的cache来加速hbase的访问，比如cache的.meta.元数据的信息': 1, 'hbase是hadoop的数据库，一个分布式、可扩展、大数据的存储': 1, 'hive和hbase是两种基于hadoop的不同技术–hive是一种类sql的引擎，并且运行mapreduce任务，hbase是一种在hadoop之上的nosql的key/vale数据库': 1, 'hbase是分布式数据库的典范，这点比较像mongodb的sharding模式，能根据键值的大小，把数据分布到不同的存储节点上，mongodb根据configserver来定位数据落在哪个分区上，hbase通过访问zookeeper来获取-root-表所在地址，通过-root-表得到相应.meta.表信息，从而获取数据存储的region位置': 1, 'hbase是一个hadoopdatabase，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用hbase技术可在廉价pcserver上搭建起大规模结构化存储集群': 1, 'hbase是googlebigtable的开源实现，但是也有很多不同之处': 1, 'hbase是apache的hadoop项目的子项目': 1, 'hbase是一种构建在hdfs之上的分布式、面向列的存储系统': 1, 'hbase是googlebigtable的开源实现，与googlebigtable利用gfs作为其文件存储系统类似，hbase利用hadoophdfs作为其文件存储系统；google运行mapreduce来处理bigtable中的海量数据，hbase同样利用hadoopmapreduce来处理hbase中的海量数据；googlebigtable利用chubby作为协同服务，hbase利用zookeeper作为对应': 1, 'hadoop是一个高容错、高延时的分布式文件系统和高并发的批处理系统，不适用于提供实时计算；hbase是可以提供实时计算的分布式数据库，数据被保存在hdfs分布式文件系统上，由hdfs保证期高容错性，但是再生产环境中，hbase是如何基于hadoop提供实时性呢': 1, '从上面的hbase物理数据模型中可以看出，hbase是面向列表（簇）的存储': 1, '可以看出，hbase是通过先对表执行disable，然后再执行drop操作后重建表来实现truncate的功能的': 1, 'hbase是一种分布式、可扩展、支持海量数据存储的nosql数据库，可以解决hdfs随机写的问题': 1, '原理是这样的，我们知道hbase是一个类lsm数据结构，数据写入之后先写入内存，内存达到一定程度就会形成一个文件，因此hbase的一个列族会有很多文件存在': 1, '1hbase是一种数据库a.列式数据库b.键值数据库c.文档数据库d.关系数据库': 1, '2下列对hbase数据模型的描述错误的是a.hbase中执行更新操作时，会删除数据旧的版本，并生成一个新的版本b.每个hbase表都由若干行组成，每个行由行键（rowkey）来标识c.hbase列族支持动态扩展，可以很轻松地添加一个列族或列d.hbase是一个稀疏、多维度、排序的映射表，这张表的索引是行键、列族、列限定符和时间戳': 1, '8下列对hbase的理解正确的是a.hbase是一种关系型数据库，现成功应用于互联网服务领域b.hbase是一个行式分布式数据库，是hadoop生态系统中的一个组件c.hbase多用于存储非结构化和半结构化的松散数据d.hbase是针对谷歌bigtable的开源实现': 1, 'hbase是一个领先的no-sql数据库，它在hdfs上存储数据': 1, 'hbase是面向列的数据库': 1, 'hbase是一个分布式哈希映射': 1, 'hbase是基于googlebigtable论文': 1, 'hbase是面向列的数据库，列可无限扩充': 1}
ambari:::{'ambari是apachesoftwarefoundation中的一个顶级项目，它可以创建、管理、监视hadoop整个生态圈（例如hive，hbase，sqoop，zookeeper等）的集群，使得hadoop以及相关的大数据软件更容易使用': 1, '本文主要讲解ambari是如何安装一个服务的，这会涉及到ambari的资源请求，请参看《ambari-server-资源provider》，《ambari-server-资源请求分析》': 1, 'ambari是一个可视化管理hadoop生态系统的一个开源服务，像hdfs、yarn、mapreduce、zookeeper、hive、hbase、spark、kafka等都可以使用ambari界面来统一安装、部署、监控、告警等': 1, 'ambari是hortonworks推出的管理监控hadoop集群的web工具，此处的hadoop集群不单单指hadoop集群，而是泛指hadoop整个生态，包括hdfs，yarn,spark,hive,hbase,zookeeper，druid等等，管理指的是可以通过ambari对整个集群进行动态管理，包括集群的部署，修改，删除，扩展等，监控指ambari实时监控集群的运行状况，包括运行内存，剩余内存，cpu使用率，节点故障等': 1}
spark:::{'spark是一个用来实现快速而通用的集群计算的平台': 1, '辛湜：spark是一个高效的分布式计算系统，相比hadoop有以下几个优势：': 1, '其实分布式计算框架，就这点破事，折腾不出什么新鲜花样，基于对上面问题的思考，看看spark是怎么解决的': 1, 'spark是ucberkeleyamplab开发的是一种计算框架，分布式资源工作交由集群管理软件（mesos、yarn）': 1, 'spark是当今大数据领域最活跃、最热门、最高效的大数据通用计算平台，': 1, 'apachespark是用于大规模数据处理的统一分析引擎': 1, 'spark是大数据技术中数据计算处理的王者，能够一次处理pb级的数据，分布在数千个协作的物理或虚拟服务器集群中，它有一套广泛的开发者库和api，并且支持java，python，r和scala等语言，其灵活的特性，适合各种环境，以下是spark最常见的两种应用场景：': 1, 'spark是为数据科学设计的，数据科学家将spark纳入其应用程序，能够处理包括跨大型数据集的交互式查询，来自传感器或金融系统的流数据以及机器学习任务，且spark将数据集缓存在内存中的能力大大加快了迭代数据处理速度，使得spark成为实现迭代的mapreduce算法的理想处理引擎': 1, 'spark是为大数据工程师设计的，在强大的计算能力和优秀的架构设计面前，可以让数据工程师在不管是离线情景下还是实时的业务需求下，都可以放心的选择使用spark': 1, 'spark是一种与hadoop相似的开源集群计算环境，是专为大规模数据处理而设计的快速通用的计算引擎，现已形成一个高速发展应用广泛的生态系统，主要应用场景如下：': 1, '1.spark是基于内存的迭代计算框架，适用于需要多次操作特定数据集的应用场合': 1, '一、spark是什么': 1, '简单来说，spark是一个通用计算框架，是一个用来实现快速而通用的集群计算的平台，是一个大一统的软件栈(spark项目包含多个紧密集成的组件)': 1, '3、可以满足不同应用场景下的需求：spark是一个通用引擎，可用它来完成各种各样的运算，包括：传统批处理应用，交互式查询，流式计算，机器学习，图计算等，sql查询，文本处理': 1, '什么是sparkspark是ucberkeleyamplab所开源的类hadoopmapreduce的通用的并行计算框架，spark基于mapreduce算法实现的分布式计算，拥有hadoopmapreduce所具有的优点；但不同于mapreduce的是job中间输出和结果可以保存在内存中，从而不再需要读写hdfs，因此spark能更好地适用于数据挖掘与机器学习等需要迭代的mapreduce的算法': 1, 'spark是ucberkeleyamplab所开源的类hadoopmapreduce的通用的并行计算框架，spark基于mapreduce算法实现的分布式计算，拥有hadoopmapreduce所具有的优点；但不同于mapreduce的是job中间输出和结果可以保存在内存中，从而不再需要读写hdfs，因此spark能更好地适用于数据挖掘与机器学习等需要迭代的mapreduce的算法': 2, 'spark是基于内存的迭代计算框架，适用于需要多次操作特定数据集的应用场合': 2}
cm:::{}
catalog:::{'servicecatalog是kubernetes的一种api扩展，方便kubernetes集群内部应用访问集群外部、由第三方管理、提供的服务，如由云供应商提供的数据库服务': 2, '那么servicecatalog是怎么实现的呢': 1, 'rmanrecoverycatalog是一个用于存放rman元数据的schema': 1, '从配置文件和一些资料看出catalog是从mysql里面读取的数据，然后从mysql的keystone库中的service表里找到了脏数据，然后知道了用openstackservicedelete去删除‘脏数据’，问题就解决了': 1, '在解析过程中，根据catalogname从catalogmanager获取具体的catalogplugin实现，v2sessioncatalog是为了兼容之前的catalog的实现机制，而customercatalog是自定义的catalogplugin实现': 1, 'openservicebrokerapi和servicecatalog是采用最为广泛的解决方案之一': 1, 'servicecatalog是一个实现了这个标准的kubernetesapi扩展，目前是一个kubernetes孵化器项目，目前的api版本为v1beta1': 1, 'servicecatalog是一个kubernetes孵化器项目，目前版本为0.1.38，api版本为v1beta1': 1}
ssis:::{'那么ssis是一个智能的解决方案，怎么使用呢': 1}
bean:::{'javabean是一个遵循特定写法的java类，是一种java语言编写的可重用组件，它的方法命名，构造及行为必须符合特定的约定：': 1, 'javabean是一种组件技术，就好像你做了一个扳手，而这个扳手会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件': 2, '◇javabean是一种java语言写成的可重用组件': 1, '◇通常情况下，由于javabean是被容器所创建（如tomcat)的，所以javabean应具有一个无参的构造器，另外，通常javabean还要实现serializable接口用于实现bean的持久性': 1, 'javabean是不能被跨进程访问的': 1, '◇javabean是使用java.beans包开发的，它是java2标准版的一部分': 1, 'javabean是一台机器上同一个地址空间中运行的组件': 2, 'javabean是进程内组件': 2, 'javabean是基于java的组件模型，由属性、方法和事件3部分组成': 1, '2.entitybean是域模型对象，用于实现o/r映射，负责将数据库中的表记录映射为内存中的entity对象，事实上，创建一个entitybean对象相当于新建一条记录，删除一个entitybean会同时从数据库中删除对应记录，修改一个entitybean时，容器会自动将entitybean的状态和数据库同步': 1, 'enterprisebean是使用javax.ejb包开发的，它是标准jdk的扩展，是java2enterpriseedition的一部分': 2, 'enterprisebean是在多台机器上跨几个地址空间运行的组件': 2, '因此enterprisebean是进程间组件': 2, '对于客户机，sessionbean是一种非持久性对象，它实现某些在服务器上运行的业务逻辑': 1, '对于客户机，entitybean是一种持久性对象，它代表一个存储在持久性存储器中的实体的对象视图，或是一个由现有企业应用程序实现的实体': 1, 'entitybean是域模型对象，用于实现o/r映射，负责将数据库中的表记录映射为内存中的entity对象，事实上，创建一个entitybean对象相当于新建一条记录，删除一个entitybean会同时从数据库中删除对应记录，修改一个entitybean时，容器会自动将entitybean的状态和数据库同步': 1, '@bean是一个方法级别上的注解，主要用在@configuration注解的类里，也可以用在@component注解的类里': 1, '一个会话bean是非持久化的(换句话说就是数据不保存在数据库中)': 1, '一个会话bean是不共享的；它只能有一个客户端，同样的，这个交互的会话只能有一个用户': 1, '单例会话bean是基于以下两种环境来设计的，一个单一的企业bean实例是共享的和多客户端并发访问': 1, 'javabean是一种java语言写成的可重用组件': 2, 'javabean是可复用的平台独立的软件组件，开发者可以在软件构造器工具中对其直接进行可视化操作': 1, 'javabean可以是简单的gui要素，如按钮或滚动条；也可以是复杂的可视化软件组件，如数据库视图，有些javabean是没有gui表现形式的，但这些javabean仍然可以使用应用程序构造器可视化地进行组合': 1, '按着sun公司的定义，javabean是一个可重复使用的软件组件': 1, '实际上javabean是一种java类，通过封装属性和方法成为具有某种功能或者处理某个业务的对象，简称bean': 1, '由于javabean是基于java语言的，因此javabean不依赖平台，具有以下特点：': 1, '由于javabean是基于java的，所以它可以很容易地得到交互式平台的支持': 1, 'javabean是java类，属于某些特定的译码指导方针，并且扩展了适应性和范围，允许用户访问内部的属性和方法': 1, '1．在ide中，javabean的功能允许应用开发者浏览其中的方法，即javabean是被编译的，并且无法利用原始的源文件': 1, '如果bean是一个从java.awt.component类继承而来的可视bean，您就应该为bean定义一个默认的首选大小，例如：': 1, '良好规划设计的javabean是值得信赖的': 1, 'javabean是使用java.beans包开发的，它是java2标准版的一部分': 1, 'javabean在mvc设计模型中是model，又称模型层，在一般的程序中，我们称它为数据层，就是用来设置数据的属性和一些行为，然后我会提供获取属性和设置属性的get/set方法javabean是一种java语言写成的可重用组件': 1, '内部bean定义继承其包含bean定义的单例状态，除非明确指定：如果包含bean是单例，则内部bean将是单例，如果包含bean具有任何其他范围，则内部bean将是原型': 1, '上句翻译：这个bean是“抽象的”，也就是说，不是要自己实例化，而是仅仅作为具体子bean定义的父级': 1, 'sessionbean是一种非持久性对象,不会做持久化存储，只在一次会话中有效，会话结束则自动消除；而entitybean是一种持久性对象，它代表一个存储在持久性存储器中的实体的对象视图，或是一个由现有企业应用程序实现的实体，会持久化到关系数据库或其它持久存储中，即使容器或服务器失效，bean的状态数据仍然存在': 1, '1.无状态会话bean从字面意思来理解，无状态会话bean是没有能够标识它的目前状态的属性的bean': 1, '4.无状态会话bean实现调度池调度：因为无状态会话bean是不保存会话状态的，所以无论哪个客户端调用了某个无状态会话bean，都没有差别，也就是说任何一个无状态会话bean的实例都可以为客户端程序提供服务': 1, '5.状态会话bean实现调度池调度：因为状态会话bean是保持当前会话的状态的，所以实现起来远比无状态会话bean困难': 1, '所以以这种方式钝化bean是非常合理有效的': 1, '而在程序中使用@stateless注解来声明一个状态bean是有状态的还是无状态的': 1, '实体bean是管理持久化数据的一个对象，潜在使用一些相关的java对象并且可以依靠主键被唯一识别': 1, 'java是咖啡的意思，而bean是咖啡豆，意思就很明显了，咖啡豆是咖啡的基础，所以bean也就是java的基础组件的意思': 1, '简单的说：springbean是受spring管理的对象': 1, 'containingbean是一个null值，因此进入第9行的判断，即beanname由第9行的方法生成，追踪到beandefinitionreaderutils的generatebeanname方法：': 1}
gps:::{'gps是一个由美国国防部开发的空基全天侯导航系统，它用以满足军方在地面或近地空间内获取在一个通用参照系中的位置、速度和时间信息的要求': 1, '授时可以分为三步来完成：1、有一个基准源：无论gps和北斗卫星上一般搭载原子钟，老gps是铯钟，部分新星是铷钟': 1, '因为上一篇博客的缘故，发现安卓9.0的定位跟gps是否开启有很大关系，因此就想到安卓能不能监听gps的状态，类似于广播这种注册接收等，经过搜索发现，安卓系统还是有预留这个监听，也许大家对这个需求可能不是太需要，但是我的需求场景是需要的': 1}
sentry:::{'sentry是一个全平台支持，用python编写的一整套错误信息收集统计应用平台': 1, 'sentry是一个实时事件的日志聚合平台': 2, 'apachesentry是hadoop中的一个基于角色的细粒度授权组件': 1, 'sentry是高度模块化的，可以支持hadoop中各种数据模型的授权': 2, 'sentry中文翻译过来是哨兵的意思，不错，sentry是程序的哨兵，它可以监控我们在生产环境中项目的运行状态，一旦某段代码运行报错或者异常，会第一时间把报错的路由，异常文件，请求方式等一些非常详细的信息以消息或者邮件给我们，让我们第一时间知道：程序出错，然后我们可以从sentry给我们的详细的错误信息中瞬间找到我们需要处理的代码，悄悄把bug修复': 1, 'sentry是一个开源的实时错误收集报告工具，支持web前后端、移动应用以及游戏等，支持python、javascript、java、go、nodejs、django、php等主流编程语言和框架平台，还提供了对github、gitlab等常见开发工具的集成及mail邮件通知（收集到的错误告警），除此之外我们还可以自主开发插件以满足项目需求': 1, 'apachesentry是cloudera公司发布的一个hadoop开源组件，2016年3月从incubator毕业，成为apache顶级项目': 1, 'sentry是一个基于角色的粒度授权模块，提供了对hadoop集群上经过身份验证的用户提供了控制和强制访问数据或数据特权的能力': 1, 'apachesentry是hadoop的授权模块，它提供了为正确的用户和应用程序提供精确级别访问所需的基于角色的精细授权': 1, 'sentry是不带ssl的，需要自行搭建nginx': 1}
rmi:::{'rmi是java最初的远程方法调用技术': 1, '但是开发和访问rmi服务是非常乏味无聊的，它涉及到好几个步骤，包括程序的和手工的': 1, 'rmi是一种实现远程服务交互的好办法，但是rmi有一些缺点和不足：': 1, 'rmi是基于java的，使用了java的序列化机制，所以通过网络传输的对象类型必须要保证在调用两端的java运行时中是完全相同的版本': 1, 'rmi是remotemethodinvocation的简称，是j2se的一部分，能够让程序员开发出基于java的分布式应用': 1, '然后运行：java-jarrmiserver.jar6600rmi,参数6600是端口号，rmi是服务名称': 1, 'rmi是java的一组拥护开发分布式应用程序的api': 1, 'rmi是enterprisejavabeans的支柱，是建立分布式java应用程序的方便途径': 1, 'rmi是一种实现远程服务交互的好方法，但它存在着某些限制：': 1, '1、rmi是什么': 1, 'rmi是完全异步的': 1, 'rmi的主要优点：1.rmi是java编写的,具有“编写一次，到处运行”的特性': 1, 'springrmi是唯一一个封装的框架吗：': 1}
hessian:::{'hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了rmi的功能.相比webservice，hessian更简单、快捷': 1, 'hessian是由caucho提供的一个基于binary-rpc实现的远程通讯library': 1, 'hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了rmi的功能': 1, 'hessian是一个轻量级的rpc框架，基于http协议': 1, 'http三、hessian介绍hessian是一个轻量级的remotingonhttp工具,采用的是binaryrpc协议，所以它很适合于发送二进制数据,同时又具有防火墙穿透能力': 1, 'hessian是一个轻量级的web服务实现工具，它采用的是二进制协议，因此很适合发送二进制数据': 1, '因为hessian是基于http的，所以hessianseriviceexporter实现为一个springmvc控制器': 1, 'hessian是跨语言基于http的rpc框架，传输的数据格式是二机制': 1, '\u200bhessian是什么': 1, '*hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了rmi（remotemethodinvocation）的功能': 1, 'hessian介绍hessian是一个轻量级的remotingonhttp工具,采用的是binaryrpc协议，所以它很适合于发送二进制数据,同时又具有防火墙穿透能力': 1}
divide:::{'点击editor可以看到，有个按钮可以开启/关闭插件，这里需要确保divide是打开状态': 1}
obd:::{'obd是与uds并列的一套应用层协议，对于与排放相关的ecu来说，通常这种ecu上既要实现obd，也实现uds': 4, '目前，uds和obd是两套应用层协议，而obd所提供诊断服务其实属于uds所提供服务的一个子集，理论上来说uds中的诊断服务都可以实现obd中的要求': 4, '因为这个模式使用的比较少，比如我国的所有obd是不支持08模式的，以下对其进行简单的介绍': 2, '首先，obd是面向汽车排放问题而制定的规范，也就是说对所有车辆统一适用，在obdⅱ计划实施之后，任一技师可以使用同一个诊断仪器诊断任何根据标准生产的汽车': 3, 'obd是通过各种与排放有关的部件信息，联接到电控单元（ecu），ecu具备检测和分析与排放相关故障的功能': 2, '所以obd是具有强制标准需要参照的，是由法规要求的，最初目的是环保，同时方便售后维修': 1, 'uds(unifieddiagnosticservices)，与obd最大的区别就在于“unified”上，它是面向整车所有ecu(电控单元)的，而obd是面向排放系统ecu的': 1, '1.obd是车载故障系统': 1, 'obd是英文on-boarddiagnostic的缩写，即车载诊断系统': 1, 'obd是汽车排放和驱动性相关故障的标准化诊断规范，有严格的排放针对性，其实质就是通过监测汽车的动力和排放控制系统来监控汽车的排放': 1, 'obd是英文on-boarddiagnostic的缩写，中文翻译为“车载诊断系统”': 1, '③obd是通过各种与排放有关的部件信息，联接到电控单元（ecu），ecu具备检测和分析与排放相关故障的功能': 1, 'obd是英文on-boarddiagnostics的缩写，中文翻译为“车载自动诊断系统”': 1, '3.obd是关注车辆实时排放的理念形成的行业规范，而uds是诊断服务的统一化规范': 1, '4.uds是面向整车所有ecu(电控单元)的，而obd是面向排放系统ecu的': 1, 'obd是对排放相关的功能和元器件，利用硬件或软件进行监控，并以mil灯和dtc故障码的形式提醒驾驶员进行相应检查维修的一个系统': 1}
kudu:::{'clouderakudu是什么': 1, 'kudu是cloudera在2012开始秘密研发的一款介于hdfs和hbase之间的高速分布式列式存储数据库': 1, 'kudu是cloudera开源的新型列式存储系统，是apachehadoop生态圈的新成员之一（incubating），专门为了对快速变化的数据进行快速的分析，填补了以往hadoop存储层的空缺': 1, 'kudu是toddlipcon@cloudera带头开发的存储系统，其整体应用模式和hbase比较接近，即支持行级别的随机读写，并支持批量顺序检索功能': 1, 'kudu是一个针对apachehadoop平台而开发的列式存储管理器': 2, 'kudu是对hdfs和hbase功能上的补充，能提供快速的分析和实时计算能力，并且充分利用cpu和i/o资源，支持数据原地修改，支持简单的、可扩展的数据模型': 1, 'hbase、hdfs由于年代久远，已经很难从基本架构上进行修改，而kudu是基于全新的设计，因此可以更充分地利用ram、i/o资源，并优化cpu利用率': 1, '3.1kudu是什么': 1, '1、kudu简介1.1、kudu是什么': 1, 'kudu是一个columnardatastore（列式数据存储）': 1, '和hbase一样，kudu是cap中的cp': 3, '5.hdfs不支持批量更新操作，kudu支持hdfs适用于离线sql分析，kudu适用于实时sql分析hbase不支持sql操作，kudu支持（hbase-hive表可支持sql操作，但是效率极低）hbase不支持结构化数据存储，kudu支持hbase开发语言使用的java，内存的释放通过gc来完成，在内存比较紧张时可能引发fullgc进而导致服务不稳定；kudu核心模块用的c++来实现，没有fullgc的风险hbase的timestamp是暴露的，kudu没有暴露hbase的插入和更新操作都是当作一条数据进行处理的，而kudu是分隔开的6.适合于在线实时分析的应用适合大数据量更新操作的应用适合将mysql的数据同步到kudu，减轻备库mysql查询的压力适合存储ads数据，包含用户标签、各类指标数据等适合于存储结构化数据适合于和impala继承，sql分析数据适合于和hdfs一起使用，聚合数据源实时预测模型的应用，支持根据所有历史数据周期地更新模型7.kudu完美的和impala集成，统一了hdfs数据源和kudu数据源，从而使得开发人员能够高效的进行数据分析': 1, 'kudu是围绕hadoop生态圈建立存储引擎，kudu拥有和hadoop生态圈共同的设计理念，它运行在普通的服务器上、可分布式规模化部署、并且满足工业界的高可用要求': 2, '毫无疑问，kudu是一个纯粹的列式存储引擎，相比hbase只是按列存放数据，kudu的列式存储更接近于parquet，在支持更高效scan操作的同时，还占用更小的存储空间': 2, '（6）验证kudu是否启动成功ps-ef|grepkudu也可以通过webui查看，默认端口是8050：': 1, '在介绍kudu是什么之前，还是先简单的说一下现存系统针对结构化数据存储与查询的一些痛点问题，结构化数据的存储，通常包含如下两种方式：': 1, '除了基于key值的整行数据的查询性能，phoenix有明显的优势以外，其它的基于整表扫描，或者是基于一些列的查询，impala-kudu是有明显的优势的': 1, '1.1、kudu是什么': 1, 'kudu是cloudera开源的列式存储引擎，具有以下几个特点：': 1, '那kudu是怎么做到的呢': 1, '因此，kudu是牺牲了写性能来换取读取性能的提升': 1}
executor:::{'3.coarsegrainedexecutorbackend和executor是一一对应的': 1, 'executor是如何工作的': 1, '\u3000\u3000executor是基于生产者消费者模式的，提交任务的操作相当于生产者，执行任务的线程相当于消费': 1, '那么我们对executor就很感兴趣，于是我们看看executor是怎么样的，首先在mybatis中有三种executor:': 1, '这里主要是判断此executor是否能够被注册到driver，也就是判断它能否用来执行task.': 1, '从代码上看，executor是一个简单的接口，但它却是整个异步任务执行框架的基础，这个框架能支持多种不同类型的任务执行策略': 1, 'singlethreadexecutor是只有一个线程的线程池': 1}
storm:::{'apachestorm是什么?apachestorm是一个分布式实时大数据处理系统': 1, 'storm是一个高吞吐率流数据处理框架': 1, '虽然storm是无状态的,它通过apachezookeeper管理分布式环境和集群状态': 1, 'apachestorm是实时数据分析领域是领跑者': 1, 'apachestorm是非常有名的实时大数据流处理框架': 1, '1.storm是开源,健壮和用户友好的': 1, '2.storm是具备容错机制、灵活、可靠和支持任何编程语言的流处理框架': 1, '1、定义：storm是一个分布式实时计算系统': 1, '初始时：在storm与jstorm是一样的': 1, 'twitterstorm是一个免费、开源的分布式实时计算系统，storm对于实时计算的意义类似于hadoop对于批处理的意义，storm可以简单、高效、可靠地处理流数据，并支持多种编程语言': 1, '从编程的灵活性来讲，storm是比较理想的选择，它使用apachethrift，可以用任何编程语言来编写拓扑结构（topology）': 1, '原因是由于部署时通过linuxscp命令直接分发软件到其他机子，残留了local.dir的东西，而storm是根据local.dir中的某一个或一些文件计算出一个supervisorid的': 1, 'storm是一个开源免费的分布式实时计算系统，storm可以轻松的处理无界的数据流': 1, 'storm是twitter公司开源贡献给apache的一款实时流式处理的一个开源软件，主要用于解决数据的实时计算以及实时的处理等方面的问题': 1, 'storm是一个开源的分布式实时计算系统，可以简单、可靠的处理大量的数据流': 1, 'apachestorm：一个分布式实时计算系统，storm是一个任务并行连续计算引擎': 1, 'storm是一个免费开源、分布式、高容错的实时计算系统': 1, 'storm是一个分布式的，可靠的，容错的数据流处理系统': 1, '跟hadoop不一样，storm是没有包括任何存储概念的计算系统': 1, 'storm是通过跟踪每个spout所产生的所有元组构成的树形结构并得知这棵树何时被完整地处理来达到可靠性': 1, 'storm是twitter开源的分布式实时大数据处理框架，在现在的今天被广泛使用，比如网站统计、推荐系统、预警系统、金融系统等': 1}
java:::{'大家都知道java是一门后端语言，后端指的就是服务端，服务端代码一般运行在服务器上，通常我们运行java程序的服务器都是linux服务器': 1, 'java是一种可以撰写跨平台应用程序的、面向对象的程序设计语言': 1, '从整体来讲，java和android的区别在于android程序是基于组件和配置的，而且android开发以java语言为开发工具，表面上看他们有点同宗不同门，但实际上区别十分大，android是一个主流智能手机操作系统，java是一种开发语言，两者没有好坏之分，而且两者也是不同的岗位，从工作岗位来看，安卓从事的是移动互联方向，java则是从事开发方向': 1, 'java是一个纯的面向对象的程序设计语言，它继承了c++语言面向对象技术的核心，java舍弃了c++语言中容易引起错误的指针（以引用取代）、运算符重载、多重继承（以接口取代）等特性，增加了垃圾回收器功能用于回收不再被引用的对象所占据的内存空间，使得程序员不用再为内存管理而担忧': 1, 'java是一问语言，j2ee是java语言的一门使用技术，java为j2ee提供了库和语法，j2ee使用java的库和语法应用在web上': 1}
status:::{'serverstatus是一个开源的服务器监控系统，可以利用serverstatus可以自己搭建服务器监控平台，通过web页面同时检测多台服务器的流量、硬盘、内存等多个参数': 1}
mdp:::{'mdp.setdatahandler(dh);//mdp是一个mimebodypart对象': 2, '马尔科夫奖赏过程是在马尔科夫过程基础上增加了奖励和衰减因子，从而引入了状态值函数，而马尔科夫决策过程mdp是在马尔科夫奖赏过程基础上引入了action或者说决策，从而将问题彻底转化为了决策问题，这才真正进入了强化学习路线': 1}
autosar:::{'简单来说，autosar是一种开放的软件架构，需要汽车制造商、零部件供应商、芯片供应商及软件公司共同合作来实现该软件架构': 1, '而adaptiveautosar是随着近些年汽车信息娱乐系统的发展，在带有高级操作系统(linux或qnx)的车载soc上使用的一种autosar架构': 1, '那么autosar是什么东西呢': 1, '首先，先了解一下autosar这个名词的含义，autosar是由automotiveopensystemarchitecture的缩写，即汽车开发系统架构': 1, '说了这么多，具体的autosar是什么东西呢': 1, 'adaptiveautosar是一个比较新的东西，关于它的中文文章或资料都还很稀缺，而英文文章又大多是17或者18的版本，唯一紧跟最新版本的，只有autosar官网的资料': 1, 'autosar是由全球汽车oem和供货商共同推出的一种汽车电子嵌入式软件分层架构': 1, '所以认为，autosar是基于osek提出的（但不仅基于osek），osek被autosar标准软件架构包含': 1}
drill:::{'）apachedrill是一个低延迟的分布式海量数据（涵盖结构化、半结构化以及嵌套数据）交互式查询引擎，使用ansisql兼容语法，支持本地文件、hdfs、hbase、mongodb等后端存储，支持parquet、json、csv、tsv、psv等数据格式': 1, '本质上apachedrill是一个分布式的mpp（大规模并行处理）查询层': 1, 'drill是一项cpu密集型操作，每个额外的核心都能从中受益匪浅': 1, 'apachedrill是一个引擎，可以连接到许多不同的数据源，并为它们提供sql接口': 1, '这就是文件中的完整数据-drill是正确的-json已损坏': 1, 'apachedrill是一个功能强大的工具，用于针对不同的数据源使用熟悉的查询语言（sql）': 2, 'apachedrill是一种引擎，可以连接到许多不同的数据源，并为它们提供sql接口': 1, '这就是文件中的完整数据-所以drill是正确的-json已损坏': 1, 'drill代码分析（查询拆分）drill架构drill是什么drill查询服务总体执行流程drill查询引擎执行流程物理执行计划生成查询拆分和分布执行非根查询片段执行流程calcit架构drill与calcite交互': 1, 'drill是开源、低延迟、分布式查询系统，可扩展到数千节点，适用于pb级交互式bi和分析': 1, 'drill是专为复杂数据而构建的分布式列式sql查询引擎': 1, 'apachedrill的用途：drill是sql查询引擎，可以构建在几乎所有的nosql数据库或文件系统(如：hive,hdfs,mongodb,amazons3等)上，用来加速查询，比如，我们所熟知的hive，用于在hdfs进行类sql查询，但是利用hive的速度比较慢，因此可以利用drill一类的查询引擎加速查询，用于分布式大数据的实时查询等场景': 1, 'drill是一个交互式sql查询引擎，官方默认支持的数据源有hive、hbase、kafka、kudu、mongo、opentsdb、jdbc等，其中jdbcstorageplugin可以覆盖所有支持jdbc协议的数据源，如：mysql、oracle等关系型数据库': 1, 'drill是分布式的，并且节点之间是对等的，所有drill节点都可以对外提供服务，当节点接收到sql查询请求之后，在userworker中会拉起一个foreman线程来单独处理这个请求，foreman会完成sql到物理执行计划的转换，并根据物理执行计划切分成可并行执行的fragment，foreman根据一定的算法把fragment分发到本机或者其他drill节点进行执行，执行完之后会在接收初始请求的drill节点中进行结果合并，然后返回给客户端': 1, 'apachedrill是一个低延迟的分布式的查询引擎，适用于大规模的数据集、结构化和半结构化的数据': 1, 'apachedrill是一个低延迟的分布式海量数据（涵盖结构化、半结构化以及嵌套数据）交互式查询引擎，使用ansisql兼容语法，支持本地文件、hdfs、hive、hbase、mongodb等后端存储，支持parquet、json、csv、tsv、psv等数据格式': 1, '本质上，apachedrill是googledremel的开源实现，本质是一个分布式的mpp查询层，支持sql及一些用于nosql和hadoop数据存储系统上的语言，将有助于hadoop用户实现更快查询海量数据集的目的': 1, 'rpcendpoint:drill是一个低开销的基于protobuf的rpc通信协议': 1, 'drill是通过ansi标准information_schema数据库元数据': 1, 'drill是为大型数据集的高效分析而设计的，下面几点保证了drill的性能：': 1, 'apachedrill是业界第一个针对hadoop和nosql的无模式sql引擎，允许业务用户使用熟悉sql技能和bi工具以自助服务的方式本地查询动态数据集，例如json': 1, '对于不熟悉它的人来说，apachedrill是一个开源的，交互式sql-on-hadoop查询引擎，您可以使用它在大数据之上直接进行数据探索以及bi和即席查询，使用熟悉的ansisql工具，例如tableau和microstrategy': 1}
ignite:::{'ignite作为分布式缓存框架，首先了解到本来项目是分布式，ignite是直接嵌入项目（java）中，ignite是基于jvm的，所以可以完全嵌入java项目中，随着项目启动而启动关闭而关闭（我理解为相当于java编写了一个map缓存数据，当然别人是可以分布式的、并且可以做分布式计算的），目前遇到的问题是有时候程序运行中但是ignite线程挂了，失去功能，并且某个节点挂掉不能转到其他节点（后续发现问题是集群保存数据有三种模式导致部分数据丢失现象）': 1, 'ignite是轻量级分布式内存htap数据库及计算平台，中文官网https://liyuj.gitee.io/': 1, 'ignite是一个大容器（相当于mysql的一个连接服务，cache就是一个数据库），里面可以创建cache，数据放在cache里面': 1, 'ps：ignite远不止我说的这么简单…提供的支持还有超级多，正如官网所说，ignite是很强大的整体解决方案和开发平台': 1, 'apacheignite是由很多maven模块组成的，如果项目里用maven管理依赖，可以单独地导入各个ignite模块，': 1, 'ignite是基于jvm的，一个jvm可以运行一个或者多个逻辑ignite节点（大多数情况下，一个jvm运行一个ignite节点）': 1, 'ignite是一个以内存为中心的分布式数据库、缓存和处理平台，可以在pb级数据中，以内存级的速度进行事务性、分析性以及流式负载的处理': 1, 'ignite是一个分布式系统，因此，有能力将数据和数据以及数据和计算进行并置就变得非常重要，这会避免分布式数据噪声': 2, 'ignite是一个基于内存的计算系统，也就是把内存做为主要的存储设备': 1, '如您所见，apacheignite是一个刷新的缓存系统，提供许多功能': 1, 'ignite是以java语言为主进行开发的，因此可以在jvm支持的任何操作系统和架构上部署和运行': 1, 'apacheignite是一个完全支持分布式acid事务的强大一致的平台': 1, 'ignite是一种多用途，和olap/oltp内存中数据结构相关的，而hadoop仅仅是ignite原生支持（和加速）的诸多数据来源之一': 1, 'ignite是一个内存数据组织，并且提供了更多的功能，无法进行一个一个对应功能特性的比较，但是我们仍然能对一些数据网格功能进行对比': 1, 'apacheignite是一个发展成熟的内存计算（imc）平台': 1}
ejb:::{'既然说了ejb是为了"服务集群"和"企业级开发"，那么，总得说说什么是所谓的"服务集群"和"企业级开发"吧': 7, '4.2ejb的实现技术ejb是运行在独立服务器上的组件，客户端是通过网络对ejb对象进行调用的': 3, '4.6ejb是以rmi为基础的通过rmi技术，j2ee将ejb组件创建为远程对象，ejb虽然用了rmi技术，但是却只需要定义远程接口而无需生成他们的实现类，这样就将rmi技术中的一些细节问题屏蔽了': 3, 'ejb是运行在独立服务器上的组件，客户端是通过网络对ejb对象进行调用的': 4, '4.6ejb是以rmi为基础的': 4, '到底ejb是什么': 1, '这么几句就非常清楚的解释了ejb是什么（也是本人在高人的博文里看来的），而很多文章总是执着于解释ejb原理，ejb出现的意义': 1}
msmq:::{'msmq是一个window组件，可以在window组件向导中，应用程序服务器中添加它': 1, '(2)确定msmq是否已经安装': 2, 'msmq是microsoft的消息处理技术，运行平台为microsoftwindows操作系统': 1}
flink:::{'apacheflink是一个分布式处理引擎，在有界或无界数据流上进行有状态的计算': 1, 'flink是一个分布式系统，并且需要计算资源才能进行计算，flink集成了通用的集群管理方案，例如hadoopyarn,apachemesos,以及kubernetes，也可以离线的方式安装': 1, 'flink是一个分层架构的系统,每一层包含的组件都提供了特定的抽象,用来服务于上层组件,flink分层的组件包含如下:从上至下:': 1, 'apacheflink是用于无界和有界的数据流上的有状态计算的框架': 1, 'apacheflink是一个框架和分布式处理引擎，用于在无边界和有边界数据流上进行有状态的计算': 2, 'flink是目前开源社区中唯一一套集高吞吐、低延迟、高性能三者于一身的分布式流式数据处理框架': 1, '按照apache官方的介绍，flink是一个对有界和无界数据流进行状态计算的分布式处理引擎和框架': 1, 'flink是一个针对流数据和批数据的分布式处理引擎': 1, 'flink是一个比spark起步晚的项目，但是并不代表flink的前途就会暗淡': 1, 'flink是一个低延迟、高吞吐、统一的大数据计算引擎': 1, '接下来从开源技术的角度，来谈一谈apacheflink是如何诞生的，它是如何成长的': 1, '早期，flink是做batch计算的，但是在2014年，stratosphere里面的核心成员孵化出flink，同年将flink捐赠apache，并在后来成为apache的顶级大数据项目，同时flink计算的主流方向被定位为streaming,即用流式计算来做所有大数据的计算，这就是flink技术诞生的背景': 1, 'flink是如何做到在checkpoint恢复过程中没有任何数据的丢失和数据的冗余': 1, '下面介绍flink是如何解决乱序问题的': 1, '目前flink已经是一个主流的流计算引擎，很多互联网公司已经达成了共识：flink是大数据的未来，是最好的流计算引擎': 1, 'apacheflink是一个计算框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算': 1, 'effectiveapacheflink（一）apacheflink是什么?': 1, 'apacheflink是一个分布式系统，它需要计算资源来执行应用程序': 1, 'apacheflink是一个针对无界和有界数据流进行有状态计算的框架': 2, 'flink是一个能够处理任何类型数据流的强大处理框架': 1, 'apacheflink是一个面向数据流处理和批量数据处理的分布式的开源计算框架，能够支持流处理和批处理两种应用类型': 1, 'apacheflink是一个面向分布式数据流处理和批量数据处理的开源计算平台，提供支持流处理和批处理两种类型应用的功能': 2, 'flink是完全支持流处理，也就是说作为流处理看待时输入数据流是无界的；批处理被作为一种特殊的流处理，只是它的输入数据流被定义为有界的': 2, 'flinktask的切分与spark不同的地方在于spark是通过rdd的依赖关系实现stage的划分⽽而flink是通过operatorchain的概念实现task的拆分': 1}
mesos:::{'apachemesos是一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享，可以运行hadoop、mpi、hypertable、spark': 1, 'mesos是一个双层调度器': 1, '然而，根本不是那么回事儿，集群节点的优化，磁盘，网络的设置，等等这些，mesos是不会帮你干的': 1, 'a9：zookeeper是一个为分布式应用提供一致性服务的软件，而mesos是一个分布式应用': 1, 'q13：假设集群里有3台服务器，每台服务器可用内存16g，现在调度器要运行一个任务需要24g内存，那么mesos是把整个集群的48g内存当成一个整体来提供，还是会向调度器提供每台服务器剩余的内存,也就是说下面两种情况哪种才是正确的：': 1, '首先，mesos是一个分布式的架构，它分mesosmaster和mesosslave，slave和master分别有不同的职责': 1, '因为mesos是多个master，为了达到ha的需求，只要一个master活的，那么整个服务就能得到保证': 1, 'mesos是apache下的开源分布式资源管理框架，被称为是分布式系统的内核': 1, '简要来说，kubernetes和mesos是“亦敌亦友”的关系': 1, 'mesos是分布式系统内核，它可以将不同的机器整合在一个逻辑计算机中，有着非常优秀的资源调度策略，可以认为mesos和kubernetes的愿景差不多': 1, '但是资源分配器智能化程度不同，mesos是基于resourceoffer的调度机制，包含非常少的调度语义，他只是简单的将资源推给各个应用程序，由应用程序选择是否接受资源，而mesos本身并不知道各个应用程序资源需求；yarn则不同，应用程序的applicationmaster会把各个任务的资源要求汇报给yarn，yarn则根据需要为应用程序分配资源': 1, '总体上看，mesos是一个master/slave结构，其中，master是非常轻量级的，仅保存了framework和mesosslave的一些状态，而这些状态很容易通过framework和slave重新注册而重构，因而很容易使用了zookeeper解决mesosmaster的单点故障问题': 1, 'mesos是一个集群管理平台': 1, 'mesos是一个开源的资源管理系统，可以对集群中的资源做弹性管理': 1, '首先，mesos是一个资源调度框架，并非一整套完整的应用管理平台，本身是不能干活的': 1, 'mesos是apache下的一个开源项目，最初起源加州大学伯克利分校amplab': 1, '就像操作系统将pc的处理器和ram放入资源池，使其可以为不同的进程分配和释放资源，所以在数据中心操作系统这个概念下，mesos是作为整个集群的分布式内核': 1}
ooize:::{'而ooize是将任务随机分配到我们的集群环境中': 1}
zeppelin:::{'通过我其他的zeppelin分析文章，大家可以从中了解zeppelin是什么样的': 1, 'zeppelin是共享式、notebook式的大数据分析环境，以repl的方式执行以paragraph为最小粒度的代码段': 1, 'apachezeppelin是一个让交互式数据分析变得可行的基于网页的开源框架': 1, '如果需要设置权限，zeppelin是使用shiro做用户权限管理的，拷贝shiro.ini.template为shiro.ini，加入用户和权限': 1, 'apachezeppelin是一款基于web的notebook(类似于jupyternotebook)，支持交互式地数据分析': 1, '“apachezeppelin是一个让交互式数据分析变得可行的基于网页的开源框架': 1, 'zeppelin是一个提供交互数据分析且基于web的笔记本': 1, 'apachezeppelin是基于web的笔记本，支持sql、scala等数据驱动的交互式数据分析和协作文档': 1, 'zeppelin是一个基于web的笔记本，可以直接在浏览器中编写代码，对数据进行查询分析并生成报表或图表，做出数据驱动的、交互、协作的文档，并且可以共享笔记': 1, 'zeppelin是一个高性能，高可用的分布式key-value存储平台，以高性能、大集群为目标，说平台是因为zeppelin不是终点而是起点，在zeppelin的基础上，不仅能够提供kv的访问，还可以通过简单的一层转换满足更复杂的协议需求': 1, 'zeppelin是一个基于web的notebook，提供交互数据分析和可视化': 1}
mycat:::{'mycat是目前最流行的基于java语言编写的数据库中间件，是一个实现了mysql协议的服务器，前端用户可以把它看作是一个数据库代理，用mysql客户端工具和命令行访问，而其后端可以用mysql原生协议与多个mysql服务器通信，也可以用jdbc协议与大多数主流数据库服务器通信，其核心功能是分库分表': 3, 'mycat是基于阿里开源的cobar产品而研发，cobar的稳定性、可靠性、优秀的架构和性能以及众多成熟的使用案例使得mycat变得非常的强大': 3, '对于软件工程师，mycat是一个近似等于mysql的数据库服务器，你可以用连接mysql的方式去连接mycat（除了端口不同，默认的mycat端口是8066而非mysql的3306，因此需要在连接字符串上增加端口信息），大多数情况下，可以用你熟悉的对象映射框架使用mycat，但建议对于分片表，尽量使用基础的sql语句，因为这样能达到最佳性能，特别是几千万甚至几百亿条记录的情况下': 1, '对于架构师，mycat是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分表分库、容灾备份，而且可以用于多租户应用开发、云平台基础设施、让你的架构具备很强的适应性和灵活性，借助于即将发布的mycat只能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据，你可以自动或手工调整后端存储，将不同的表映射到不同存储引擎上，而整个应用的代码一行也不用改变': 1, 'mycat是数据库中间件，介于数据库与应用之间，进行数据处理与交互的中间服务': 1, '上诉种种都是官网对其定义，是否还是有些模糊，下面我们通过一个分库分表的案例来讲解mycat是什么和mycat中核心的概念和名词解释，案例如下图：': 1, 'mycat是一个介于数据库与应用之间，进行数据处理与交互的中间服务': 1, '一、mycat概述mycat是一款由阿里cobar演变而来的用于支持数据库读写分离、分片的分布式中间件': 1, '1)mycat是java语言编写，在安装mycat前需要安装jdk，本次java版本是1.7': 1, '当时就在想mycat是什么东西': 1, '一、什么是mycat：mycat是一个开源的分布式数据库系统，是一个实现了mysql协议的服务器，前端用户可以把它看作是一个数据库代理，用mysql客户端工具和命令行访问，而其后端可以用mysql原生协议与多个mysql服务器通信，也可以用jdbc协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为n个小表，存储在后端mysql服务器里或者其他数据库里': 1, '所以可以这样理解：数据库是对底层存储文件的抽象，而mycat是对数据库的抽象': 2, '7.mycat是怎样实现分库分表的': 1, 'mycat是经过下面的过慢慢演变而来的:': 1, '既然mycat是一个数据库中间件，那么这个数据库中间件它有哪些使用场景呢，什么情况下我才需要时候用mycat呢': 1, 'mycat是java编写的中间件.开源,免费.有非常多的人和组织对mycat实行开发,维护,管理,更新.mycat版本提升较快,可以跟随环境发展.如果有问题,可以快速解决.mycat有开源网站和开源社区.且有官方发布的电子书籍.mycat是阿里原应用corba转型而来的.': 1, 'mycat的架构其实很好理解，mycat是代理，mycat后面就是物理数据库': 1, '根据mycat官网-http://mycat.io/的描述可以知道，mycat是如下的一个东东：': 1, '总结一下就是：mycat是一款数据库中间件，类似于tomcat容器或者相关的web中间件': 1, 'mycat是开源社区在阿里cobar基础上进行二次开发，解决了cobar存在的问题，并且加入了许多新': 1, 'mycat是一个开源的分布式数据库系统，是一个实现了mysql协议的服务器，前端用户可以把它看作是一个数据库代理，用mysql客户端工具和命令行访问，而其后端可以用mysql原生协议与多个mysql服务器通信，也可以用jdbc协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为n个小表，存储在后端mysql服务器里或者其他数据库里': 1}
autofac:::{'autofac是一种ioc容器，那么什么是ioc容器呢': 1, '上一教程我们学习了autofac是如何进行控制反转的就是把需要实例化的对象交给autofac先注册然后解析但是还是有很多问题这一教程关于参数传递有时候我们需要实例的对象中会有参数需要传递比如newaaa（stringa）就是存在构造器的情况那么使用autofac怎么解决这个问题注册时传参我们给上一教程的类进行改造twicestudy.cs': 1, 'autofac是一个ioc框架，最大的特点应该是可以不用配置文件，直接用c#代码来注册': 1, 'autofac是一款ioc框架，比较于其他的ioc框架，如spring.net，unity，castle等等所包含的，它很轻量级性能上非常高': 1}
ota:::{'10.编包前，修改out目录下的build.prop，型号，默认语言等（这里改成了中文，为了验证ota是否能升级成功）': 1}
protocol:::{'signalprotocol是真正的端到端的通讯加密协议，号称是世界上最安全的通讯协议，任何第三方包括服务器都无法查看通讯内容，热门应用facebookmessenger，whatsapp，singalapp都采用的此协议': 1, '以上介绍了signalprotocol在双方通讯和群组聊天中的加密设计，可以看出，signalprotocol是真正端到端加密通讯协议，提供了消息的前向安全和后向安全，是最安全的加密协议之一': 1, '一、protocol是什么': 1, 'protocol是服务器端和客户端之间的一种约定，在软件编程上称为接口，服务器端和客户端通过这个约定信息的互通': 1, '二、protocol是干什么的，为什么要有protocol': 1, 'efi_driver_binding_protocol是uefi驱动开发一定会用到的一个protocol，它负责驱动的安装与卸载': 1, 'handleprotocol是openprotocol的简化版，在调用handleprotocol时不必再传入agenthandle、controllerhandle和attribute': 1, '之前提到过nsurlprotocol是一个抽象类，所以不能够直接使用必须被子类化之后才能使用': 1}
kibana:::{'kibana是一个开源的分析与可视化平台，设计出来用于和elasticsearch一起使用的': 1, '步骤1:kibana是什么步骤2:下载并启动步骤3:验证启动步骤4:运行测试': 1, '步骤1:kibana是什么kibana是在elasticsearch有了相当多的数据之后，进行分析这些数据用的工具': 1, '但是呢，基本的三大组件elasticsearch，logstash，kibana是不能少的': 1, 'kibana是一个针对elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在elasticsearch索引中的数据': 2, 'kibana是elasticsearch的可视化平台，依赖elasticsearch，需要优先安装elasticsearch': 1, 'kibana是一款开源的数据分析和可视化平台，它是elasticstack成员之一，设计用于和elasticsearch协作': 1, 'kibana是一个免费且开放的用户界面，能够让你对elasticsearch数据进行可视化，kibana是一个针对elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在elasticsearch索引中的数据': 1, '注：kibana使用ps-ef|grepkibana是查不到进程的，主要原因是因为kibana是node写的，所以kibana运行的时候是运行在node里面': 1, '查看kibana是否成功启动，启动成功则能访问成功': 1, 'kibana是一个为elasticsearch平台分析和可视化的开源平台，使用kibana能够搜索、展示存储在elasticsearch中的索引数据': 1, 'kibana是在elasticsearch有了相当多的数据之后，进行分析这些数据用的工具': 1, 'kibana是世界上最受欢迎的开源日志分析平台elkstack中的“k”，它为用户提供了一个工具，用于在存储于elasticsearch集群中的日志数据进行检索，可视化和构建仪表板': 1, '如果目标分析是您的日志，对于任何记录支持的用例-故障排除，取证，开发，安全性，kibana是您唯一的选择': 1, 'grafana与时间序列数据库（如graphite或influxdb）是用于度量分析的组合，而kibana是流行的elkstack的一部分，用于探索日志数据': 1, 'kibana是一个与elasticsearch协同工作的开源分析和可视化平台，kibana可以让你更方便地对elasticsearch中数据进行操作，包括高级的数据分析以及在图表中可视化您的数据': 1}
echo:::{'echo服务是一种非常有用的用于调试和检测的工具': 2, '今天就来介绍echo服务，echo服务是最基本的服务': 1, '不清楚是cf版本更新的原因还是别的什么，反正按照官方给出的教程添加echo是无法成功的': 1, 'echo是互联网上的一个标准协议，它是一个非常有用的调试和测量工具，echo服务器简单的把收到的任何消息发给客户端': 1}
drillbit:::{'也就是说,集群的drillbit服务可以执行一个物理计划分解出来的physicaloperatorsphysicaloperators可以被集群的多个drillbit执行.通常drillbit计算节点上也运行着dn这样的数据存储节点,而操作符需要存储的数据资源所以操作符会选择离存储资源最近的drillbit,这样的drillbit是最优的endpoint.': 1, '的默认内存drillbit是8g,但16g更好,或者更高,这取决于工作负载': 1, 'drillbit是进程运行在每个活动节点坐标、计划、并执行查询，以及跨集群分发查询工作最大化数据所在位置': 1, 'drillbit是处理运行在每个活动节点上的坐标、查询计划和执行查询，以及跨集群分发查询任务以实现数据本地性的最大化': 1, 'drill是一个类似presto的mpp数据库，drillbit是一个类似prestowork节点的常驻进程，和hadoop的dn进程混部，可以利用hdfs的短路读的特性': 1}
tablet:::{'然后，leader将负责检测tablet是否已过期或不存在，在哪种情况下必须复制，或者是否可以正常捕获': 1, '一个tablet是一个64kb块的数据序列并且格式为sstable9，bigtable有三种类型的服务器：-master服务器分配tablet服务器，它跟踪tablet在哪里并且如果需要则重新分配任务-tablet服务器为tablet处理读写请求': 1, 'table由按照rowkey排序后划分出的子片tablet组成，所以tablet是逻辑概念，': 1}
oozie:::{'oozie是运行在hadoop平台上的一种工作流调度引擎，它可以用来调度与管理hadoop任务，如，mapreduce、pig等': 3, 'oozieisaworkflowschedulersystemtomanageapachehadoopjobs.oozie是一个工作流调度系统用来管理hadoop任务工作流调度：工作流程的编排，调度：安排事件的触发执行(时间触发,事件触发)': 1, '1.oozie是cloudeara公司共享给apache的一个开源顶级项目，提供对hadoopmapreducehivepig的任务的调度；oozie需要部署到一个javaservlet容器中(如：tomcat)运行，需要使用关系型数据库存储调度信息2.oozie工作流的定义，同jbossjbpm提供的jpdl一样，提供了类似流程定义语言hpdl,通过xml格式实现流程定义': 1, '(说明:oozie是在servlet容器中运行的，可以用tomcat等其他web容器，也可以使用内嵌的tomcat或jetty服务器，': 1, 'oozie是一种javaweb应用程序，它运行在javaservlet容器——即tomcat——中，并使用数据库来存储以下内容：': 1, 'oozie是一个事务系统，其已经内在支持了自动化和手动的重试机制': 1, '1、oozie的介绍oozie是一个工作流引擎服务器,用于运行hadoopmap/reduce和hive等任务工作流.同时oozie还是一个javaweb程序,运行在javaservlet容器中,如tomcat中': 1, 'oozie是一个管理hdoop作业（job）的工作流程调度管理服务': 1, '4.oozie是一个可扩展，数据感知的服务，允许你在hadoop上使用运行一系列独立的任务': 1, '\u3000\u3000工作流定义：oozie是通过xml定义的而azkaban为properties来定义': 1, '用户可根据自己实际需求定义工作流，设置定时或触发任务，可以说oozie是整个大数据工作中最后的一道关卡，如果任务一旦中断则给用户带来巨大损失': 1, 'oozie是一个管理apachehadoop作业的工作流调度系统': 1, 'oozie是一个可伸缩、可靠和可扩展的系统': 1, '工作流定义：oozie是通过xml定义的而azkaban为properties来定义': 2, '那么，对于oozieworkflow中的一个个的action（可以理解成一个个mapreduce任务）oozie是根据什么来对action的执行时间与执行顺序进行管理调度的呢': 1, '关于控制台：oozie是有web界面提供的，可以直接进行web操作，后期方便又实用，但是这里有个坑，通过添加服务打开的web界面上面显示如下图：': 1, '由于oozie是一种支持基于hadoop处理组件的工作流引擎，所以它的语法完全是以hadoop执行为中心的——hadoop文件系统、map/reduce、pig等等': 1}
azkaban:::{'1.azkaban是什么': 2, 'azkaban是由linkedin公司推出的一个批量工作流任务调度器，主要用于在一个工作流内以一个特定的顺序运行一组工作和流程，它的配置是通过简单的key:value对的方式，通过配置中的dependencies来设置依赖关系，这个依赖关系必须是无环的，否则会被视为无效的工作流': 1, 'azkaban是什么?': 2, 'azkaban是一套简单的任务调度服务，整体包括三部分webserver、dbserver、executorserver': 2, 'azkaban是由linkedin开源的一个批量工作流任务调度器': 3, 'azkaban是由linkedin开源的做批量工作流任务的调度器': 1, 'azkaban是一款基于java编写的任务调度系统': 1, 'azkaban是基于javaweb开发的，也就是根据servlet开发，没有ssm和springboot框架，其实有点low了，但是别人用low的技术也写出优秀的调度框架': 1, 'azkaban是由linkedin开源的一个批量工作流任务调度器用于在一个工作流内以一个特定的顺序运行一组工作和流程azkaban定义了一种kv文件格式来建立任务之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪你的工作流': 1, '1.1azkaban是什么': 1, '1）azkaban是由linkedin公司推出的一个批量工作流任务调度器': 1, '总体来说，ooize相比azkaban是一个重量级的任务调度系统，功能全面，但配置使用也更复杂': 2, '如果可以不在意某些功能的缺失，轻量级调度器azkaban是很不错的候选对象': 2, '这次我们只是进行测试azkaban是否能正常工作故不设置时间间隔': 1, '我们知道无论是哪个比较火的组件，都是需要兼容hadoop的，无论是spark，flink等，那么hadoop肯定也是需要使用的，那么该如何使用的更有效率，azkaban是一个非常重要的组件': 1, 'azkaban是一个在linkedin开发用来跑hadoop作业的一款批处理作业调度框架，azkaban通过作业的依赖关系解决了作业顺序和提供了更加方便的web用户界面来维持和跟踪你的作业，根据azkaban官网官方文档翻译而来': 1, 'azkaban是由linkedin实现的为了解决hadoop作业依赖问题一个批处理调度平台': 2, 'azkaban是一个在linkedin开发用来跑hadoop作业的一款批处理作业调度框架，azkaban通过作业的依赖关系解决了作业顺序和提供了更加方便的web用户界面来维持和跟踪你的作业': 1, '使用azkaban是相当容易的，azkaban使用*.job键-值属性文件来定义在一个工作流中的单个任务，使用_dependencies_来定义作业链之间的依赖关系': 1, 'azkaban是由linkedin公司推出的一个批量工作流任务调度器，主要用于在一个工作流内以一个特定的顺序运行一组工作和流程，它的配置是通过简单的key:value对的方式，通过配置中的dependencies来设置依赖关系': 3, 'azkaban是一种类似于oozie的工作流控制引擎，可以用来解决多个hadoop（或spark等）离线计算任务之间的依赖关系问题': 1, 'azkaban介绍azkaban是由linkedin（领英）公司推出的一个批量工作流任务调度器，用于在一个工作流内以一个特定的顺序运行一组工作和流程': 1, 'azkaban是工作流调度系统': 1}
idc:::{'idc是对入驻（hosting）企业、商户或网站服务器群托管的场所；是各种模式电子商务赖以安全运作的基础设施，也是支持企业及其商业联盟（其分销商、供应商、客户等）实施价值链管理的平台': 1, 'idc是对入驻(hosting)企业、商户或网站服务器群托管的场所;是各种模式电子商务赖以安全运作的基础设施，也是支持企业及其商业联盟其分销商、供应商、客户等?实施价值链管理的平台': 1, 'idc是什么意思': 1, '可见，idc是internet企业分工更加细化的产物': 1, 'visionstackforidc是云容科技倾力打造的一款基于visionstack的idc云化解决方案，针对传统的idc企业提供“转云”及“云平台”建设方案，并可根据具体的客户需求量身定制': 1, '传统idc是指互联网数据中心（internetdatacenter，简称idc），idc是一种拥有完善的设备（包括高速互联网接入带宽、高性能局域网络、安全可靠的机房环境等）、专业化的管理、完善的应用的服务平台': 1}
csp:::{'csp是真正执行密码运算的独立模块': 1, '每个csp是实现全部加密操作的独立模块': 1, 'csp是scrum的中级认证，难度较大，目前已通过csp认证的人数也较少': 1, 'csp是windows安全应用的基础，在windows操作系统上实现https安全浏览（即ssl安全数据通信）和实现安全隧道(如ipsec)功能，都必需有csp参与密码运算': 1, 'cryptoapi通过计算机中的advapi.dll与crypt32.dll间接地调用cryptospi向用户在步骤1中选择的“加密服务提供程序(csp)”(此处的csp是安装在计算机上或计算机可以访问的设备上)提供正确的数据': 1, '(1)如果csp是基于软件的，则它在计算机上生成一个公钥和一个私钥，这两个密钥通常称为密钥对': 1, '(2)如果csp是基于硬件（如usbkey中内嵌的csp）的，则它指导一个硬件生成密钥对': 1, 'csp与windows的接口以dll形式实现，csp是真正执行加密工作的独立模块': 3, '次csp是一个prov_rsa_full类型的csp，它具有一下特点：': 3, 'csp是真正执行密码运算的独立模块物理上一个csp由两部分组成：一个动态连接库，一个签名文件签名文件保证密码服务提供者经过了认证，以防出现攻击者冒充csp若加密算法用硬件实现，则csp还包括硬件装置microsoft通过捆绑rsabaseprovider，在操作系统中提供一个csp，使用rsa公司的公钥加密算法，更多的csp可以根据需要增加到应用中': 1, 'csp是一个真正执行加密功能独立模块,典型的csp有微软rsabaseprovider': 1, 'csp是真正执行加密工作独立的模块': 1}
slave:::{'一、master&slave是什么': 1}
raftserver:::{'raftserver是raft协议的服务端，主要有如下成员或者行为：': 1, '这个raftserver是goraft实现的那个': 1}
deliveryservice:::{'deliveryservice是多领域模型的一个很好的例子': 2}
nsq:::{'nsq是一个基于go语言的分布式实时消息平台，它基于mit开源协议发布，由bitly公司开源出来的一款简单易用的消息中间件': 1, '由于nsq是用golang编写，所以安装非常简单，只需要去github上下载编译好的可执行二进制文件即可': 1, 'nsq是消息队列的一种实现，采用producer/consumer基于订阅的模式，开源、设计简单、架构容易理解，从而debug问题变得简单明确，': 1, 'nsq是实时的分布式消息处理平台，其设计的目的是用来大规模地处理每天数以十亿计级别的消息': 2, 'nsq是go语言编写的，开源的分布式消息队列中间件，其设计的目的是用来大规模地处理每天数以十亿计级别的消息': 3, 'nsq是一个基于go语言开发的分布式实时消息架构': 1, 'nsq是go开发的，比较轻量的一款mq': 1}
kylin:::{'apachekylin是一个开源的分布式分析引擎，提供hadoop/spark之上的sql查询接口及多维分析(olap)能力以支持超大规模数据，最初由ebay开发并贡献至开源社区': 1, 'kylin是一款元数据驱动型应用程序': 3, '1)标准sql接口：kylin是以标准的sql作为对外服务的接口': 1, '由ebay开源的一个大数据olap框架，2014年11月加入了apache，项目名字也改成了“apachekylin”，apachekylin是唯一来自中国的apache顶级开源项目，定位于在hadoop平台之上实现传统数据仓库，商业智能的能力，提供交互式的，多维分析能力，并提供在传统数据仓库技术所不能做到的超大规模数据集的快速查询，并使用普通的pc硬件，而无需采购专用的，私有的一体机或者高端存储等': 1, 'kylin是一个molap系统，通过预计算的方式缓存了所有需要查询的的数据结果，需要大量的存储空间（原数据量的10+倍）': 1, 'apachekylin是一个开源的分布式分析引擎，提供hadoop/spark之上的sql查询接口及多维分析（olap）能力以支持超大规模数据，最初由ebayinc开发并贡献至开源社区': 1, '1）标准sql接口：kylin是以标准的sql作为对外服务的接口': 2, '如果缓存不命中则使用服务器内嵌的calcite创建一个向calcite的jdbcconnection，然后使用jdbc的方式获取执行结果，在使用calcite的时候用户只需要给calcite提供数据，calcite能够完成其他物理算子的优化和执行，但是对于kylin来说，它深度定制了calcite，增加了一些优化的策略，所以总的来说查询可以分成两部分：1、kylin是如何使用calcite完成sql的解析，获取sql的上下文；2、kylin如何从预计算的数据中获取数据并进行计算的': 1, 'kylin是一个分布式的大数据分析引擎，提供在hadoop之上的sql接口和多维分析能力（olap），可以做到在tb级的数据量上实现亚秒级的查询响应': 2, 'kylin的不足主要是体现在首先由于kylin是一个分析引擎，只读，不支持insert，update，delete等sql操作，用户修改数据的话需要重新批量导入（构建）；其次，kylin用户需要预先建立模型后加载数据到cube后才可进行查询；最后，使用kylin的建模人员需要了解一定的数据仓库知识': 2, '3）kylin是一个只读型的分析引擎，不适合细粒度修改数据，但适合做海量数据的交互式在线分析，通常跟数据仓库以及bi工具结合使用，目标用户为业务分析人员': 2}
logstash:::{'logstash是一个数据分析软件，主要目的是分析log日志': 1, '整一套软件可以当作一个mvc模型，logstash是controller层，elasticsearch是一个model层，kibana是view层': 1, '在典型应用中，filebeat与logstash是部署在不同的主机上的': 1, 'logstash是一个强大而灵活的工具，可以读取、处理和传送任何类型的数据': 1, '另一方面，logstash是一种灵活的工具，可用于读取、转换和采集数据，提供了大量的过滤器、输入和输出插件': 1}
httpfs:::{'而httpfs是clouera开发的，也捐给了apache，可见博客：httpfsforcdh3–theapachehadoopfilesystemoverhttp': 2, 'httpfs是独立于hdfs的一个服务': 2, '1、webhdfs是hdfs内置的、默认开启的一个服务，而httpfs是hdfs一个独立的服务，若使用需要配置并手动开启': 3, '即webhdfs面向的是集群中的所有节点，首先通过namenode，然后转发到相应的datanode，而httpfs面向的是集群中的一个节点（相当于该节点被配置为httpfs的gateway）3、webhdfs是hortonworks开发的，然后捐给了apache；而httpfs是cloudera开发的，也捐给了apache': 2, '1：httpfs是cloudera公司提供的一个hadoophdfs的一个http接口，通过webhdfsrestapi可以对hdfs进行读写等访问': 1, '1、介绍httpfs是cloudera开发的，也捐给了apache': 1, 'httpfs是hdfs一个独立的服务，若使用需要手动安装（cdh中安装hdfs时将httpfs勾选上即可）': 1, '3、webhdfs是hortonworks开发的，然后捐给了apache；而httpfs是cloudera开发的，也捐给了apache': 1}
rackspace:::{'rackspace是一家全球性的云服务提供商，在为跨国企业提供服务方面拥有多年的经验，rackspace拥有专业技术力量，能够灵活多变、以快速响应能力和强大的sla(服务等级协议)为客户提供热诚支持(fanaticalsupport)服务': 1, '1998年就开始对外提供托管服务的rackspace是数据中心外包服务领域的“老资格了”': 1, 'rackspace是(美国航天局)和nasa(一家公司)共同发起的开源项目，他是一系列软件项目的组合': 2}
combo:::{}
rpcbind:::{'rpcbind是nfs中用来进行消息通知的服务实验环境：': 1}
wsbdav:::{}
mogilefsd:::{'现在创建配置文件目录和修改主配置文件，mogilefs的主daemon，mogilefsd是调度器(tracker)的配置文件': 1}
raft:::{'raft是一种更易于理解的分布式共识算法，核心协议本质上还是师承paxos的精髓，不同的是依靠raft模块化的拆分以及更加简化的设计，raft协议相对更容易实现': 1, 'sofajraft是一个基于raft一致性算法的生产级高性能java实现，支持multi-raft-group，适用于高负载低延迟的场景': 1, 'sofajraft是从百度的braft移植而来，做了一些优化和改进，感谢百度braft团队开源了如此优秀的c++raft实现': 1, '简单的说，raft是一种易于理解的一致性算法，其功能相当于paxos': 1, 'raft是专门针对paxos难以理解的缺陷而重新设计的新算法，为使算法容易理解，采用了模块化设计方法，将整个过程划分为若干子过程，包括leader选举，日志分发，确保一致性': 1, 'raft是一个用于管理日志一致性的协议': 1, 'vr和raft是基于“集中式”的设计的，它们在算法中自带了选主，并要求在每个“view”或“term”中只能存在一个leader，由leader来负责定序等操作，这样极大的简化了设计和实现的难度，': 1, 'raft一致性算法就是其中一个比较优异的选择，raft是一种为了管理复制日志的一致性算法': 1, '以上是从集群角度看网络分区，接下来看客户端收网络分区的影响：因为raft是强leader型算法，客户端使用etcd服务只能通过leader进行，ab分区后，不存在leader，所以无法对外提供服务，之前连接ab节点的客户端将无法获取服务；客户端无法感知leader发生变换，它将请求交给ab时，因为ab知道自己不是leader，但同时也不知道leader是谁，所以会向客户端响应轮询节点更换，找到新的leader': 1, 'raft是一种为了管理复制日志的一致性算法': 1, 'raft是一种用来管理章节2中描述的复制日志的算法': 2, '这一节将介绍客户端是如何和raft进行交互的，包括客户端如何发现领导人和raft是如何支持线性化语义的': 2, '但是，如上述，raft是可以执行同一条命令多次的：例如，如果领导人在提交了这条日志之后，但是在响应客户端之前崩溃了，那么客户端会和新的领导人重试这条指令，导致这条命令就被再次执行了': 2, '二、raft算法复制raft是由atomix实施以在节点之间共享状态的特定分布式系统协议': 1, 'raft算法中文翻译raft是目前应用较为广泛的一致性算法，解决了分布式下的一致性问题，在服务发现中也被广泛运用，因此想要了解服务发现，建议也了解这个算法': 1, 'raft是用于管理republicatedlog的一致性算法': 1, 'raft是能够实现分布式系统强一致性的算法，每个系统节点有三种状态follower，candidate，leader': 1, '下面我会来看看raft是如何解决这个问题的': 1, 'raft是一种管理复制日志的算法': 1, '因此，raft是一致性协议，是用来保障servers上副本一致性的一种算法': 1, 'raft是一种通过日志复制来实现的一致性算法，提供了和(多重)paxos算法相同的功能和性能，但是它的算法结构和paxos是不同的，因此raft算法更容易理解和应用': 1}
gossip:::{'gossip是一种去中心化、容错并保证最终一致性的协议': 1, 'gossip是为了解决分布式遇到的问题而设计的': 1, 'gossip是一种去中心化的分布式协议，用于实现节点或者进程之间的信息交换，通常被用在大型的无中心化网络环境中，并且假设网络环境不太稳定，是分布式系统中被广泛使用的一种最终一致性协议': 1, '简单的理解，gossip是一种网络通信协议，这种协议类似于人类中的谣言传播': 1, 'gossip是区域链相当核心的模块了，值得好好学习一下': 1, '说到底，gossip服务是处理消息的，每种类型的消息有不同的用途，gossip服务也使用不同模块处理不同类型的消息': 1, '在这个教程中，我们将分阶段考察fabric网络启动时gossip的运行机制，学习fabric中的一些核心概念，例如主导节点/leader、锚节点/anchor等，理解gossip是如何帮助hyperledgerfabric成为一个可伸缩的联盟链平台': 1, 'gossip是一种去中心化的分布式协议，数据通过节点像病毒一样逐个传播': 1, '上述优缺点的本质是因为gossip是一个带冗余的容错算法，是一个最终一致性算法，虽然无法保证在某个时刻所有节点状态一致，但可以保证在“最终所有节点一致”，“最终”的时间是一个理论无法明确的时间点': 1, 'clustermsgdatagossip是ping、pong和meet消息的结构体，它会包括发送消息节点维护的其他节点信息，也就是上文中clusterstate中nodes字段包含的信息，具体代码如下所示，你也会发现二者的字段是类似的': 1, '答案就是gossip协议，gossip是一种去中心化的分布式协议，用于实现节点之间的信息交换，大名鼎鼎的bitcoin也使用了gossip来传播交易和区块信息': 1}
cdn:::{'cdn是内容分发网络，器功能是将网站内容发布到最接近用户的边缘节点，使网民可就近取得所需内容，提供网民访问的响应速度和成功率，同时能够保护源站': 1, 'cdn是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率': 2, '这部分大概能看出来cdn是在因特网的基础上，又搭建了一层网络，这个网络是有针对性的，会对内容进行一定的分类组合，通过最近的网络节点，达到最快速的访问速度': 1, '第五步，cdn是什么': 1, 'cdn是从传统it行业发展起来的一项服务': 1, 'cdn是只对网站的某一个具体的域名加速': 2, '而cdn是访问者就近取数据，而cdn的节点遍布各isp，从而保证了网站到任意isp的访问速度': 1, '首先cdn是为了改善互联网的服务质量的': 1, '\u3000\u3000那到底cdn是什么鬼，我们还得从西天取经说起……': 1, 'cdn是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率': 1, 'cdn是什么?': 1, '关于cdn是什么，此前网友详细介绍过': 1, 'cdn是contentdeliverynetwork的简称，即“内容分发网络”的意思': 1, '简单地说，cdn是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理4个要件，而内容管理和全局的网络流量管理(trafficmanagement)是cdn的核心所在': 1, '\u3000\u3000而cdn是访问者就近取数据，而cdn的节点遍布各isp，从而保证了网站到任意isp的访问速度': 1}
chubby:::{'chubby是一种面向松耦合的分布式系统的锁服务，通常用于为一个由适度规模的大量小型计算机构成的的松耦合的分布式系统提供高可用的分布式锁服务': 1, 'googlechubby是一个大名鼎鼎的分布式锁服务，gfs和bigtable等大型系统都用他来解决分布式协作、元数据存储和master选择等一系列与分布式锁服务相关的问题': 2, 'chubby是一个面向松耦合分布式系统的锁服务，通常用于为一个由大量小型计算机构成的松耦合分布式系统提供高可用的分布式锁服务': 3, '首先，chubby是什么': 1, '本质上，chubby是google设计的提供粗粒度锁服务的文件系统，存储大量小文件': 1, '要证明分布式容错算法的正确性通常比实现算法还困难，google没法证明chubby是可靠的，yahoo!也不敢保证它的zookeeper理论正确性': 1, 'googlechubby是一个分布式锁服务，chubby底层一致性实现就是以paxos为基础的': 1, 'chubby是一个面向松耦合分布式系统的锁服务，通常用于为一个由大量小型计算机构成的松耦合分布式系统提供高可用的锁服务': 1, '构建chubby是满足上述需求要求的工程努力；这不是研究': 1, 'chubby是一种分布式锁服务，旨在实现google分布式系统中活动的粗粒度同步；它已被广泛用作配置信息的名称服务和存储库': 1, 'chubby是一个面向松耦合分布式系统的锁服务，gfs（googlefilesystem）和bigtable等大型系统都是用它来解决分布式协作、元数据存储和master选举等一些列与分布式锁服务相关的问题': 1, '构建chubby是一种满足上文提到的各种需求的工程上的工作，不是学术研究': 2, '如果会话没有丢弃的话，chubby是相当不受延迟变化的影响的': 2, 'chubby是本是计划用于在单个公司内部运行的，因此针对它的恶意的服务拒绝袭击是很罕见的': 2, 'chubby是基于长期稳定的思想（well-establishedideas）之上的': 2, 'chubby是google设计的提供粗粒度锁服务的一个文件系统，它基于松耦合分布式系统，解决了分布的一致性问题': 2, 'chubby是怎样实现这样的“锁”功能的': 1, 'chubby是通过采consensusprotocol（很可能就是paxos算法）来解决这个问题的': 1, '论文中提到了一点，也就是上面我们所说的第一点，chubby是一个分布式的锁服务，但是开始的时候有人觉得应该设计一个支持paxos的协议库，然而实现一个锁服务相比于前者有以下优点：': 1, '这篇文章仅仅是介绍了chubby最基础部分，对于chubby有兴趣的朋友可以去参考论文[1]，这确实最为清楚的讲解了，正如开头所说，我们得清楚学习chubby是在学什么，我们学习的是它的设计思路，它解决问题的思路，而不是这是一个什么，怎么使用，毕竟这是闭源的，可能绝大多数人这辈子也用不上了': 1, 'chubby是什么从上面的这个实例可以看出，chubby首先是一个分布式的文件系统': 1, '但是，从更高一点的语义层面上，chubby是一个lockservice，一个针对松耦合的分布式系统的lockservice': 1, '那么，chubby是怎样实现这样的“锁”功能的': 1, '综上所述，chubby是一个lockservice，通过这个lockservice可以解决分布式中的一致性问题，而这个lockservice的实现是一个分布式的文件系统': 1, 'chubby是通过采用consensusprotocol（很可能就是paxos算法）来解决这个问题的': 1, 'chubby是一个分布式锁服务，面向松耦合的分布式系统的锁服务': 1, 'chubby是advisorylock，其他人可以（只是不建议）不解锁就直接访问文件': 1, 'chubby是coarse-grainedlock，可能锁住一个文件长达几小时，几天': 1}
mq:::{'mq是messagequeue,消息队列，也叫消息中间件，遵守jms（javamessageservice）规范的一种软件': 2, '举个例子：比如说activemq是老牌的消息中间件，国内很多公司过去运用的还是非常广泛的，功能很强大': 1, '而且rocketmq是基于java语言开发的，适合深入阅读源码，有需要可以站在源码层面解决线上生产问题，包括源码的二次开发和改造': 1, '所以中小型公司，技术实力较为一般，技术挑战不是特别高，用rabbitmq是不错的选择；大型公司，基础架构研发实力较强，用rocketmq是很好的选择': 1, 'rabbitmq是一款开源的，erlang编写的，基于amqp协议的消息中间件': 1, 'rabbitmq是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以rabbitmq为例子讲解第一种mq的高可用性怎么实现': 1, 'mq中消息失效：假设你用的是rabbitmq，rabbtimq是可以设置过期时间的，也就是ttl': 1, 'mq是先进先出的数据结构': 1, '在互联网架构中，mq是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务': 7, 'mq是互联网架构中常见的解耦利器': 1, '既然mq是互联网分层架构中的解耦利器，那所有通讯都使用mq岂不是很好': 5, 'mq是一个互联网架构中常见的解耦利器': 4, '二、mq是干嘛的': 3, 'mq是互联网架构解耦和解决高并发的常用方式.': 1, '既然mq是互联网分层架构中的解耦利器，那所有通讯都使用mq岂不是很好?这是一个严重的误区，调用与被调用的关系，是无法被mq取代的': 1, 'mq是用来通信的，利用消息队列暂存数据报文，跟数据库有本质区别': 1}
scribe:::{'scribe是facebook开源的日志收集系统，在facebook内部已经得到大量的应用': 6, 'scribe是facebook开源的分布式日志收集系统，目前在各大互联网公司内部已经得到大量的应用': 1, 'videoscribe介绍：videoscribe是国外的一款手绘视频软件，所以如果你直接到官网下载，它是英文版的，同时，你制作视频时不能写中文字幕，比较麻烦，小编用的是videoscribe中文版的，需要的朋友可以直接关注本公众号私聊客服要videoscribe中文版软件': 1, 'scribe是基于一个使用非阻断c++服务器的thrift服务的实现': 4, '由于thrift框架支持多做语言，而且scribe是基于thrift实现的，所以只要thrift支持的开发语言都可以与相应的应用系统集成开发': 1, '7、测试scribe是否安装成功': 1, 'scribe是facebook开源的一个基于thrift的日志收集框架，它为日志收集提供了一种容错且可扩展的方案': 1, 'scribe是用来收集日志的服务器.它具备很强的扩展能力,并且网络故障及服务器节点故障,都不会对日志收集造成影响': 1}
ordering:::{}
browserstack:::{'优惠券：browserstack是一项服务(由机器组成的云可以完成工作)，但是您可以从modern.ie的ie人员那里免费获得3个月的服务': 1}
glusterfs:::{'glusterfs是scale-out存储解决方案gluster的核心，它是一个开源的分布式文件系统，具有强大的横向扩展能力，通过扩展能够支持数pb存储容量和处理数千客户端': 3, 'glusterfs是一个免费的开源分布式文件系统，具有无中心节点、堆栈式设计、全局统一命名空间、高可用、高性能和横向扩展等特点，在业界被广泛使用': 1, 'centos7安装部署glusterfs一、glusterfs简介glusterfs是一个开源的分布式文件系统，是scale存储的核心，能够处理千数量级的客户端': 1, 'glusterfs是一个免费,开源的分布式文件系统（它属于文件存储类型）': 1, 'glusterfs是模块化堆栈式的架构设计，如上图所示': 1, '简言之，glusterfs是开放的全软件实现，完全独立于硬件和操作系统': 1, 'glusterfs是一个开源的分布式文件系统,是scale存储的核心,能够处理千数量级的客户端.在传统的解决方案中glusterfs能够灵活的结合物理的,虚拟的和云资源去体现高可用和企业级的性能存储.glusterfs通过tcp/ip或infinibandrdma网络链接将客户端的存储资块源聚集在一起,使用单一的全局命名空间来管理数据,磁盘和内存资源.glusterfs基于堆叠的用户空间设计,可以为不同的工作负载提供高优的性能.': 1, '在搭建的过程中，因为是要建立个远程文件服务器，glusterfs是个不错的选择，搭建glusterfs服务器费了不少周折，折腾了一个多星期才搞定，在这里有必要总结下': 1}
httpsqs:::{}
crm:::{'crm是企业的一项商业策略，它按照客户的分割情况有效的组织企业资源，培养以客户为中心的经营行为以及实施以客户为中心得业务流程，并以此来提高企业的获利能力、收入以及客户满意度': 1, 'crm是企业在营销、销售和服务业务范围内，对现实和潜在的客户关系以及业务伙伴关系进行多渠道管理的一系列过程和技术': 1, 'crm是为了消除企业在客户交互活动时的“单干”现象，整合销售、营销和服务业务功能的一个企业经营策略，它需要企业全方位协调一致的行动': 1, '随着crm系统越来越多的被提及，很多第一次接触crm的人往往并不清楚crm是什么': 1, '简单的说，crm是一款储存客户联系信息如姓名、地址和电话号码的软件，能够追踪客户各项活动如访问网站、打电话和发邮件等': 1, 'gartner认为，营销、销售和服务有一个共同特点，即都是同客户打交道，crm是将企业和客户打交道的全链条信息化，最后形成一套客户数据，帮助企业分析、理解客户，并采取不同的销售和服务策略，最终达到更高的客户满意度': 1, '除了功能性之外，gartner认为crm是一个业务战略，而不仅仅是一个系统工具，即crm是一个企业要真正地转变成以客户为中心运转的业务战略，企业必须去理解客户，必须深层次管理好与客户互动的每一个环节，最终通过更高的客户满意度，给企业带来可持续的业绩增长和发展': 1, 'crm是一个商业理念，适用于所有从事经营活动的产品或服务提供者': 1, 'crm是一个管理项目，它的效果是通过不断的改进而体现出来的': 1, '企业需要确定“为什么crm是必需的”，这对于确定创新的优先排序、获取投资的潜在收益尤为关键': 1, 'crm是以客户为核心系统，因此，在进行规划的时候应从客户的价值和客户的满意度出发': 1, 'crm是一个很好的工具，如果认为，上了系统就能实现什么功能，就大错特错了': 1, '误区之五：以企业为中心crm是面向消费用户、供应商或合作伙伴等客户的业务战略，因此，crm解决方案的部署应当首先从客户角度出发，而非单纯着眼于解决企业的内部问题': 1, 'crm是根据金融服务提供商的特定需求量身定制的，它是您推动业务增长所需的工具，对您有非常大的帮助：': 1, 'crm是customerrelationshipmanagement的简写，即客户关系管理': 1, '简单地说，crm是一个不断加强与顾客交流，不断了解顾客需求，并不断对产品及服务进行改进和提高以满足顾客的需求的连续的过程': 2, '小春crm是基于paas平台构建的企业级管理服务系统，具备高度的灵活扩展能力，能够帮助企业实现从线索转化、商机跟进到回款管理等销售全流程的精准管理，有效支撑企业的复杂业务需求及业务变化': 1, '一、crm是什么': 1, '对于企业而言，crm是一款不可或缺的管理工具，当企业拥有一款好的crm系统，是可以提升工作效率，也能够更好的让业务人员或第一线人员愿意参与crm相关活动；相对地，如果选择了不合适的crm系统，影响不单单单只是系统上线成功与否，可能还会影响业务活动，进而造成收入下降的可能性': 1, '以上就是今天分享的“crm是什么': 1, 'crm是英文customerrelationshipmanagement的简写，一般译作“客户关系管理”，crm产生于美国20世纪90年代，由gartnergroup（高德纳咨询公司）首先提出的': 1, '（2）scm与crm是相互依赖的关系': 1, '由此可以看出，erp、scm与crm是相辅相成的关系，结合在一起使用时，能为企业的发展发挥更大的价值': 1, '从以上方面，我们可以看出scrm是企业改善与客户关系的必然选择，企业不能单纯的只考虑该系统的理念，更多的应该将crm客户关系管理系统与自身的实际结合，scrm的出现既是一次跳跃的机会又是一次艰难的挑战': 1, '医院crm是什么': 1, '点镜scrm是微信官方接口，企业微信营销&管理神器，是由广州微企软件技术有限公司基于腾讯企业微信官方接口开发的，一款集微信营销与微信管理于一体的企业微信crm软件系统': 1, '点镜scrm是基于企业微信官方端口的营销管理系统，能帮助企业最大化利用企业微信的营销功能，并管控员工在微信上的工作轨迹，彻底杜绝员工飞单、私自收款、私删对话、私删客户、离职带走客户等潜在违规行为，保护企业客资的同时，提升企业营销能力': 2, 'crm管理系统可以找点镜，点镜scrm是微信官方接口，企业微信营销&管理神器，是由广州微企软件技术有限公司基于腾讯企业微信官方接口开发的，一款集微信营销与微信管理于一体的企业微信crm软件系统': 1}
memcache:::{'memcache是一套自由、开源、高性能、分布式的高速缓存系统': 1, 'memcache是一个存储键值对的hashmap，在内存中对任意的数据都可以使用key-value的方式存储，数据库可以来自数据库调用或api调用': 1, 'memcache是什么memcache是danga.com的一个项目，最早是为livejournal服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力': 2, '其实memcache是这个项目的名称，而memcached是它服务器端的主程序文件名，知道我的意思了把~~~~': 2, '首先认识下memcache是干嘛用的': 1, 'memcache是danga.com的一个项目，最早是为livejournal服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力': 1, 'memcache是一个自由、源码开放、高性能、分布式的分布式内存对象缓存系统，用于动态web应用以减轻数据库的负载': 2, 'memcache是一个存储键值对的hashmap，在内存中对任意的数据（比如字符串、对象等）所使用的key-value存储，数据可以来自数据库调用、api调用，或者页面渲染的结果': 2, '1、memcache是项目的名称': 2, 'memcache是一个基于c/s的结构：': 2, '从实现的角度看，memcache是一个非阻塞的、基于事件的服务器程序': 1, '现在的互联网项目,一般都会使用缓存，其中memcache是使用比较广泛的一个': 1}
conductor:::{'conductor是一个微服务的编排引擎': 2, '这个https://github.com/netflix/conductor是项目的github地址，': 2, 'conductor是netflix开源的一款微服务编排引擎，托管在github上，使用apachelicense2.0许可': 1, 'conductor是受到netflix需要运行全球流媒体业务流程的启发，而构建的基于云的微服务编排引擎': 1, '\u200bconductor是netflix公司开源的一款微服务编排框架，用于简化服务调度配置，使用户聚焦核心的业务代码实现，并且提供一定的监控功能': 1, 'conductor是netflix公司构建的基于云的微服务编排引擎，主要用于构建公司各种业务流程': 1, 'conductor是为满足上述需求而建立的，目前已在netflix上使用': 1, 'nova-conductor是nova-compute与数据库的中间件，nova-compute对数据库的crud操作都借由nova-conductor完成，nova-conductor通过rpc对外提供api服务': 1}
minify:::{'minify是用php写的，项目地址http://code.google.com/p/minify/安装1.下载最新的minify然后解压缩到minify目录': 2, 'minify是用php5开发的应用，通过遵循一些yahoo的优化规则来提高网站的性能': 3, 'minify是googlecode上的一个开源项目，我们可以前往这里围观': 1, 'minify是一个开源的github项目,可以点击查看项目地址': 1}
varnish:::{'varnish是一款高性能且开源的方向代理服务器和http加速器': 1, '1.1什么是varnishvarnish是一个web加速器,被安装在web应用程序前面,缓存web应用程序,并响应用求,varnish让您的web应用程序运行的更快,并且varnish灵活好用': 1, 'varnish是一款高性能的开源http加速器,varnish的功能与squid服务器相似，都可以用来做http缓存': 1, 'varnish是什么varnish作用是访问web速度的web加速器，被安装在web服务器之前，从而缓存web服务器的应用程序和数据，最后相应客户的请求': 1, 'varnish是一款高性能且开源的反向代理服务器和http加速器，其采用全新的软件体系机构，和现在的硬件体系紧密配合，与传统的squid相比，varnish具有性能更高、速度更快、管理更加方便等诸多优点': 1, '严格意义上说，varnish是一个高性能的反向代理软件，只不过与其出色的缓存功能相比，企业更愿意使用其搭建缓存服务器': 1, 'vcl是varnish配置语言：varnish是一个专门用于描述varnish请求处理和文件缓存策略规则的语言': 1, 'varnish是一款高性能且开源的方向代理服务器和http加速器，它的开发者poul-henningkampfreebsd核心的开发人员之一': 1, 'varnish采用全新的软件体系机构，和现在的硬件体系配合紧密，varnish是一个轻量级的cache和反向代理软件': 1, '一、简介varnish是高性能开源的反向代理服务器和http缓存服务器，其功能与squid服务器相似，都可以用来做http缓存': 1, 'varnish与squid相比，都是一个反向代理缓存服务器，并且都是开源的，varnish的稳定性很高，并且访问速度很快，因为squid是从硬盘读取缓存的数据，而varnish把数据存放在内存中，直接从读取内存，避免了频繁在内存、磁盘中交换文件，所以varnish要相对更高效，varnish可以支持更多的并发连接，因为varnish的tcp连接释放要比squid快；varnish也可以通过管理端口，使用正则表达式批量的清除部分缓存，而squid是做不到的；squid属于是单进程使用单核cpu，但varnish是通过fork形式打开多进程来做处理，所以可以合理的使用所有核来处理相应的请求': 1, '一、varnish简介varnish是一款高性能的开源http加速器，他的作者poul-henningkamp是freebsd的内核开发者之一': 1, 'varnish是一款高性能且开源的反向代理服务器和http加速器，其采用全新的软件体系机构，和现在的硬件体系紧密配合，与传统的squid相比，varnish具有性能更高、速度更快、管理更加方便等诸多优点；': 1, '5)squid属于是单进程使用单核cpu，但varnish是通过fork形式打开多进程来做处理，所以可以合理的使用所有核来处理相应的请求；': 1, 'varnish是使用“键-值”存储，键肯定是放置在内存中的': 1, 'varnish是一款专业的httpcachevarnish可以接受http请求，并解析http请求根据请求来查找缓存，如果没有缓存，则将请求转发到后端真实的服务器上，真实服务器响应后，判断响应的报文是否可以缓存，如果可以缓存，则缓存后再响应给用户.': 1, 'varnish是一款高性能、开源的反向代理服务器和缓存服务器，其开发者poul-henningkamp是freebsd核心的开发人员之一': 1, 'varnish是一款高性能的开源d反向代理服务器和http加速器，挪威最大的在线报纸verdensgang使用3台varnish代替了原来的12台squid，性能比以前更好': 1, 'varnish是一款专业web缓存服务器，对i/o要求特别高，和nginx不同的是，数据缓存在内存中，因此性能非常好，而nginx是存储在levels=1:2:2....这样的层级结构的文件中，一旦层级量大会非常占用inode，而且nginx的侧重点是反代，不是缓存': 1, 'varnish是一款高性能、开源的反向代理服务器和缓存服务器': 1}
glusterd:::{'需要特别指出的是，glusterd是完全无中心化的架构模式': 1, '那么在这种架构下，glusterd是如何实现其管理功能，并保证集群数据一致性的呢?': 1, '可以看到，主要是测评防火墙的生效配置和永久配置是否放行glusterfs，glusterd服务是否在两个节点上都运行，两个节点是否加入到一个可信任的存储池': 1}
mogstored:::{'mogilefs实现的是tracker，它通过数据库来保存元数据信息，包括站点domain、class、hots等；mogstored是存储节点（storgenode’），它其实是个wsbdav服务，默认监听在7500端口，接受客户端的文件存储请求': 1, '（2）mogstored（存储节点）mogstored是数据存储的位置，用来数据的创建、删除、获取等，每一个节点必须向tracker注册，然后才能使用deviceid，可以通过mogadm增加这台机器到cluster中': 1}
mogilefs:::{'mogilefs是一个开源的分布式文件存储系统，由livejournal旗下的dangainteractive公司开发': 1, 'mogilefs是一款开源的、高性能的、分布式的文件系统，用于组建分布式文件集群，跟memcached是同门，都由livejournal旗下dangainteractive公司开发': 1, "当上面的准备好了，mogilefs是运行中时，接下来我们要建一个我们自己的'名字空间'和加入文件到存储当中": 1, 'mogilefs是一个开源的分布式文件系统，用于组建分布式文件集群，由livejournal旗下dangainteractive公司开发，danga团队开发了包括memcached、mogilefs、perlbal等不错的开源项目：(注：perlbal是一个强大的perl写的反向代理服务器)': 2, 'mogilefs是一套高效的文件自动备份组件，用于组建分布式文件集群，适合存储海量小文件，用户上传的文件在storage上并且默认会存储在两个节点上，当其中一个down时，会自动往其他节点复制一份': 1, 'mogilefs是一款由perl语言研发的轻量级的分布式存储系统': 1, 'mogilefs是一个开源的分布式文件存储系统': 1, 'mogilefs是我们的开源分布式文件系统': 1}
cache:::{'jetcache是一个基于java的缓存系统封装，提供统一的api和注解来简化缓存的使用': 1, 'linkedhashmapcache是jetcache中实现的一个最简单的cache，使用linkedhashmap做lru方式淘汰': 1, 'cache是有sourceoftruth的，里面的数据如果没有了可以去sourceoftruth重新获取，最多就是浪费一下性能而已': 1, '当cpu要读内存的指令的时候先读cache再读内存，但一开始cache是空着的，只能从内存取，这时候的确是很慢，cpu需要等待': 1, '以上举了3个栗子：蓄水池、cpu的cache、磁盘的cachecache是为了解决什么问题': 1, 'buffer是用于存放将要输出到disk（块设备）的数据，而cache是存放从disk上读出的数据': 1, '比如为某程序分配一段buffer，而一般没有说为某程序分配一段cache的，但是你可以说这个程序有cache，或者说cache是泛指，buffer是特指': 1, '高票答案说cache是用来处理速度不匹配而buffer是用来处理速度平衡的，恕我直言完全没看明白这两者的区别是什么': 1, '回答说buffer是写的，cache是读的，我感觉从实践角度上来说已经比较接近事实了，更准确的说法似乎应该是buffer有读buffer和写buffer，但是cache基本上只用来读，不太会有专门的写cache（经@sigma网友提醒，这里有些让人误解，数据写回的时候当然也是经过cache的，我是想说很少回出现一个cache是专门为了写操作而设计的，一般都是以读为主）': 1, '之前有很多答案提到，cache是为了缓和“高速和低速设备/端的速度差异”': 1, '所以可以确定的是直接访问block设备产生的pagecache是保存到blockdevice的bd_inode里面的': 1, 'cache是记忆t细胞，主要功能是提高同一个数据多次使用时的效率；': 1, 'cache的目的则是加快读取速度，并且通常cache是可复制的，可重复使用的，除非过期或者失效，则不需要消亡': 1, 'cache是你把钥匙从背包深处掏出来，放到了口袋里；有时候你还会复制一把钥匙放口袋里面': 1, 'cache是饭桶': 1, 'loadingcache是附带cacheloader构建而成的缓存实现': 1, '2、httpcontext.cache是对上述缓存类的封装，由于封装到了httpcontext，局限于只能在知道httpcontext下使用，即只能用于web应用': 1, 'cache是通过cachebuilder的build()方法构建，它是gauva提供的最基本的缓存接口，并且它提供了一些常用的缓存api：': 1, 'guavacache是google开源java类库guava的其中一个模块，在maven工程下使用可在pom文件加入如下依赖：': 1, '并且接口cache是泛型，很好的支持了不同类型的key和value': 1, 'jcache是java的缓存api': 1, 'cache是一个像map一样的数据结构，它允许基于key的临时储存': 1, '对writeback回写cache，写到达多级存储结构的某一层，并更新这一层内容，但并不更新更低层的内存，这样，当一个cache行有效并包含更新后的数据，但却不更新下一更低层的内存，我们说这个cache是“脏”的，显然一个有效行的相反状态是“干净”': 1, '读失效cache是仅在发生读失效时才在cache中定位空间并把数据读入': 1, '地址高位作为一个tag存储在line中，在决定cache是否命中的时候，cache控制器会查询tag': 1, '可能有朋友还不清楚pscache是什么，这里简单说明一下：当使用preparestatement的时候，同样的sql语句参数不同时，我们希望客户端或服务端就只需要对sql语句只解析一次（解析sql语句就是把sql字符串文本通过“文法、语法”或“文本硬解析”转换为计算机可识别可执行的一种数据结构，这种结构通常是一种树结构，单纯语法级别的树通常叫语法树，达到执行级别还有一些列优化处理和与数据库本身相关的细节包含其中，通常叫执行树，每一种数据库在这些处理逻辑上多少都有一些区别，不过思路上差不多），这样在一些大并发场景下性能更佳，尤其是互联网高并发的重复sql场景，解析会占据较大的cpu和时间开销，而本身的执行时间可能占用并不大': 1, '（1）开启服务端的pscache的时候，在jdbc发起preparestatement的时候，就会发送指令给服务端（mysqldefs.com_prepare=22）同时在同一个package中携带上sql语句本身，来告诉服务端你把这个sql先cache住，服务端cache的方式一般也是将编译后的语法树进行cache才会达到提升解析速度的效果，如果仅仅是单纯的字符串cache在大批量执行sql时可以降低一些网络流量，到底cache是啥我们看第2点应该就会大概清楚了': 1}
thrrift:::{}
cockpit:::{'cockpit是一个web端的系统管理工具': 1, 'cockpit是红帽开发的网页版图像化服务管理工具，优点是无需中间层，且可以管理多种服务': 1, 'cockpit是一个自由开源的服务器管理软件，它使得我们可以通过它好看的web前端界面轻松地管理我们的gnu/linux服务器': 3, 'cockpit是一个自由开源的服务器管理软件,它使得我们可以通过它好看的web前端界面轻松地管理我们的gnu/linux服务器': 1, 'cockpit是一个基于web的开放源代码的服务器管理工\u200b\u200b具，用户可以在web浏览器中查看服务器信息，管理存储或用户，配置网络以及检查日志文件等': 1, 'cockpit是开源的linuxweb界面管理工具开启和关闭的方法如下': 1, 'cockpit是啥': 1, '经过几番了解，大概是知道了linuxcockpit是一个基于web界面的应用，它提供了对系统的图形化管理': 1, 'cockpit是一个交互式服务器管理界面，它易于使用且非常轻便，通过浏览器中的真实linux会话直接与操作系统进行交互': 1, 'linuxcockpit是一个基于web界面的应用，它提供了对系统的图形化管理': 1, 'cockpit是一个自由开源的服务器管理软件，使得我们可以通过它好看的web前端界面轻松地管理我们的gnu/linux服务器，非常轻量级，web界面也非常简单易用': 1, 'cockpit是由redhat开发的使得管理服务器变得轻松简单的自由开源软件，它非常适合于进行简单的系统管理任务和新手系统管理员': 1, '一、概述cockpit是由redhat开发的使得管理服务器变得轻松简单的自由开源软件': 1, 'cockpit是redhat开发的浏览器端服务器管理工具，优点是无需中间层，且可以管理多种服务': 1, 'cockpit是一个免费且开源的基于web的管理工具，系统管理员可以执行诸如存储管理、网络配置、检查日志、管理容器等任务': 1, 'cockpit是一款自由开源的服务器管理软件，可以通过web前端界面轻松地管理gnu/linux服务器，包括：系统、日志、存储、网络、容器、账户、服务、内核转储、软件更新和终端等方面内容': 1}
magnum:::{'magnum是去年巴黎峰会后开始的一个新的专门针对container的一个新项目，用来向用户提供容器服务': 2, 'magnum是openstack中一个提供容器集群部署的服务': 1, 'magnum是一个pass层的openstack项目': 1, 'magnum是由openstackcontainersteam开发的一项openstack服务，旨在将容器编排引擎作为openstack的一等资源，为openstack用户提供无缝的容器运行体验': 1}
canal:::{'canal是阿里巴巴旗下的一款开源项目，纯java开发': 2, '从整体架构上来说canal是这种架构的（canal中没有包含一个运维的consoleweb来对接，但要运用于分布式环境中肯定需要一个manager来管理）：': 1, 'canal是阿里巴巴的来源项目': 1, 'canal的dump支持串行和并行模式两种模式，本篇重点梳理dump的核心流程，以便对dump过程有一个充分的了解，更好的理解canal的实现原理与细节，下一篇中将重点关注canal是如何引入并行模式来提高dump的性能，即并行编程相关的技巧': 1, 'canal是阿里开源的中间件，主要用于同步mysql数据库变更': 1}
knative:::{'knative是谷歌开源的serverless架构方案，旨在提供一套简单易用的serverless方案，把serverless标准化': 2, 'knative是许多cncf和开源产品(例如kubernetes，istio，prometheus，grafana)和事件流引擎(例如kafka和googlepub/sub)的合并': 1, '可以看出，knative是为了解决容器为核心的serverless应用的构建、部署和运行的问题': 1, 'knative是建立在kubernetes和istio平台之上的，使用kubernetes提供的容器管理能力（deployment、replicaset、和pods等），以及istio提供的网络管理功能（ingress、lb、dynamicroute等）': 1, 'knative是2018年7月才刚刚对外开放，虽然内部已经开发一段时间，但是目前还处于非常早前的阶段（从支持的事件源和bus就能看出来）': 1, '从这个使用方式上来看，其实knative是在逐渐收敛user-container配置，因为在serverless模式中需要系统自动化处理很多逻辑，这些“系统行为”就不需要麻烦用户了': 1, 'knative是一个基于kubernetes的，用于构建、部署和管理现代serverless应用的平台': 1, 'knative是以kubernetes的一组自定义资源类型（crd）的方式来安装的，因此只需使用几个yaml文件就可以轻松地开始使用knative了': 1, 'knative是今年最新的云计算演进方向之一': 1}
memcacheq:::{'memcacheq是一个单纯的分布式消息队列服务': 3, '持久化消息队列memcacheq是一个轻量级的消息队列': 2, 'memcacheq是一个简单的分布式队列服务，它的运行依赖于berkeleydb和libevent，所以需要先安装berkeleydb和libevent.': 1, '本篇文章是对linux下安装memcacheq(mcq)全过程笔记进行了详细的分析介绍，需要的朋友参考下memcacheq是一个单纯的分布式消息队列服务': 1, 'memcacheq是一个基于memcachedb的消息队列服务器': 1, 'memcacheq是一个国内开发的基于memcache协议、bdb持久数据存储、高性能轻量级分布式消息队列服务': 1}
bind:::{'1、配置文件位置\u3000\u3000\u3000\u3000/var/named/chroot/etc/named.conf\u3000\u30002、在主配置文件中添加一行域的zone定义：\u3000\u3000\u3000\u3000zone"example.net"{\u3000\u3000\u3000\u3000\u3000\u3000\u3000typeslave;\u3000\u3000\u3000\u3000masters{120.27.99.64;};\u3000\u3000\u3000\u3000file"slaves/example.net.zone";\u3000\u3000\u3000\u3000}\u3000\u3000\u3000\u3000\u3000\u30003、由于bind是以named用户来运行的，所以要给存放zone文件的文件夹（/var/named/chroot/var/named/slaves）授权：\u3000\u3000\u3000\u3000未授权前：': 1, '9、通过端口使用情况判断bind是否开启（53）：netstat-antp': 1, '1.bind9的安装与配置1.1bind简介bind(berkeleyinternetnamedomain)是domainnamesystem(dns)协议的一个实现，提供了dns主要功能的开放实现，包括*域名服务器(named)*dns解析库函数*dns服务器运行调试所用的工具是一款开放源码的dns服务器软件，由美国加州大学berkeley分校开发和维护的，按照isc的调查报告，bind是世界上使用最多最广泛的域名服务系统': 1, '是一款开放源码的dns服务器软件，由美国加州大学berkeley分校开发和维护的，按照isc的调查报告，bind是世界上使用最多最广泛的域名服务系统': 1}
fdd:::{'fdd是在分离的两个对称频率信道上进行接收和发送，用保护频段来分离接收和发送信道': 4, '如图下图所示,fdd是在分离的两个对称频率信道上进行接收和发送,用保护频段来分离接收和发送信道.fdd必须采用成对的频率,依靠频率来区分上下行链路,其单方向的资源在时间上是连续的.fdd在支持对称业务时,能充分利用上下行的频谱,但在支持非对称业务时,频谱利用率将大大降低.tdd用时间来分离接收和发送信道.在tdd方式的移动通信系统中,接收和发送使用同一频率载波的不同时隙作为信道的承载,其单方向的资源在时间上是不连续的,时间资源在两个方向上进行了分配.某个时间段由基站发送信号给移动台,另外的时间由移动台发送信号给基站,基站和移动台之间必须协同一致才能顺利工作.': 1, 'fdd是连续控制的系统，tdd是时间分隔控制的系统': 1}
management:::{'ws-management是用于远程软件和硬件管理的标准web服务协议': 1, '添加引用类usingsystem.management是灰色的，同时定义时存在红色下划线解决方法：': 1}
elasticache:::{'amazonelasticache是\u200b\u200b由amazonweb服务提供的托管分布式缓存服务': 1, 'amazonelasticahe—amazonelasticache是\u200b\u200b完全托管的内存中数据存储，支持memcached和redis开源引擎': 1, 'amazonelasticache是游戏、广告技术、金融服务、医疗保健和iot应用程序的热门选择': 1, '数据库服务：amazonelasticacheelasticache是aws提供的一个基于内存的分布式缓存服务，一般可以通过这个服务来降低数据库的访问压力': 1, 'elasticache是aws提供的一个基于内存的分布式缓存服务，一般可以通过这个服务来降低数据库的访问压力': 1}
firewalld:::{'firewalld是linux系统中的默认防火墙，也被称为动态防火墙，firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结构以及使用方法不一样': 1, 'firewalld是centos7.0新推出的管理netfilter的工具firewalld是配置和监控防火墙规则的系统守护进程': 1, 'firewalld是一个服务，用于配置网络连接，从而哪些内外部网络的数据包可以允许穿过网络或阻止穿过网络': 1, '（1）包过滤防火墙packetfiltering（2）应用代理防火墙applicationproxy（3）状态检测防火墙statefulinspection（firewalld是包过滤防火墙，所以这里只讲包过滤防火墙）': 1, '\u2003\u2003firewall-cmd是firewalld的命令行管理工具，firewalld是centos7的一大特性': 1, 'firewalld是如何规定一个网络请求使用的时哪个zone上的规则呢': 1}
ddos:::{'分布式拒绝服务攻击原理分布式拒绝服务攻击ddos是一种基于dos的特殊形式的拒绝服务攻击，是一种分布的、协同的大规模攻击方式': 1, '与dos攻击由单台主机发起攻击相比较，分布式拒绝服务攻击ddos是借助数百、甚至数千台被入侵后安装了攻击进程的主机同时发起的集团行为': 1, 'ddos是英文distributeddenialofservice的缩写，意即“分布式拒绝服务”，那么什么又是拒绝服务(denialofservice)呢?可以这么理解，凡是能导致合法用户不能够访问正常网络服务的行为都算是拒绝服务攻击': 1, '那么ddos是怎么攻击计算机或网络的': 1, 'ddos攻击可使计算机或网络无法提供正常的服务，ddos是dos攻击中的一种方法': 1, 'ddos的防护是个系统工程，想仅仅依靠某种系统或产品防住ddos是不现实的，可以肯定的说，完全杜绝ddos目前是不可能的，但通过适当的措施抵御大多数的ddos攻击是可以做到的，基于攻击和防御都有成本开销的缘故，若通过适当的办法增强了抵御ddos的能力，也就意味着加大了攻击者的攻击成本，那么绝大多数攻击者将无法继续下去而放弃，也就相当于成功的抵御了ddos攻击': 1}
flannel:::{'flannel是coreos团队针对kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的docker容器都具有全集群唯一的虚拟ip地址': 1, 'flannel是coreos团队针对kubernetes设计的一个覆盖网络（overlaynetwork）工具，其目的在于帮助每一个使用kuberentes的coreos主机拥有一个完整的子网': 1, '#flannel原理flannel是coreos团队针对kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的docker容器都具有全集群唯一的虚拟ip地址': 1, '简介flannel是一种基于overlay网络的跨主机容器网络解决方案，也就是将tcp数据包封装在另一种网络包里面进行路由转发和通信，flannel是coreos开发,专门用于docker多机互联的一个工具,让集群中的不同节点主机创建的容器都具有全集群唯一的虚拟ip地址flannel使用go语言编写': 1, '在上一篇末尾提到了一个问题：当新容器加入到网络中，其他flannel是如何感知的呢': 1, '接下来看一下flannel是如何实现的': 1, 'flannel的思路flannel是coreos团队针对kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的docker容器都具有全集群唯一的虚拟ip地址': 1, 'flannel是golang语言编写的，所以编译环境中必须安装golang': 1, '现在又有问题来了，flannel是怎么工作的呢': 1, 'flannel是kubernets最早期的网络方案之一，也是现在常用的方案之一': 1, '核心是：flannel是怎样通过宿主机网络传递虚拟机网络中的报文的': 1, 'flannel是一个特别简单的网络方案，文档也就特别简单': 1}
instance:::{'databaseinstance是指在一个sap系统中，数据库服务所在的那个instance': 1, '所以说，数据库的应用如果想实现，数据库和数据库instance是缺一不可的，如果只有数据库的那些文件，那么，只能代表数据在这个文件中，但是我们无法直接进行操作': 1}
selinux:::{'出现此问题的原因是selinux基于最小权限原则默认拦截了nginx的请求，selinux是linux的安全子系统，提供更安全的访问控制，许多运维人员嫌麻烦可能会直接关闭此组件，但是治标不治本，本文演示在启用selinux基础上完成对nginx请求的放行': 1, 'selinux是强制访问控制(mac)安全系统，是linux历史上最杰出的新安全系统': 1, 'selinux是内核级加强型火墙开启或关闭selinux时只能通过重启电脑来实现设置作用：限制服务功能，限制服务访问功能': 1, '检查selinux是否成功关闭getenforce:': 1, 'selinux是典型的mac-mandatoryaccesscontrols实现,对系统中每个对象都生成一个安全上下文(securitycontext),每一个对象访问系统的资源都要进行安全上下文审查': 1, 'selinux是linux开源社区帮助美国家国安全局开发的一个强制访问控制的安全子系统': 1, 'selinux是2.6版本linux内核中提供的强制访问控制系统，selinux默认配置在/etc/sysconfig/selinux': 1, 'selinux是一种基于域-类型模型（domain-type）的强制访问控制（mac）安全系统，它由nsa编写并设计成内核模块包含到内核中，相应的某些安全相关的应用也被打了selinux的补丁，最后还有一个相应的安全策略': 1, '当你启动一个selinux时，init所做的第一件事就是挂载/proc文件系统，并判断selinux是否被激活': 1, '他第一次了解selinux是在2001年ottawalinux讨论会上，当时nsa的peteloscocco针对selinux做了一个演讲': 1}
httpdns:::{'httpdns是为移动客户端量身定做的基于http协议和域名解析的流量调度解决方案，专治localdns解析异常以及流量调度不准': 8, 'localdns劫持：由于httpdns是通过ip直接请求http获取服务器a记录地址，不存在向本地运营商询问domain解析过程，所以从根本避免了劫持问题': 1, 'httpdns是使用http协议向dns服务器的80端口进行请求，代替传统的dns协议向dns服务器的53端口进行请求': 2, '由于httpdns是通过ip直接请求http获取服务器a记录地址，不存在向本地运营商询问domain解析过程，所以从根本避免了劫持问题': 1, '解决传统dns存在缓存的问题；httpdns是没有ttl的概念，0ms解析延迟，httpdns相当于让用户直接通过ip地址访问域名，httpdns只是提供了查询域名ip的功能，但我们可以通过httpdns控制返回的结果，引导用户访问目标端': 1, 'httpdns是面向多端应用（移动端app，pc客户端应用）的域名解析服务，具有域名防劫持、精准调度、实时解析生效的特性': 1, 'httpdns是移动研发平台提供的服务，请参考emas快速入门开通服务': 1, 'httpdns是面向移动开发者推出的一款域名解析产品，具有域名防劫持、精准调度等特性': 2, 'httpdns是一款递归dns服务，与权威dns不同，httpdns并不具备决定解析结果的能力，而是主要负责解析过程的实现': 2, 'httpdns是通过ip直接请求http获取服务器a记录地址，不存在向本地运营商询问domain解析过程，所以从根本避免了劫持问题': 1, 'localdns劫持:由于httpdns是通过ip直接请求http获取服务器a记录地址，不存在向本地运营商询问domain解析过程，所以从根本避免了劫持问题': 1, 'httpdns是一种通过http服务器提供域名解析功能的技术，通过向http服务器的80端口进行请求，代替传统的dns服务器的53端口进行请求': 1, 'httpdns是面向无线端的域名解析服务，与传统走udp协议的dns不同，httpdns基于http协议': 1}
cloudstack:::{'采用cloudstack是针对本地地税局项目而进行的，刚开始的时候是想使用cloudstack建立桌面云，初步设想是可以让地税局的员工办公使用瘦终端，类似无盘工作站那种配置很低的机器，而且在智能手机、平板等终端上也可以随时随地办公': 1, '这个看安装的cloudstack是怎么样的': 1, 'cloudstack是新加入到apache基金会中的开源云计算平台': 1, 'cloudstack是一个开源的具有高可用性及扩展性的云计算平台cloudstack是一个开源的云操作系统，它可以帮助用户利用自己的硬件提供类似于amazonec2那样的公共云服务': 2}
amazon:::{}
hire:::{'googlehire是一款由google开发的应用程序跟踪系统，可帮助中小型企业分配工作，识别和吸引潜在员工，旨在简化招聘流程，googlehire于2017年7月18日推出': 1}
metadata:::{'当然，要完成从虚拟机至网络节点的请求发送和相应，只有nova-api-metadata服务是不够的，此外共同完成这项任务的服务还有：neutron-metadata-agent和neutron-ns-metadata-proxy': 4, '这是由于amazon的原因，最早metadata是亚马逊提出来的，参见：': 1, '1.nova就无法区分到底是哪个虚拟机请求metadata是如何解决的': 1, '要完成从虚拟机至网络节点的请求发送和响应，保证链路的连通，只有nova-api-metadata服务是不够的，openstack提供neutron-metadata-agent和neutron-ns-metadata-proxy服务保证虚拟机的请求可以发送到nova-api-metadata服务': 2, 'nova-api-metadata是nova-api的一个子服务，它是metadata的提供者，instance可以通过nova-api-metadata的restapi来获取metadata信息': 1, '因为metadata是亚马逊提出来的': 1, '名字上请不要和methodmetadata搞混了，methodmetadata是annotatedtypemetadata的子接口，代表具体某一个type（方法上的注解）；而此类是个classmetadata，它能获取到本类里所有的方法method（methodmetadata）~': 1}
cadvisor:::{'cadvisor是谷歌公司用来分析运行中的docker容器的资源占用以及性能特性的工具,cadvisor部署为一个运行中的daemon，它会收集、聚集、处理并导出运行中容器的信息': 1, 'cadvisor是谷歌开源的一个容器监控工具，该工具提供了webui和restapi两种方式来展示数据，从而可以帮助管理者了解主机以及容器的资源使用情况和性能数据': 1, '开源软件cadvisor是用于监控容器运行状态的利器之一，它被用于多个与docker相关的开源项目中': 1, 'cadvisor是一个运行时的守护进程，负责收集、聚合、处理和输出运行中容器的信息': 2, '2).cadvisor是什么': 1, '3.4cadvisorcadvisor是谷歌开发的用于分析运行中容器的资源占用和性能指标的开源工具': 1, 'cadvisor是一个运行中的守护进程，用来收集、聚合、处理和导出运行容器相关的信息，每个容器保持独立的参数、历史资源使用情况和完整的资源使用数据': 1}
scope:::{'weavescope是docker和kubernetes的可视化监控管理软件': 1, 'weavescope是docker和kubernetes可视化监控工具': 1, '（门槛是高的，但scope是很难解释的': 1, '然后我能审查该scope，确定该scope是我预期的，确定属性的值是否跟我预期的匹配': 1, '$$destroyedscope是否被销毁': 1, '一般情况下，前两种的scope就已经足够满足需求，后几种运用于web容器中，默认的scope是singleton': 1, '参数isolate为布尔值，如果为true，表示创建的子scope是孤立的': 1, '1、scope是用于设置javabean的，但为什么说成是jspscope': 1}
apparmor:::{'apparmor是一项重要的安全功能，自ubuntu7.10起默认已包含在ubuntu中': 1, '您将看到apparmor是否正在系统上运行(默认情况下正在运行)，已安装的apparmor配置文件以及正在运行的受限进程': 1, 'apparmor是ubuntu自带的安全工具，可以限制已知应用的能力，控制应用访问文件、目录和网络的能力': 1, 'apparmor是操作对象是主体': 1, '这个apparmor是个安全服务.看来是这个服务的问题.': 1, '简单的说，apparmor是与selinux类似的一个访问控制系统，通过它你可以指定程序可以读、写或运行哪些文件，是否可以打开网络端口等': 1, 'apparmor是ubuntu的默认选择，但在默认情况下，系统自带安装的profile配置文件很少，通过命令：sudoaptinstallapparmor-profiles，可以安装额外的apparmor-profile文件': 1, '**一、apparmor是linux内核中的强制访问控制系统apparmor(applicationarmor)是linux内核的一个安全模块，apparmor允许系统管理员奖每个程序与一个安全配置文件关联，从而限制程序的功能': 1, '二.apparmor简介文章apparmor是一个高效和易于使用的linux系统安全应用程序': 1, 'apparmor是一款与selinux类似的安全框架/工具，其主要作用是控制应用程序的各种权限，例如对某个目录/文件的读/写，对网络端口的打开/读/写等等': 1, 'apparmor是ubuntu的默认选择，但在默认情况下，系统自带安装的profile配置文件很少，通过命令：sudoapt-getinstallapparmor-profiles，可以安装额外的apparmor-profile文件': 1, 'apparmor类似于selinux，主要的作用是设置某个可执行程序的访问控制权限，主要区别就在于apparmor是以路径（path）为基础，而selinux以i节点（inode）为基础': 1, '估计很多人会问apparmor是干什么的，请查看文章：ubuntuapparmor何方神圣': 2, 'apparmor是一个高效和易于使用的linux系统安全应用程序': 1, 'apparmor是一个linux安全模块（lsm）实现基于名字的强制访问控制（mac）': 1, 'apparmor是一个有效的和易于使用的linux应用安全系统': 1}
atlas:::{'云端的mongodbmongodb可以配置在主流的云存储平台上,如aws,azure,gcp.基于云存储平台提供mongodb服务的可以是云存储公司,如亚马逊,也可以是其他类型公司.mongodbatlas是mongo公司基于云存储提供的mongodb服务,其mongodb服务可以部署到aws,azure,或者gcp任何一个平台上,并且提供了一个功能受限的免费mongodb存储服务.': 1, '第1章atlas简介atlas是360团队弄出来的一套基于mysql-proxy基础之上的代理，修改了mysql-proxy的一些bug，并且优化了很多东西': 1, 'atlas是一组可扩展和可扩展的核心基础治理服务，使企业能够有效地满足hadoop中的合规性要求，并允许与整个企业数据生态系统集成': 1, 'apacheatlas是个什么样的工具': 2, 'atlas是阿里巴巴在2016年推出的经过市场考验的最强插件化开发工具，一经推出，同花顺的同事们都连连叫好：atlas大法好啊，阿里巴巴大法好啊，那个时候也迫不及待地去开始使用，确实是现在最好的插件化工具，没有之一': 1, 'atlas是一个可伸缩和可扩展的核心基础治理服务集合，使企业能够有效地和高效地满足hadoop中的合规性要求，并允许与整个企业数据生态系统的集成': 1, 'atlas是用于做元数据管理的，可以用于来集成各种框架的元数据管理，例如可以用来集成hbase，集成solr，集成kafka，集成hive等，所以我们需要提前安装好hbase，solr，kafka，hive等框架，我们这里主要用于集成kafka，hbase，hive等这几个框架': 1, 'apacheatlas是开源的元数据治理框架,可以为hive、hbase、kafka等提供元数据管理功能，如：': 1, 'atlas是由奇虎360,web平台部基础架构团队开发维护的一个基于mysql协议的数据中间层项目': 1, 'atlas是一个位于应用程序与mysql之间中间件': 1, 'apacheatlas是什么': 2, '摘抄一段官网上的介绍，atlas是一个可伸缩且功能丰富的数据管理系统，深度集成了hadoop大数据组件': 2, 'apacheatlas是hadoop的数据治理和元数据框架，它提供了一个可伸缩和可扩展的核心基础数据治理服务集，使得企业可以有效和高效的满足hadoop中的合规性要求，并允许与整个企业的数据生态系统集成：': 1, '由于在编译时可以选择内部集成，所以这些atlas是可以自带的，但是jdk一定要安装好': 1}
contiki:::{'contiki是少有能同时实现2个目标的操作系统：对内存要求极低，同时支持进程阻塞机制': 1, 'contiki是一个小型、开源、极易移植的多任务操作系统': 1, '@(我的第一个笔记本)[sensor,button,cc1310]contiki是以一款应用于单片机上的操作系统，主要服务于wsn（无线传感器网络）': 1, '摘要：本文介绍了contiki是什么、contiki的特点、contiki事件驱动（event-driven）编程模型、contiki包含的无线网络协议栈6lowpan/rpl、仿真工具cooja/mspsim、文件系统coffeefilesystem（cfs）等，指出了contiki的应用领域': 1, 'contiki是一个开源的、高度可移植的多任务操作系统，适用于联网嵌入式系统和无线传感器网络，由瑞典计算机科学学院（swedishinstituteofcomputerscience）的adamdunkels和他的团队开发': 1, 'contiki是开源的操作系统，适用于bsd协议，即可以任意修改和发布，无需任何版权费用，因此已经应用在许多项目中': 1, '本文介绍了contiki是什么、contiki的特点、contiki事件驱动(event-driven)编程模型、contiki包含的无线网络协议栈6lowpan/rpl/coap、仿真工具cooja/mspsim、文件系统coffeefilesystem(cfs)、shell命令工具等,指出了contiki的应用领域': 1, 'contiki是一个开源的、高度可移植的多任务操作系统,适用于联网嵌入式系统和无线传感器网络,由瑞典计算机科学学院(swedishinstituteofcomputerscience)的adamdunkels和他的团队开发': 1, 'contiki是开源的操作系统,适用于bsd协议,即可以任意修改和发布,无需任何版权费用,因此已经应用在许多项目中': 1, 'contiki是一个开放源码、多任务事件驱动的嵌入式网络专用操作系统，轻量级的资源占用使得它很适合存储资源紧张的微控制器': 1, 'contiki是为了网络应用而设计，但也可以基于它的内核开发其他应用': 1, '进程在contiki是任务的同义词': 1}
resultmanagerservice:::{}
ats:::{'ats是ios9和osxelcapitan的一个新特性，开启该功能后，ats对使用nsurlconnection,cfurl或nsurlsession等apis进行的网络请求，默认强制使用https加密传输，目标是提高apple操作系统以及应用程序的安全性': 1, '在网上查了下，大致意思就是，ats是苹果提出的标准，pcidss是支付标准，没有支付不考虑pcidss，保证ats通过就好了，免得ios不支持': 1, '其实在ios9中ats是默认开启的，但开发者仍然能关闭ats，但从2017年1月1日起，app开发者们也明确了必须强制开启ats的期限': 1, '有一点可以提一下，对于http协议的兼容性，ats是仅次于squid': 1, '注意这里的nginx跟ats是放在一台服务上的，如果分开不同的机器，那就得不偿失了，不仅latency增加，机器的数量也随之增加': 1}
win:::{}
dynamodb:::{'dynamodb是amazon的一个高可用的键-值存储系统': 1, 'amazondynamodb是一项快速灵活的nosql数据库服务，适合所有需要一致性且延迟低于10毫秒的任意规模的应用程序': 1, '问：dynamodb是否支持就地原子更新': 1, '问：为什么amazondynamodb是基于固态硬盘构建的': 1, 'amazondynamodb是基于ssd驱动器构建的，相对于旋转介质而言，它每存储1gb数据的成本有所提高，但让我们能够提供非常低的请求成本': 1, '问：amazondynamodb是否支持条件运算': 1, '问：amazondynamodb是否支持递增运算或递减运算': 1, 'amazondynamodb是无架构的，因为表中的数据项不必具有相同的属性，甚至不必具有相同数量的属性': 1, '问：当我通过更改配置吞吐量来请求增加或减小吞吐量时，amazondynamodb是否保持可用': 1, '问：amazondynamodb是否支持iam权限': 1, '问：dynamodb是否会将预留容量应用到整合账单账户': 1, 'dynamodb是一项托管服务，因此您可以使用它作为titan存储后端来运行图形工作负载，而无需管理自己的图形存储集群': 1, 'dynamodbcloudwatch指标问：amazondynamodb是否会报告cloudwatch指标': 1, 'amazondynamodb是一款完全托管的nosql数据库服务，可提供快速，可预测的性能和无缝可扩展性': 1, 'dynamodb是没有办法像mongodb那样非常方便地查询非主键属性数据，很多应用程序可能适合有一个或多个二级（或替代）键，以便通过主键以外的属性对数据进行高效访问': 1, 'dynamodb是依据读取容量写入容量和数据存储大小（表和索引）收费': 1, 'amazondynamodb是一种完全托管的nosql数据库服务，提供快速而可预测的性能，能够实现无缝扩展': 1, 'dynamodb是aws提供的key/value和document型数据库': 1, '3，dynamodb是典型的nosql数据库，不支持类sql语言，因此通常用dynamodb用于程序数据存储，而不用于交互式数据查询或分析': 1, 'awsdynamodb是多租户的，为了不影响到其他用户，所以会有严格的资源使用限制，是按rcu/wcu计费的，而我们是独享式服务，客户可以榨干每一滴计算资源，以三台8c32gb的ecs为例，成本价约3600元/月，在aws上仅能提供1131wcu/5656rcu': 1, 'amazondynamodb是一项完全托管的nosql数据库服务，提供快速而可预测的性能，能够实现无缝扩展': 1, 'awsdynamodb是一个完全托管的服务，你只需要关注数据处理逻辑，而不需要担心硬件和软件的配给、建立、配置，也不要担心软件安装和打补丁包，更不必担心如何运行一个可靠的分布式数据库簇，或者把数据分区到多个实例': 1, 'dynamodb是一种快速、全面受管的nosql数据库服务，它能让用户以简单并且经济有效地方式存储和检索任何数据量，同时服务于任何程度的请求流量': 1, '轻松管理–amazondynamodb是完全托管的服务，您只需创建数据库表，其余事情都交由该服务来代劳': 1, '什么是amazondynamodb?amazondynamodb是一款快速灵活的nosql数据库服务，适合所有需要一致性且延迟低于10毫秒的任意规模的应用程序': 1, '“amazondynamodb是一个键值和文档数据库，可在任何规模上提供单位毫秒的性能': 1, 'dynamodb是一个功能非常强大的aws工具，速度非常快，并且可以与任何类型的应用程序一起很好地使用，缺点之一是您必须学习如何使用它，因为它与mysql，postgres，mongodb等不同': 1, 'amazondynamodb是一种完全托管的nosql数据库服务，提供快速且可预测的性能，同时还能够实现无缝扩展': 1, 'amazondynamodb是一个键/值和文档数据库，可以在任何规模的环境中提供个位数的毫秒级性能': 2, 'amazondynamodb是一个nosql数据库，它支持键-值和文档数据模型，并使开发人员能够构建无服务器的现代化应用程序，这些应用程序可以从小规模开始，然后扩展到全球范围以支持每秒数pb的数据和数千万条读取和写入请求': 2, '按需amazondynamodb是一个灵活的结算选项，可以每秒处理数千个请求而不需要进行容量规划': 1, 'amazondynamodb是一种快速灵活的nosql数据库服务，适用于所有需要一致的单位毫秒延迟的应用程序': 1, '安装dynamodb数据库的方式有很多种，其中通过docker来启动dynamodb是一个不错的方法，你要做的只需要安装docker，之后运行以下指令，就能在本地使用dynamodb': 1, '这里说一下我对dynamodb的理解，dynamodb是一个nosql数据库，所以不能用结构化数据库的思维来使用它': 1}
d:::{'poll：和select相似，比较而言，poll的fd是靠链表管理，没有fd数量限制': 1, '如下图所示：\u3000\u3000\u3000\u3000\u3000\u3000上图中,a为服务提供者,b为a的服务调用者,c和d是b的服务调用者.当a的不可用,引起b的不可用,并将不可用逐渐放大c和d时,服务雪崩就形成了': 1, '首先，d2d是工作在许可频段的可靠服务，采用许可频段来很多好处，最重要的是可以提供干扰可控环境，为避免非许可频段的不确定性，运营商更愿意在许可频段向用户提供可靠、可控的本地服务': 1}
psn:::{}
waf:::{'云waf是近几年兴起的一个词汇，在提及云waf之前首先说一下什么是waf': 1, 'waf的全拼为：webapplicationfirewall，顾名思义waf是一款针对web端的防火墙产品': 1, '一般来说waf有三种形态：云waf是什么': 1, '云waf是什么': 4, '总结：云waf是未来发展的一大趋势，相比于硬件和软件waf安装更简单，更新也有云端负责，更便捷，将会是中小企业、政府、金融、教育等网站的防护保障': 1, 'waf是专业为维护根据web程序运行而设计的，我们科学研究waf绕开的目地一是协助安服工作人员掌握渗透检测中的检测方法，二是可以对安全机器设备生产商出示一些安全提议，立即修补waf存有的安全难题，以提高waf的完备性和抗攻击能力': 1, 'waf是通过执行一系列针对http/https的安全策略来专门为web应用提供保护的一款产品': 1, 'waf是web应用防火墙（webapplicationfirewall）的简称，对来自web应用程序客户端的各类请求进行内容检测和验证，确保其安全性与合法性，对非法的请求予以实时阻断，为web应用提供防护，也称作应用防火墙，是网络安全纵深防御体系里重要的一环': 2, '比如从网络入侵检测的角度来看可以把waf看成运行在http层上的ids设备;从防火墙角度来看，waf是一种防火墙的功能模块;还有人把waf看作“深度检测防火墙”的增强': 1, 'waf是否支持防护https业务': 1, 'waf是否支持自定义端口': 1, 'waf是否支持https双向认证': 1, 'waf是否支持websocket、http2.0或spdy协议': 1, 'waf是否支持接入采用ntlm协议认证的网站': 1, 'waf是否支持健康检查': 1, 'waf是否支持会话保持': 1, 'waf是否会自动将waf回源ip段加入安全组': 1, 'waf是否支持跨账号使用cdn+高防+waf的架构': 1, 'waf是专业的应用层安全防护产品': 1, 'waf是防止web攻击的防火墙，是防御性的产品': 1, '总结起来一句话waf是保护部署在本地或者远程（云服务）的网络和公共web应用，免于一系列的攻击，但不包括ddos攻击的防护': 1, '通过从上面对waf的定义中，我们可以很清晰的了解到，waf是一种工作在应用层的、通过特定的安全策略来专门为web应用提供安全防护的产品': 1, 'waf是专门为保护基于web应用程序而设计的，不像传统的防火墙，是基于联网地址和端口号来监控和阻止数据包': 1, 'waf是一种基础的安全保护模块，通过特征提取和分块检索进行特征匹配，主要针对http访问的web程序保护': 1, '对于multipart/form-data，非嵌入型的与模块类型的waf，都只能自己识别并解析区分字段内容，所以在这一块你可以发挥自己想象，进行各种骚操作来进行绕过，但是，你应该要确认你当前所要绕过的waf是不是真的做了这块的内容识别': 1, '现在市面上的很多waf是依靠正则表达式匹配，就是会匹配已知的漏洞信息来判断客户的请求有没有符合以往已知漏洞信息': 1, 'web应用防火墙（waf）waf是什么\uf0d8网站或app业务程序的正常，强依赖的安全产品企业为什么要使用waf\uf0d8没有waf之前：暴露在互联网上的网站（业务）没有任何防护手段，一些自动化工具（不需要黑客）就可以找到网站的漏洞，并造成业务数据丢失或者被篡改': 1, 'waf是webapplicationfirewall的缩写，waf是云盾提供的一项安全服务，为云主机提供web安全防护服务，能够有效防黑客利用应用程序漏洞入侵渗透': 1, '如果将这3个参数分别进行检测，某些waf是匹配不到攻击特征的': 1, '要全面兼容各类webserver及各类数据库的waf是非常难的，为了普适性，需要放宽一些检查条件，暴力的过滤方式会影响业务': 1, '以上就是waf自身的一些问题，接下来我们会针对这些问题进行讲解，看看waf是怎么受这些问题影响的': 1}
pki:::{'一个有效的pki系统必须是安全的和透明的，用户在获得加密和数字签名服务时，不需要详细地了解pki是怎样管理证书和密钥的，一个典型、完整、有效的pki应用系统至少应具有以下部分：': 1, 'pki是一种新的安全技术，它由公开密钥密码技术、数字证书、证书发放机构（ca）和关于公开密钥的安全策略等基本成分共同组成的': 1, 'pki是利用公钥技术实现电子商务安全的一种体系，是一种基础设施，网络通讯、网上交易是利用它来保证安全的': 1, 'pki是publickeyinfrastructure的缩写，中文叫做公开密钥基础设施，也就是利用公开密钥机制建立起来的基础设施': 1, 'pki是publickeyinfrastructure的缩写，其主要功能是绑定证书持有者的身份和相关的密钥对（通过为公钥及相关的用户身份信息签发数字证书），为用户提供方便的证书申请、证书作废、证书获取、证书状态查询的途径，并利用数字证书及相关的各种服务（证书发布，黑名单发布，时间戳服务等）实现通信中各实体的身份认证、完整性、抗抵赖性和保密性': 1, 'pki是一个标准，下面以最常见的用户访问https网站场景来看看pki常见组成部分和交互流程': 1, '\u200bpki是publickeyinfrastructure的缩写，全称为公开密钥基础设施': 1, 'pki是一个基于x.509的，用于创建，分配和撤回证书的模型': 1, 'pki是怎么发展来的呢': 1, '对称加密symmetriccryptographic非对称加密asymmetriccryptographic密钥交换协议keyagreement/exchange哈希算法hash报文认证码mac数字签名digitalsignature数字证书digitalid/certificate证书颁发机构certificateauthority公钥架构publickeyinfrastructurepk公钥sk私钥公钥加密技术pki是建立在公钥加密技术之上的，那么要了解pki则首先要看一下公钥加密技术': 1, 'pki是一种新的安全技术，它由公钥加密技术，数字证书，证书发放机构（ca），注册权威机构（ra）等基本成分共同组成': 1, '实际上，pki是指由数字证书、证书颁发机构(ca)以及对电子交易所涉及各方的合法性进行检查和验证的其它注册机构组成的一套系统': 1, 'pki是以不对称加密技术为基础，以数据机密性、完整性、身份认证和行为不可抵抗性为安全目的，来实施和提供安全服务的具有普适性的安全基础设施': 1, 'pki是一个标准，它包括一些基本的组件，不同的组件提供不同的服务，主要由一下几个组件组成：': 1, 'pki是publickeyinfrastructure的首字母的缩写，翻译过来就是‘公钥基础设施’；pki是一种遵循标准的利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范': 1, '需要注意，pki是建立在公私钥基础上实现安全可靠传递消息和身份确认的一个通用框架，并不代表某个特定的密码学技术和流程': 1, 'pki是“publickeyinfrastructure”的缩写，意为“公钥基础设施”': 1, 'pki是20世纪80年代由美国学者提出来了的概念，实际上，授权管理基础设施、可信时间戳服务系统、安全保密管理系统、统一的安全电子政务平台等的构筑都离不开它的支持': 1, '作为提供信息安全服务的公共基础设施，pki是目前公认的保障网络社会安全的最佳体系': 1, '公钥基础设施pki是以公开密钥技术为基础，以数据的机密性、完整性和不可抵赖性为安全目的而构建的认证、授权、加密等硬件、软件的综合设施': 1, '其中，信任服务主要是解决在茫茫网海中如何确认“你是你、我是我、他是他”的问题，pki是在网络上建立信任体系最行之有效的技术': 1, 'pki是创建、管理、存储、分发和作废证书的软件、硬件、人员、策略和过程的集合，主要功能为：': 1, 'pki是一种遵循既定标准的密钥管理平台，能够为所有网络应用提供加密和数字签名等密码服务及所必需的密钥和证书管理体系': 1, 'pki是在民间密码研究摆脱政府控制的斗争中发展起来的，这种斗争度达到了白热化程度，pgp的发明者philipzimmemann曾经因为违反美国的密码产品贸易管制政策而被联邦政府调查': 1, 'dod定义的kmipki标准规定了用于管理公钥证书和对称密钥的技术、服务和过程，kmi是提供信息保障能力的基础架构，pki是kmi的主要组成部分，提供了生成、生产、分发、控制和跟踪公钥证书的服务框架': 1}
msp:::{'msp是membershipserviceprovider的缩写，个人习惯直译为成员关系服务提供者': 1, 'msp是公共云、私有云及混合云等企业it模式大规模发展前提下，由专业化的管理服务商为企业提供各种云基础设施管理及运维的外包服务商': 1, '更确切地说，msp是hyperledgerfabric对网络中的组成成员进行身份管理与验证的模块组件': 1, '此文件夹对于本地msp是必需的，并且该节点必须只有一个x.509证书': 1, '此文件夹对于本地msp是必需的，并且必须只包含一个私钥': 1, 'msp是如何实现对身份的验证': 1}
firewall:::{'确认firewall服务是否开启：': 1, '查看firewall是否运行,下面两个命令都可以': 1}
grafana:::{'grafana是一款用go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能': 2, 'grafana是开源的可视化和分析软件': 1, 'grafana是一款采用go语言编写的开源应用，是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知': 1, 'grafana是一个开源的度量分析与可视化套件': 1, 'grafana是个功能强大、展现层很漂亮的数据可视化监控工具，本篇主要介绍了grafana基于mysql数据源的安装及常用姿势，也支持其他数据源如elasticsearch、influxdb等': 1, '原文链接grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知': 1, 'grafana是一个可视化面板（dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器，支持graphite、zabbix、influxdb、prometheus和opentsdb作为数据源': 1, 'grafana是一个跨平台的开源的度量分析和可视化工具,可以通过将采集的数据查询然后可视化的展示.': 1, 'grafana是一个开源的可视化平台，支持多种数据源，方便易用': 1, '至此nginx采集的监控我们就已经完毕了，同时grafana是原始支持dingding报警的，这个就留给大家自己去探索配置了': 1, 'grafana是一个可视化面板(dashboard)，有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器，支持graphite、zabbix、influxdb、prometheus和opentsdb作为数据源': 1}
marathon:::{'摘要】marathon是一个成熟的，轻量级的，扩展性很强的apachemesos的容器编排框架，它主要用来调度和运行常驻服务（long-runningservice），提供了友好的界面和restapi来创建和管理应用': 1, '因为marathon是构建于apachemesos之上的一个框架，因此我们必须首先搭建mesos集群': 2, '1.2marathon是什么marathon按照官方的说法是基于mesos的私有paas，它实现了mesos的framework': 1, 'marathon是基于mesosframework的开源框架，框架图可参考如下': 1, 'marathon是mesos的一个framework，用来执行需要长时间运行的任务': 1, 'marathon是一个基于mesos的容器编排框架，用来创建，升级、回滚容器，提供了web界面和restapi来创建和管理容器': 1, '先来了解一下marathon是怎么布署decker的': 1, 'marathon是一个成熟的，轻量级的，扩展性很强的apachemesos的容器编排框架，它主要用来调度和运行常驻服务（long-runningservice），提供了友好的界面和restapi来创建和管理应用': 1, 'requireports:requireports是一个属性，指定marathon是否需要指定端口': 1, 'marathon是一个mesos框架，能够支持运行长服务，比如web应用等': 1, '【摘要】marathon是一个成熟的，轻量级的，扩展性很强的apachemesos的容器编排框架，它主要用来调度和运行常驻服务（long-runningservice），提供了友好的界面和restapi来创建和管理应用': 1}
felix:::{'felix是一个osgi版本4规范的apache实现': 2, 'felix是apache的开源osgi服务框架，到http://felix.apache.org/downloads.cgi可以下载到最新的版本': 1, 'apachefelix是osgi服务平台版本4在apache许可证下的一个实现': 1, 'apachefelix是apache旗下的一个osgi框架，项目本身非常成熟，已经被用到了很多其他的项目中，例如apacheservicemix': 1, '总的来说，apachefelix是我个人推荐的最佳osgi框架，它简单的结构也更适合出学osgi的开发人员': 1}
clair:::{'clair是coreos2016年发布的一款开源容器漏洞扫描工具': 1, '上图中虚线框中的模块是harbor自身功能，clair是coreos开源的一个系统，镜像扫描分析工作主要由clair完成，它具体的结构在下面再分析，这里先侧重分析harbor这块流程': 1, '注意：因为是1.5.0版本的，所以harbor还是用的mysql数据库，而harbor1.5.0版本的clair是用的postgresql数据库，harbor1.6.0以后的版本则统一使用postgresql数据库了': 1, '这个是后话，后面我们需要由安全部门统一的去做这个事，我现在只是验证我们的clair是否可以正常工作以及把当前的漏洞元下载下来，毕竟漏洞元这玩意儿不是查一时半会没问题': 1, '没辙，我们选择直接搭建一个clair实例，按照clair官网安装文档来做，其实也很简单，我们选择dockers的方式来部署，先在当前目录建一个clair_config目录，然后下载clair的配置文件，也不需要修改什么，毕竟我们只是用来在外网下载漏洞元数据的，同时这里需要留一下，clair是需要postresql（9.4以上版本）支持的，所以需要先安装一个pg数据库容器，然后就直接从官网拉镜像指定配置文件和pg数据库密码、端口等把容器跑起来：': 1, 'clair是coreos提供的一款根据cve的信息确认镜像各层安全状况的开源工具，harbor集成了clair到其功能之中，这也是和其他同类工具相比一个突出的亮点，而在其集成的实现中，首先clair的功能依然是靠其官方镜像和postgres结合形成，而扫描之后的信息则通过harbor自身的数据库进行保存': 1, 'clair是coreos最近发布的一款开源容器漏洞扫描工具': 1, 'clair是个api驱动(api-driven)的分析引擎，能逐层逐层地对已知的安全漏洞进行审查': 1}
fluent:::{'fluent是用于模拟具有复杂外形的流体流动以及热传导的计算机程序，是目前国际上比较流行的商用cfd软件包': 1, 'fluent是用c语言写的，因此具有很大的灵活性与能力': 1, 'fluent是计算流体动力学(cfd)软件工具，能够更深入更快速地优化自己的产品性能': 1, 'fluent是市面上最好的cfd软件之一吗?我们将通过查看最新的fluent版本2019r3来回答这个问题，了解它的易用性、网格化、速度、自动化和自定义能力、后处理、客户支持和准确性': 1, '如果您有可用的内核，或者可以在云中运行案例，那么fluent是完全可并行的': 1, '拥有强大的cfd历史、尖端技术和不断升级的代码库和功能、为众多流程案例/类型提供准确和有效结果的声誉、强大的用户基础和社区，以及拥有大量在线资源和网络研讨会的专门客户支持，整体fluent是一个强大的多物理软件平台': 1, '如果不行，请自行上网搜索别人的经验反馈，可能没有普适性的解决办法，我的电脑是64位，vs是2010版，fluent是v19.0': 1, 'fluent14流场分析自学手册fluent是由美国fluent公司于1983年推出的cfd软件，在美国市场占有率达到60%，可解算涉及流体、热传递以及化学反应等的工程问题': 1, 'fluent是用c语言写的，可实现动态内存分配及高效的并行数据结构，具有很大的灵活性与很强的处理能力': 1}
mbean:::{'对象名称通常用他们包含的关键值对来区分,如一个服务器mbean的主机名和端口名关键字及他们各自的值.同理,唯一标志相似的mbean组,对象名称将用相应的关键字和值对拼装.例如,type=servermbean指出这个mbean是一个服务器mbean类型.由此,对象名称值server:type=servermbean,hostname=localhost,portnumber=8050提供一个简单的mbean分组,产生为服务器mbean的实现.并且也提供了一个方法来唯一标志在localhost:8050上运行的服务器的mbean实例.': 1, 'mbeanserverdelegatembean是一个mbeanserver的描述,也是mbeanserver发出消息的广播者.': 1, '问题：openmbean和modembean是作用是啥': 1, 'standardmbean是最简单的mbean，他能管理的资源必须定义在接口中，然后mbean必须实现这个接口，命名必须遵守一定的规范': 1, '\u200b\u200b问题：openmbean和modembean是作用是啥': 1, 'standardmbean是jmx管理构件中最简单的一种，只需要开发一个mbean接口（为了实现standardmbean，必须遵循一套继承规范': 1, '标准mbean是有侵入性的，他要管理的对象是符合javabean规范的对象': 1, '例如，type=servermbean指出这个mbean是一个服务器mbean类型': 1}
memory:::{'dr.memory是一个开源免费的内存检测工具，它能够及时发现内存相关的编程错误，比如未初始化访问、内存非法访问以及内存泄露等': 1}
openssh:::{'openssh是ssh（secureshell）协议的免费开源软件': 1, 'openssh是ssh（secureshell）协议的免费开源实现': 1, 'openssh是基于c/s架构工作的': 2, 'openssh是ssh(secureshell)协议的免费开源实现': 1, '1.openssh概念openssh是ssh（secureshell）协议的免费开源实现': 1, 'openssh是ssh的开源实现，因此用户可以免费使用到这种安全服务': 2}
quay:::{'quay是一个registry，存储，构建和部署容器的镜像仓库': 1, '根据redhat的开源承诺，projectquay是新开源的，代表了自2013年以来coreos（现在是redhat）围绕quay容器注册表进行的多年工作的高潮': 2, 'quay是一个类型于开源harbor镜像管理服务，目前提供的功能比harbor强大，现在quay已经开源，大家可以去尝试体验下': 1, 'quay是市场上第一个私人托管注册中心，于2013年底启动': 1}
serverless:::{'serverless是一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署': 2, 'serverless是一个当今软件世界中比较新的话题': 1, '广义serverless是指服务端免运维，也就是具有serverless特性的云服务': 1, '**与传统云计算用户需要请求资源的方式不同，serverless是用户提交一段代码，云会自动给这段代码分配资源并执行': 1, 'serverless是一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署，你甚至可以管理某个具体功能或端口的部署，这就能让开发者快速迭代，更快速地开发软件': 2, 'serverless规模扩展性方面由于充分利用云计算的特点，因此其扩展是平滑的，同时由于serverless是基于微服务的，而一些微功能微服务的云计算是零收费，这样有助于降低整体运营费用': 2, 'serverless跟paas之间的界线比较模糊，很多人认为serverless是paas的一种，笔者也倾向于认为serverless是特殊的paas形态': 1, 'serverless是一种软件设计架构，容器是软件架构的承载者': 1, '首先serverless是从公共云中演化出来的新型架构，适用于运行在公共云上的小程序': 1, 'serverless是变革': 1, '如果你是一个程序员，你可能在最近这两年或多或少的听到过一堆莫名其妙的名词，例如caas、baas、faas等类似的以aas结尾的as-a-service名词，同时也可能听到servicemesh、serverless等名词，对于从事相关工作的同学可能知道每个名词都代表什么，但我相信肯定还是会有部分人听到之后是黑人问号脸，我们不具体介绍每个都是什么意思，因为这些概念也出现很早了已经，不明白的可以自行google，这里我们重点聊一下最近挺火的serverless是个什么鬼，因为我发现我们在日常探讨过程中好像每个人对其理解不一样，也是在听完一次讨论之后有感而发，并不是在抱怨什么，只是想跟大家探讨一下到底什么是serverless，在继续开展后续工作之前，我认为有必要再统一一下概念，不谈细节，也不扯什么性能，那都是可以优化的，不是不可逾越的障碍': 1, '要说serverless是什么，直译过来就是无服务器': 1, '根据cncf的定义，serverless是指构建和运行不需要服务器管理的应用程序的概念': 1, 'serverless是对运维体系的极端抽象，不用在linux上安装web服务器，配置负载均衡，使用serverless可以很快很简单的就搭建一个web服务器，并对外提供服务': 1}
virtlogd:::{}
flanneld:::{'而这个flanneld是干嘛的呢': 1, '以上就是这个通信的过程，那么这里有一个问题：flanneld是怎么知道100.96.2.3对应的目标地址是172.20.54.98:8285的呢': 1}
apiserver:::{'apiserver是通过提供的kube-apiserver二进制文件直接运行的，下面的例子指定了service分配的ip范围，etcd的地址，和对外提供服务的ip地址：': 2, '使用kubeadm初始化的kubernetes集群中，kube-apiserver是以静态pod的形式运行在masternode上': 1, 'kubernetesapiserver是由kube-apiserver进程实现的，它运行在kubernetes的管理节点—master上并对外提供kubernetesrestfulapi服务，它提供的主要是与集群管理相关的api服务，例如校验pod、services、replicationcontroller的配置并存储到后端的etcdserver上': 1, '权限控制（authorizationmode、admissioncontrol）、服务限流控制（apirate、apiburst）等，这些逻辑说明了apiserver是按照企业级平台的标准所设计和实现的': 1, '下面将简要介绍masterapiserver的创建过程，主要分析kube-apiserver是如何将资源对象（node，pod，service等）绑定到具体的restfulapi，使得客户端可以通过restfulapi操作资源对象': 1}
adapter:::{'2.adapter是内部类': 1}
notary:::{'message表示输入状态，notary是新交易将使用的公证人': 1, 'notary是corda网络交易验证和确认的核心机制，这个机制的采用本质上想要解决两方面问题：一是避免因为分布式共识机制而导致交易信息在全网广播，这主要是为了支撑交易信息“适度可见”的能力': 1, 'notary是公证人的意思，从字面上就能看出来其作用：就是有一个独立的、交易双方（多方）都信任的角色，来最终确认这笔交易的有效性': 1, '这也就解释了前面所提到的，corda网络中的状态具有一个notary属性，这个notary是当初产生这个状态的交易验证时所使用的notary': 1}
cacti:::{'1.cacti是php开发的性能与流量监测工具，监测linux、windows、路由器、交换机等网络设备，主要基于snmp（简单网络管理协议），来收集cpu、内存、运行进程数、磁盘空间、网卡流量等各种数据\u30002.cacti本身就是一个web界面的管理套件，通过net-snmp工具采集数据，结合rrdtool（轮询数据库工具）记录数据并绘制图片，最终展示给管理员，cacti安装在lamp或lnmp上': 1, 'cacti是一套基于php,mysql,snmp及rrdtool开发的网络流量监测图形分析工具': 3, 'cacti是一款使用php语言开的发性能与流量检测软件，检测对象可以是linux、windows服务器，也可以是路由交换机等网络设备，主要基于snmp(simple、network、management、protocol，简单网络管理协议)来搜集cpu占用、内存使用、运行进程、网卡流量等数据': 1, '1.cacti是用php语言实现的一个软件，它的主要功能是用snmp服务获取数据，然后用rrdtool储存和更新数据，当用户需要查看数据的时候用rrdtool生成图表呈现给用户': 1, 'cacti在英文中的意思是仙人掌的意思，cacti是一套基于php,mysql,snmp及rrdtool开发的网络流量监测图形分析工具': 1, 'cacti是用php语言实现的一个软件，它的主要功能是用snmp服务获取数据，然后用rrdtool储存和更新数据，当用户需要查看数据的时候用rrdtool生成图表呈现给用户': 1}
zstack:::{'zstack基本工作原理摘要zstack是下一代开源的云计算iaas（基础架构即服务）软件': 1, 'zstack是2020年上半年发现的，眼睛一亮，就把它装上了': 1, '因此，zstack是幸运的，我们从openstack以及其他的iaas身上学到了很多经验，你在我们未来的文章中也会看到我们借鉴了他们一些非常棒的点子': 1, '针对采用openstack部署云平台的复杂性，csdn此前介绍过的zstack是另外一种解决方案': 1, '你可以使用querycephprimarystorage来查询所有的ceph主存储的详细信息：关于zstackzstack是全新的开源iaas软件，它的诞生是为了解决困绕iaas软件的几大难题：复杂度、稳定性、可伸缩性和灵活性': 1, '一、zstack是基于centos定制的，安装和centos一样，只要注意在这里选择好安装模式：主机选择社区版管理节点，服务器选择计算节点': 1, 'zstack是下一代开源的云计算iaas（基础架构即服务）软件': 1}
oneproxy:::{'oneproxy是平民软件完全自主开发的分布式数据访问层，帮助用户在mysql/postgresql集群上快速搭建支持分库分表的分布式数据库中间件，也是一款具有sql白名单（防sql注入）及ip白名单功能的sql防火墙软件': 1, '关系数据库的水平扩展，或者说mysql数据库的水平扩展能力是架构中的关键所在，oneproxy是一款构建在mysql数据库之上的透明数据访问中间件，由在互联网行业（电商、互联网金融）工作多年的资深架构师精心打造，旨在降底对上层应用开发要求，实现对应用基本透明的底层数据库单点切换(failover)、读写分离、水平拆分功能，使任何公司都可以轻松地拥有与大型互联网企业一样底层数据库扩展能力，也不用受制于开发语言的限制，以帮助业务实现再一次腾飞': 1, 'oneproxy是由原支付宝首席架构师楼方鑫开发，目前由楼方鑫创立的杭州平民软件公司（@平民架构）提供技术支持': 1, 'oneproxy基于mysql官方的proxy思想利用c进行开发的，oneproxy是一款商业收费的中间件': 1}
dockerdns:::{}
calico:::{'calico是一个纯三层的协议，为openstack虚机和docker容器提供多主机间通信': 2, '由于calico是一种纯三层的实现，因此可以避免与二层方案相关的数据包封装的操作，中间没有任何的nat，没有任何的overlay，所以它的转发效率可能是所有方案中最高的，因为它的包直接走原生tcp/ip的协议栈，它的隔离也因为这个栈而变得好做': 1, 'calico是纯三层的sdn实现，它基于bpg协议和linux自身的路由转发机制，不依赖特殊硬件，容器通信也不依赖iptablesnat或tunnel等技术': 1, 'calico是一个纯三层的数据中心网络方案，而且无缝集成像openstack这种iaas云架构，能够提供可控的vm、容器、裸机之间的ip通信': 3, '所以calico是怎么做到的呢': 3, 'calico是一个三层的数据中心网络方案，而且方便集成openstack这种iaas云架构，能够提供高效可控的vm、容器、裸机之间的通信': 1, '根据上面这个calico数据平面概念图，结合我们的例子，我们来看看calico是如何实现跨主机互通的：': 1, 'calico支持网络策略，calico是纯三层虚拟网络方案，calico在每一个计算节点利用linuxkernel实现了一个高效的vrouter来负责数据转发，而每个vrouter通过bgp协议负责把自己上运行的workload的路由信息像整个calico网络内传播——小规模部署可以直接互联，大规模下可通过指定的bgproutereflector来完成': 1, 'calico是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，可以用在kubernetes、openshift、dockeree、openstrack等paas或iaas平台上': 2, '在docker环境中calico服务是做为容器来运行的，使用host的网络配置': 1, '由于calico是基于三层的解决方案，所以不要求所有节点在同一个大二层之内(当然bgp模式还是要求数据中心内部中间节点的路由器都支持bgp协议)，也不存在随着容器增加而带来的大量mac广播风暴，数据中心mac地址广播流量只和k8s节点数目有关，和容器的多少无关': 1, '使用calicoamd命令查询calico是否正常正常运行': 1}
weave:::{'weave网络介绍weave是weaveworks开发的容器网络解决方案': 1, '它的属性为openvswitch，是一个开源的软件交换机，是一个模拟二层数据交换的封装，在一开始就说过weave是一个巨大到以太网交换机，关于openvswitch的其他特点及功能，请查阅其他资料，这里不多赘述': 1, '[root@localhost~]#ipa…8:weave:<broadcast,multicast,up,lower_up>mtu1376qdiscnoqueuestateupgroupdefaultqlen1000link/ether26:3a:ad:39💿6cbrdff:ff:ff:ff:ff:ffinet6fe80::243a:adff:fe39:cd6c/64scopelinkvalid_lftforeverpreferred_lftforever…weave是一个私有的vxlan网络，默认与外部网络隔离': 1, 'weave是一个完整的物联网协同框架，它包含了一系列的组件，分别应用于不同的目标对象': 1, 'libweave是采用c++语言开发的，其代码已正式开发在internet上': 1, '但是由于uweave是针对资源受限的嵌入式应用场景所定制，很多情况下并不支持tcp/ip协议，因此无法采用mdns和https等技术，而是直接采用了低功耗蓝牙（ble）技术': 1, '这与面向普通设备的libweave不同，libweave是采用c++语言实现的，而且广泛使用了c++语言的一些高级特性，比如模板(template)，弱指针等等': 1, 'weave是一个相对完整的物联网协同框架，包括了运行在物联网设备上的libweave和uweave，运行在智能手机上的客户端weaveclient，以提供后台服务的weavecloud': 1, '在wifi和ethernet等局域网环境内，weave是基于tcp协议进行通信的': 1, 'weave是由weaveworks公司开发的解决docker跨主机网络的解决方案，它能够创建一个虚拟网络，用于连接部署在多台主机上的docker容器，这样容器就像被接入了同一个网络交换机，那些使用网络的应用程序不必去配置端口映射和链接等信息': 2, 'weave是什么呢': 1, 'weave是由weaveworks公司开发的解决docker跨主机网络的解决方案，它能够创建一个虚拟网络，用于连接多台主机上的docker容器，这样容器就像被接入了同一个网络交换机，那些使用网络的应用程序不必去配置端口映射和链接等信息': 1, 'weave是github上一个比较热门的docker容器网络方案，具有非常良好的易用性且功能强大': 1, 'weave是由zett.io公司开发的，它能够创建一个虚拟网络，用于连接部署在多台主机上的docker容器，这样容器就像被接入了同一个网络交换机，那些使用网络的应用程序不必去配置端口映射和链接等信息': 1, 'weave是weaveworks开发的容器网络解决方案': 1}
mail:::{'foxmail是最常用的邮件收发客户端': 1}
xinted:::{}
snmp:::{'snmp是英文"simplenetworkmanagementprotocol"的缩写，中文意思是"简单网络管理协议"': 2, 'snmp是一种简单网络管理协议，它属于tcp/ip五层协议中的应用层协议，用于网络管理的协议': 2, 'snmp是简单的网络管理协议，它不是一个软件，而是用于网络管理的一套规则': 1, 'snmp是一种无连接协议，无连接的意思是它不支持象telnet或ftp这种专门的连接': 1, '4.执行编译并安装"make&&makeinstall"命令5.配置snmpd.conf(1)使用"ls"命令查看/usr/local/snmp目录下是否存在etc目录，如果不存在etc目录，就创建一个;(2)查看命令：“ls/usr/local/snmp”(3)创建etc目录命令：“mkdir/usr/local/snmp/etc”(4)找到snmp源码目录(net-snmp-5.8)下example.conf文件复制example.conf文件到到/usr/local/snmp/etc目录，并重命名为snmpd.conf：“cpexample.conf/usr/local/snmp/etc/snmpd.conf”;(5)使用vi编辑器打开snmpd.conf文件：“vi/usr/local/snmp/etc/snmpd.conf”，编辑snmpd.conf文件中的内容(6)按下键盘上的字母【i】或者【insert】键进入vi编辑器的编辑模式(7)要配置snmpd.conf中内容如下:\uf06c配置允许网络访问找到【agentbehaviour】修改"agentaddressudp:127.0.0.1:161"配置项为"agentaddressudp:161"\uf06c选择v2csnmp协议的版本找到【activemonitoring】注释掉"trapsinklocalhostpublic"，取消"trap2sinklocalhostpublic"的注释\uf06c设置访问权限找到【accesscontrol】找到【rocommunitypublicdefault-vsystemonly】，把-vsystemonly去掉，这是设置访问权限的，去掉后能访问全部\uf06c按下键盘左上角上的【esc】键退出vi编辑器的编辑模式，然后输入命令":wq"保存文件并退出6.启动snmp服务\uf06c由于我们刚才修改snmp的snmpd.conf文件，所以在启动snmp服务之前，先使用命令"psaux|grepsnmp|grep-vgrep|awk‘{print$2}’|xargskill"关闭snmp的相关服务\uf06c使用"netstat-an|grep161"查看snmp的服务是否启动\uf06c启动snmp服务："/usr/local/snmp/sbin/snmpd-c/usr/lcoal/snmp/etc/snmpd.conf"7.测试snmp服务获取本机的系统名字，使用命令："snmpget-v2c-cpubliclocalhostsysname.0"或者"snmpget-v2c-cpublic本机的ip地址sysname.0"或者"snmpget-v2c-cpublic本机的ip地址.1.3.6.1.2.1.1.5.0"进行测试，能够正常返回系统的名字就说明snmp安装配置成功了也可以使用命令"snmpget--version"查看当前的安装版本号来验证是否安装成功，如果安装成功，则显示当前的安装版本号8.卸载snmp如果安装后想卸载snmp，可以执行"makeuninstall"命令，卸载步骤如下：\u3000\u30001、使用"netstat-an|grep161"查看snmp服务是否启动\u3000\u30002、如果已经启动就使用命令"psaux|grepsnmp|grep-vgrep|awk‘{print$2}’|xargskill"关闭snmp的相关服务\u3000\u30003、进入snmp源码目录(net-snmp-5.8)\u3000\u30004、执行"makeuninstall"命令卸载snmp\u3000\u30005、删除/usr/local下的snmp目录以及snmp目录里面的所有文件，usr/local/snmp是snmp的安装路径': 1, '如果要检查snmp是否关闭，可执行“showsnmp”命令': 1, '打开任务管理器→服务查看snmp服务是已经正常启动': 1, '1、使用"netstat-an|grep161"查看snmp服务是否启动': 1, '5、删除/usr/local下的snmp目录以及snmp目录里面的所有文件，usr/local/snmp是snmp的安装路径': 1, 'snmpagentyuminstallnet-snmpnet-snmp-utils安装net-snmp及net-snmp套件net-snmp-create-v3-user创建snmpv3用户zabbixzabbix@zzzzabbix@zzzsystemctlrestartsnmpd.service启动snmpd服务snmpwalk-v3-uzabbix-amd5-a‘zabbix@zzz’-lauthpriv-xdes-x‘zabbix@zzz’localhost本机验证snmp服务是否正确-vv3版本-uzabbix用户-a指定认证算法-a密码-l指定安全等级authpriv认证加授权-x指定加密算法-x指定加密密码localhost本地启动查看zabbixserver端是否支持snmpmore/var/log/zabbix/zabbix_server.log查看enabledfeatures启用的功能zabbixserver端没有snmpwalk命令时需要yuminstallnet-snmp-utils.x86_64安装套件server端测试snmpwalk-v3-uzabbix-amd5-a‘zabbix@zzz’-lauthpriv-xdes-x‘zabbix@zzz’192.168.100.233查看系统方面的信息snmpwalk-v3-uzabbix-amd5-a‘zabbix@zzz’-lauthpriv-xdes-x‘zabbix@zzz’192.168.100.233snmpv2-mib:system通过snmp查看系统主机名snmpget-v3-uzabbix-amd5-a‘zabbix@zzz’-lauthpriv-xdes-x‘zabbix@zzz’192.168.100.233snmpv2-mib::sysname.0snmpv2-mib::sysname.0这就是主机名的oid系统状态的信息snmpwalk-v3-uzabbix-amd5-a‘zabbix@zzz’-lauthpriv-xdes-x‘zabbix@zzz’192.168.100.233ucd-snmp-mib::systemstatssnmptrapsnmp默认161162端口,161主要查询、162用于trap通讯使用server端下载zabbix-4.0.12.tar.gz并解压cpmisc/snmptrap/zabbix_trap_receiver.pl/usr/bin/vim/etc/snmp/snmptrapd.conf加入以下内容authcommunitylog,execute,netpublicperldo“/usr/bin/zabbix_trap_receiver.pl”client端输入snmptrap-v2c-cpublic192.168.100.201“”“1.6.1.1.1.1.1”snmpv2-mib::sysname.0s“snmptraptest”-v指定版本""主机名，可以为空但必须有1.6.1.1.1.1.1企业oid随便写snmpv2-mib::sysname.0监控项oids“snmptraptest”oid对应的值sever端cat/tmp/zabbix_traps.tmp有数据': 1}
openfaas:::{'openfaas是来自docker社区的一款serverless框架，作用是为用户提供faas计算平台，官网：https://www.openfaas.com，下图来自官方：': 1, 'openfaas是golang编写的一个使用docker和kubernetes构建的serveless框架和fnproject有点像，只是openfaas并不是直接抓取容器的标准输出，而是写一个functionwatchdog作为容器的启动进程，暴露http服务，用于和调度系统交互，然后直接调用进程运行function获取输出': 1, '对于企业而言，openfaas使用的体系结构提供了无缝插入计划群集和现有微服务的ci/cd工作流的能力，因为openfaas是围绕docker构建的，所有功能都打包到docker镜像中': 1, 'openfaas是kubernetes原生的，而且用到了deployments,services和secrets': 1, 'openfaas是一个开源框架，用于使用docker容器存储和运行功能在kubernetes上实现无服务器架构': 1, 'openfaas是一个利用docker在任何硬件或者云上让任何进程或者容器成为一个serverless功能的框架': 1, 'openfaas是一款开源的faas框架，什么是faas，faas是functionasaservice的缩写可以理解为功能服务化，faas提供了一种比微服务更加服务碎片化的软件架构范式，可以让开发更关注代码开发逻辑，而不需要关注代码架构': 1}
ca:::{'1、打开“服务器管理器”，点击“添加角色”2、点击“下一步”3、勾选“证书服务”，点击“下一步”4、点击“下一步”5、勾选“证书颁发机构web注册”，在添加角色向导中点击“添加所需的角色服务”6、点击“下一步”7、选择“独立”，点击“下一步”8、选择“根”，点击“下一步”（其中，根ca是ca信任体系结构的最高层，它一般负责整个ca体系的管理，为下属的子ca签发并管理证书，而不直接为用户签发证书': 1, 'ca是数据安全和电子商务领域的关键组成部分，确保交易双方的真实身份': 1, 'ca是certificateauthority的缩写，也叫“证书授权中心”': 1, 'ca有权给所有的域名签发证书，如它可以私自给我的网站签发一张www.barretlee.com的证书，并且可以拿着新证书拦截网页流量（当然，前提是这个ca是浏览器认证的权威ca），那我的网站可能就很不安全了，对拥新证书的人来说，我的网站等同于在http下进行通讯': 1, '那么问题来了，用户向子ca证书机构申请证书，子ca机构向根ca机构申请授权，根ca是如何取得证书的呢': 1, 'ca是公钥基础设施的核心,是证书的签发机关,为客户提供签发公钥证书、认证证书、分配证书和治理证书的服务': 1, 'ca是基于非对称加密体系建立的电子商务安全认证机构': 1}
timesten:::{'所使用的环境是windows7，timesten是11g.': 1, '-----------当节点宕机，由于是内存数据库，timesten是如何恢复的': 1, '另一个有用的是timesten与redis的对比，我把重点用红框标识出来，如下图：几个重点：1.都属于内存计算2.timesten是关系型数据库，支持acid,schema,sql，pl/sql，redis是key-valuestore，不支持前述功能3.redis的特点是算法服务器或数据结构服务器，这点timesten不如它灵活4.redis的sharding比timesten强大，timesten目前只支持手工sharding，今年oow左右将推出的velocityscale是一个完全独立的产品分支，可以补充目前的不足5.timesten是第一个商用关系型内存数据库，成熟补充几点：1.timesten也是用c写的2.timesten可以作为oracle数据库的内存缓存，两个数据库之间的数据同步是自动的，而redis只能手工写代码实现': 1, '首先，timesten是90年代源于hp实验室，于2005年被oracle收购的': 1, 'timesten是行存储的关系型内存内数据库': 1, '基本上timesten是通过将数据置于内存内并针对内存访问优化算法达到性能提升，关于这点，与hana并无过大区别': 1, '许多客户都会问这样一个问题：timesten是oracle数据库的缓存，还是一套关系型数据库系统': 1, 'timesten是低延迟的关系型内存数据库系统，它将数据持久化到磁盘并支持acid事务': 1}
drozer:::{'drozer是一款针对android系统的安全测试框架，可以分成两个部分：其一是“console”，它运行在本地计算机上；其二是“server”，它是一个安装在目标android设备上的app，当使用console与android设备交互时，就是把java代码输入到运行在实际设备上的drozer代理(agent)中': 1, 'drozer是一款安卓的安全测试框架，可以用来对安卓应用进行渗透测试，工作方式为交互式，有点类似于msf，可以选择模块和payload对风险点进行分析和漏洞验证': 1, 'drozer是一个常用的测试框架，它可以分为2个部分，一个是console-它运行在本地的计算机上，一个是server-它运行在android设备上': 1, 'tips：由于drozer是由python2.7编写，最后一版发布于：2017年11月，因此这里需要配置python2.7的路径': 1, 'drozer是一个由mwr安全团队维护开源的软件，该软件可以说是针对android平台的安全测试框架': 1, 'drozer是mwrlabs开发的一款android安全测试框架，也是一种交互式的安全测试工具': 1, 'drozer是一款综合的安全评估和攻击的android框架，据产品介绍里说，drozer可以全面评估app的安全性，并帮助团队把app的安全风险保持在可控范围内': 1, 'drozer是android领先的安全测试框架': 1, 'drozer是用来审计android应用以及系统漏洞的': 1}
nagios:::{'nagios是一个开源系统，网络，应用程序监视系统': 1, 'nagios是一款开源免费的网路监视工具，可以监控的设备：windows，linux，unix，router，switch，打印机等，具有报警功能，是一个网络监控系统': 1, 'nagios是一款用来监视系统和网络的开源应用软件': 1, 'nagios是一个用来监视系统和网络的开源应用软件，它通常运行于liunx或unix操作系统服务器上，能有效监控windows、linux和unix的主机状态，交换机路由器等网络设置，打印机等': 1, 'nagios是一款开源的网络监视工具，能有效监控windows、linux和unix的主机状态，交换机路由器等网络设备，打印机等': 1, 'nagios是采用分布-集中的管理模式': 1, '与公开服务相比，还有私有服务，私有服务包括内存使用率、cpu利用率、磁盘使用率、服务状态、进程信息等，这些私有的服务或者是主机属性通常是不会暴露给外部客户端的，如果没有第三方代理，nagios是不可能监控到的': 1, 'nagios是一款开源的免费网络监视工具，能有效监控windows、linux和unix的主机状态，交换机路由器等网络设备，打印机等': 1, '没有这个代理，nagios是无法监控这些的': 1, 'nagios：nagios是一款开源端免费网络监控报警服务，能有效监控windows、linux和unix端主机状态，交换机、路由器和防火墙等网络设置，在系统或服务状态异常时发出邮件或短信报警第一时间通知运维人员，在状态恢复后发出正常端邮件或短信通知': 1, 'nagios是一款开源的电脑系统和网络监视工具，能有效监控windows、linux和unix的主机状态，交换机路由器等网络设置，打印机等': 1}
nsca:::{'通过管道将数据传给send_nsca程序，sendnsca再将数据发送到nsca服务，其中localhost是nsca监听的主机名，nsca是nagios中定义的被动监测服务的名字，0告诉nsca正常，testok是附加信息，在web端的显示如下：': 1, 'nsca是一个可在远程linux/unix主机上执行强制检测并将结果传给nagios守护进程的外部构件包': 1, '首先先弄清楚nsca是嘛玩意，请参考http://beginlinux.com/blog/2009/09/，个人觉得已经很详细介绍了nsca的工作原理，以及很基础的配置和使用': 1}
num:::{}
nrpe:::{'点击跳转到教程nrpe是监控软件nagios的一个扩展，它被用于被监控的服务器上，向nagios监控平台提供该服务器的一些本地的情况': 1, 'nrpe是nagios的一个功能扩展，它可在远程linux/unix主机上执行插件程序': 3, '4、验证nrpe是否监听': 1, '5、测试nrpe是否正常运行': 1, '我们按照nrpe的安装文档安装下来,nrpe是在xinetd下面运行的,个人比较喜欢像nagios那样以单独的daemon来运行.这样比较好控制.': 1, '测试一下，这里可以看出nrpe是独立运行还是基于xineted的服务运行的': 1, 'check_nrpe是在nagios服务器/etc/nagios3/command.cfg中定义的，': 1}
dma:::{'在同等程度的cpu负担下，dma是一种快速的数据传送方式': 1, '\u3000\u3000也就是说只要剩余传输数据量不是0，而且dma是启动状态，那么就会发生数据传输': 1, 'dma是指外部设备不通过cpu而直接与系统内存交换数据的接口技术': 2, '通常系统总线是由cpu管理的，在ｄｍａ方式时，就希望cpu把这些总线让出来，即cpu连到这些总线上的线处于第三态(高阻状态)，而由dma控制器接管，控制传送的字节数，判断dma是否结束，以及发出dma结束信号': 2, 'f1使用dma是非常简单的，我在f4用dma的时候也遇到一些问题，最后看手册解决了，打算下一篇文章就写一下调试过程，没有什么是debug不能解决的，如果有，那就两次': 1, 'dma是directmemoryaccess的缩写，顾名思义，就是绕开cpu直接访问memory的意思': 1, '谈到adc，我们还要第一次引入另外一个重要的设备dma.dma是什么东西呢': 1}
macaca:::{'macaca是一套完整的自动化测试解决方案，基于node.js开发': 1, 'macaca是一套面向用户端软件的测试解决方案，提供了自动化驱动，周边工具，集成方案，旨在解决终端上的测试、自动化、性能等方面的问题': 1, 'macaca是monkey的一种，含义引自(monkeytest)，取灵动、敏捷之意': 1, '因为macaca是用node.js工具开发的，所以需要安装其开发平台': 1, 'macaca是阿里巴巴集团开发的一套完整的自动化测试解决方案': 1, 'macaca是如何将这一java写成的工具集成到自身的呢，本文将对此进行分析，让大家更加快乐、明白地使用macaca': 1, '可以看到，最终我们的自动化指令是要通过uiautomator这个框架来驱动的，如何用该框架的api进行自动化代码编写读者可以参照网上的各种教程，这里笔者通过swipe操作的实现来简单地介绍macaca是如何使用该框架api的': 1, 'macaca是由阿里集团开源的框架，官方网站提供了中文版以及英文版双语文档，虽然对于开发者而言，阅读英文文档的能力是必须的，但是中文文档的提供无疑能帮助很多基础相对薄弱的同学快速入门': 1, 'macaca是由阿里巴巴公司开发的一套自动化解决方案，适用于pc端和移动端': 1, '可以认为macaca是一个轻量级的appium': 1}
uiautomator:::{'因为uiautomator是独占资源，所以当atx运行的时候uiautomatorviewer是不能用的，为了减少atx频繁的启停，我们开发了基于浏览器技术的weditorui查看器': 2, 'uiautomator是一款android自动化测试框架，注入原生事件进行模拟用户操作': 1, 'uiautomator是google提供的框架，经历了1.0和2.0版本，1.0版本和appium比较像（1.0基本没人用了），2.0版本是基于安卓app单元测试框架来实现的，用androidstudio来写，写在androidtest目录下，用单元测试的方式执行测试，属于android工程，打出来是apk包，安装在手机上就可以测试，可以脱离电脑，电脑之只需要触发一下就可以': 1, 'uiautomator是google提供的用来做安卓自动化测试的一个java库': 1, '因为uiautomator是独占资源，所以当atx运行的时候uiautomatorviewer是不能用的，为了减少atx频繁的启停，就需要用到此工具': 1, 'uiautomator是android的自动化测试框架，可跨app': 2, 'uiautomator是google提供的安卓自动化测试java库，功能很强，但测试脚本只能使用java语言，脚本要打包成jar或者apk包上传到设备上才能运行': 1, '上一篇文章《uiautomator源码分析之启动和运行》我们描述了uitautomator从命令行运行到加载测试用例运行测试的整个流程，过程中我们也描述了uiautomatorbridge这个类的重要性,说它相当于uiautomation的代理(我们都知道uiautomator是通过uiautomation和accessibilityservice进行连接然后获取界面空间信息和注入事件的).那么今天开始我们就围绕这个类以及跟它有关系的类进行进一步的分析': 1, '通过上一篇《android4.3引入的uiautomation新框架官方简介》我们可以看到uiautomator其实就是使用了uiautomation这个新框架，通过调用accessibilitserviceapis来获取窗口界面控件信息已经注入用户行为事件，那么今天开始我们就一起去看下uiautomator是怎么运作的': 1, 'uiautomator是google开发的一款运行在android设备上的ui自动化测试工具，基于java语言，使用它有一个限制，就是必须打包成apk或jar，然后上传到设备，才能运行': 1}
stf:::{'openstf是一个手机设备管理平台，可以对手机进行远程管理、调试、远程手机桌面监控等操作': 4, 'openstf是使用nodejs和angularjs开发，遵循apachelicene2.0开源协议，用户可以对源码进行修改发布': 1, '其中openstf是开源项目，其他的平台大多也都是基于openstf原理实现的': 1, '看看stf是如何发现有新的设备连上usb的': 1, 'openstf是使用nodejs和angularjs开发，遵循apachelicene2.0开源协议，用户可以对源码进行修改发布，': 2, 'stf是一个手机的远程控制平台，有点像远程协助似的，不过操作的不是远方的电脑，而是手机，且在网页上操作': 1, 'stf是一个很厉害的项目，开发了一大批周边插件': 1, '一、openstf是什么': 1, 'openstf是一个可以通过网页管理和使用移动设备的平台，支持远程调试、远程使用手机浏览器打开链接、远程执行shell脚本、远程拖拽安装app、远程查看日志、远程截屏等功能': 1}
gitbook:::{'实际上，gitbook是一个基于node.js的命令行工具，支持markdown和asciidoc两种语法格式，可以输出html、pdf、ebook等格式的电子书': 2, '因为gitbook是基于node.js，所以我们首先需要安装node.js（下载地址：https://nodejs.org/en/download/），找到对应平台的版本安装即可': 2, 'gitbook是一个基于node.js的命令行工具，可使用github/git和markdown来制作精美的电子书，gitbook并非关于git的教程': 2, 'gitbook是一个基于node.js开发的命令行工具，使用它可以很方便的管理电子书，gitbook是目前最流行的开源书籍写作方案': 1, 'gitbook是开源的，地址：https://github.com/gitbookio/gitbook': 1, '因为gitbook是使用node.js开发的，需要通过node.js包管理工具npm安装，所以在开始之前要先把nodejs安装好': 1, '####gitbook是一个基于node.js的命令行工具，可使用github/git和markdown来制作精美的电子书，实现同步，分享，记录': 1, '由于gitbook是基于nodejs的工具，所以安装gitbook前需先安装nodejs': 1, 'gitbook并非关于[git]的教程，gitbook是一个基于node.js的命令行工具，支持markdown和asciidoc两种语法格式，使用它可以输出html、pdf、ebook等格式来制作精美的电子书': 1, 'gitbook是一个基于node.js的命令行工具，可使用git和markdown来编写文档': 1, 'gitbook是一个基于node.js的命令行工具，支持markdown和asciidoc两种语法格式，可以输出html、pdf、ebook等格式的电子书': 1, 'gitbook是一个基于node.js的命令行工具，可使用github/git和markdown来制作精美的电子书': 1, 'gitbook是一个基于node.js的命令行工具，可使用github/git和markdown来制作精美的电子书，目前gitbook可以支持生成静态html和pdf文档': 1, 'gitbook是一个基于node.js的命令行工具，使用前需要node.js的环境，先下载node.js并安装': 1}
redmine:::{'这是一种万金油式的方法，如果掌握了，不管redmine是从哪个版本升级到哪个版本，你都能轻松搞定': 1, '我的redmine是用bitnami-redmine安装在linux服务器上的': 1, '由于redmine是将数据保存在mysql中，所以不同的版本，表结构可能会有所不同': 2, 'redmine是一款非常优秀的项目管理平台，但有个明显的缺点——没有消息推送功能，也就是说当redmine上的任务有更新时，干系人无法及时的获取消息': 1, '其中redmine是用户名，my_password是密码': 1, '首先介绍我第一步下载的文件，我参考网上的资料，大致有三种安装方式，第一种事集成安装，有一款软件把所有安装步骤集成了，你只用点下一步，感觉很棒噢，我瞬间心动了，然后下载咯，就是上面那个bitnami-redmine-3.4.3-1，然后满怀期待的点开了，然而事实证明我并不是被老天眷顾的主角，我没能成功一直“下一步”下去，感觉心态都爆炸了，为什么别人都可以，我就不可以，然后我发现大家其实好多都没成功，然后我安心的去寻找下一个方法了，前面说了redmine是使用的ror技术，我们第一次简单的方法没成功，就只有自己一步一步来了，安装ror网上有两种方式，一种也是使用别人写好的工具包，直接安装环境和框架，一种是自己先安装语言环境，然后安装框架，这里推荐大家使用工具包，毕竟ruby的环境安装比java复杂，很多人java都玩蹦了，更别说ruby了，这里使用的工具包我也下载了，叫做railsinstaller,这个工具包就比上一个靠谱，毕竟我成功了，这里的版本选择最新的，毕竟好久没更新了，大家安装好了之后可以查看自己的环境，使用命令提示符查看，首先使用winds+r弹出命令框，运行cmd后出现命令提示符，使用ruby-v,rails-v,gem-v查看安装是否成功，如果出现如下类似的图那么恭喜你成功了': 1}
reveal:::{'commitreveal是一种在规定时间内可以有多人一起参与产生随机数的流程': 1, 'reveal是ios开发工具中的神器之一，它能够在应用程序运行过程中调试应用程序界面': 1, 'reveal是分析、调试ios应用ui的利器': 1}
mta:::{'mta（mailtransferagent）：mua是用在client端的软件，而mta是用在邮件主机上的软件，它也是主要的邮件服务器': 1, 'mta（mailtransferagent），mta就是“邮件传输代理”的意思，mta是用在邮件主机上的软件，它也是主要的邮件服务器': 1, '当前只安装了sendmail,所以当前的mta是sendmail,安装postfix后继续查看': 1, '•mta是mediaterminaladapter的缩写，它可以将voip网络协议和普通的模拟电话信号进行转换，普通模拟电话可通过mta和接在远端mta或pstn的电话通话': 1}
bugfree:::{'（3）、bugfree是软件开发中管理软件bug的一种工具': 1, 'bugfree是借鉴微软的研发流程和bug管理理念，基于php和mysql由一淘测试团队工具组负责开发完成的一个bug管理系统': 1}
bot:::{'原因显而易见：bot是帮用户边聊天边把事办了，而im软件对于用户来说就是聊天用的……': 1, '上次我们讲了teamsbot开发的概述，讲了azurebotservice，botframeworksdk和我们自己的bot服务的概念，这篇文章就带大家看看azurebotservice和我们的bot是如何发生关系的': 1, 'microbot是一只藏在微服务中的小马蝇，有了它，我们可以在slack、hipchat、xmpp等等聊天程序中与它对话，通过它来操控服务': 1}
accessibility:::{}
frida:::{'frida是一款基于python+javascript的hook与调试框架': 1, 'frida是个轻量级别的hook框架，是pythonapi，但javascript调试逻辑': 1, '(3)验证frida是否启动成功，在电脑clinet端新起cmd执行（注意要退出adbshell）': 1, '因为frida是在模拟器上启动的，宿主机是没办法直接访问的，需要进行端口转发，默认端口是27042': 1, 'frida是一个跨平台的动态分析工具，支持ios、android、macos等主流的操作系统，提供了功能丰富的python和javascript接口，能够在运行时注入进程，获取进程相关信息、hook函数、修改参数、调用指定函数等等，逆向研究人员如果运用好frida这一神兵利器，能够快速定位到关键点，提高分析的效率': 1, 'frida是一款基于python+javascript的hook框架，可运行在android、ios、linux、win等各个平台，主要使用的动态二进制插桩技术': 1, 'frida是以python为载体，注入javascript作为android中执行代码的一款hook框架，可用android、ios、linux、win等平台': 1, 'frida–version测试frida是否安装成功': 1}
confluence:::{'如果你的confluence是运行在一个反向代理后面的话，你需要通过confluence内部synchrony代理来连接synchrony': 1, '如果synchrony不能访通过/synchrony-proxy进行访问，我们将会自动的尝试/confluence/synchrony-proxy（/confluence是你confluence的上下文）': 1, '如果你的confluence是运行在一个反向代理的后面，但是你在通过confluence的内部synchrony代理进行连接的时候遇到了问题或者无法连接的情况，你可以选择连接目录到synchrony': 1, '如果synchrony不能访通过/synchrony-proxy进行访问，我们将会自动的长沙/confluence/synchrony-proxy（/confluence是你confluence的上下文）': 1, 'confluence是atlassian公司的产品，是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki': 1, 'confluence是一个企业级的wiki软件，可用于在企业、部门、团队内部进行信息共享和协同编辑': 1, 'confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki': 1}
nt:::{'说道这提到一点，nt是一个应用程序，应用程序，肯定会存在相关信息记录(错误记录、启动、停止等等)，而nt是一个隐藏性的，因为我们一般会用到系统的事物日志(当然，你自己也可以写日志或者使用log4net)来记录这些消息': 1, 'windowsnt是基于os/2nt的基础编制的': 1, '面世之后的windowsnt是一种纯32位操作系统，采用先进的nt核心技术': 1, 'nt是逐步堆积而成的，缺乏对应于unix“一切皆文件”或macos桌面的统一性理念': 1, 'logevent是另一个cntservice函数，它使用事件类型（信息，警告或错误），事件消息的id，以及形成日志消息的最多三个参数的替代串：': 1, 'windowsnt是microsoft推出的面向工作站、网络服务器和大型计算机的网络操作系统，也可做pc操作系统': 1, '最近在分析一个驱动级别的脱壳器ollybone(ollydbg的一个插件),遂即对驱动做了简单的了解，驱动程序主要分为两类：一类是不支持即插即用的nt是驱动程序如ntddk.h；另外一类是支持即插即用的wdm驱动程序，如wdm.h': 1}
testflight:::{'testflight是苹果itunes官网提供的app内测分发工具，提供25个可信度高的权限高的内测名额（开发人员自用），以及2000个外部测试名额（其他任何人都可以，无需注册手机udid到开发者中心）': 1, '因为testflight不够好用，testflight是苹果在2014年收购并整合到itunesconnect里的一个测试工具，作为一个ios开发者是在测试ios应用上必用的工具，不论是京东还是qq邮箱等，都会使用testflight来分发测试应用': 1, 'testflight是一个很棒的工具，而且关键，它现在还是免费的～': 2}
epmd:::{'epmd是分布式erlang中比较重要的模块': 1, '一般来说epmd是在使用erl命令时自动启动的（如果之前没启动过），但是也可以在开机的时候启动': 1, 'epmd是erlangportmapperdaemon的缩写，在erlang集群中的作用相当于dns的作用，提供节点名称到端口的查询服务，epmd绑定在总所周知的4369端口上': 1, 'epmd是个标准的tcp服务器，它的协议如下：': 1, 'epmd是erlangportmapperdaemon的缩写，用于erlang集群中的节点互通': 1}
ci:::{'首先使用一张图说明gitlabci的工作流程：gitlabci是gitlab提供的持续集成服务，只要在你的仓库根目录创建一个.gitlab-ci.yml文件，并为该项目指派一个runner，当有合并请求或者push的时候就会触发build': 1, '那么，gitlabci是什么': 1, 'gitlabci是gitlab内置的进行持续集成的工具，只需要在仓库根目录下创建.gitlab-ci.yml文件，并配置gitlabrunner；每次提交的时候，gitlab将自动识别到.gitlab-ci.yml文件，并且使用gitlabrunner执行该脚本': 1, '这个是一个很大的误区，ci是解决问题的手段而不是目的，目的要如何提高代码质量': 1, 'travisci是什么东东': 1, 'travisci是在线托管的ci服务，用travis来进行持续集成，不需要自己搭服务器，傻瓜式操作，用起来更方便': 1, 'travisci是最古老的托管解决方案之一，赢得了许多人的信任': 1, 'gitlabci是开源rails项目gitlab的一个组成部分，gitlab公司将其暴露出来': 1}
saucelabs:::{'saucelabs是一个提供自动化功能测试的云测试服务公司': 1, 'saucelabs是跨浏览器自动化工具，建立在著名的seleniumweb驱动程序的基础上': 1, 'saucelabs是一个云测试服务平台，在云上提供vms运行多个测试，并提供了视频录制，截图和日志记录功能，很好地解决了多个自动化测试并行运行的设备问题': 1, '我是一个开源作者，所以我只看那些提供开源项目的供应商，它们之中，只有saucelabs是唯一一个不需要我邮箱支持就能启动一个新的开源账户': 1, 'saucelabs是处于安全性的考虑被设计的，并且使得外部无法获得你的代码': 1}
qamaster:::{}
jira:::{'jira是目前比较流行的基于java架构的管理系统，由于atlassian公司对很多开源项目实行免费提供缺陷跟踪服务，因此在开源领域，其认知度比其他的产品要高得多，而且易用性也好一些': 2, 'jira是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的atlassian': 2, 'jira是一个商业软件，按照活动用户数进行授权，价格随活动用户数量递增': 1, 'jira是atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域': 3, 'jira是集项目计划、任务分配、需求管理、错误跟踪于一体的商业软件': 1, 'jira是atlassian公司的产品': 1, '一、jira是什么': 1, '2.1jira是一个缺陷跟踪管理系统，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域': 1}
flurry:::{'flurry是云集自研的一款轻量级、异步流式化、针对dubbo的高性能api网关': 1, 'flurry是一家专门为移动应用提供数据统计和分析的公司': 4, '根据flurry和友盟的官方数据，有超过36万个应用使用flurry，有超过18万个应用使用友盟2.flurry是国外的公司，保持独立和专注，数据安全性更高；友盟现在已经被阿里收购，当用户的应用涉及的业务和阿里有类似或者重合的时候，那么该数据统计有潜在的安全性问题，这也是京东不支持用支付宝付款的原因': 1, '可以说flurry是目前最全面的移动应用统计分析产品，除了统计单个应用内的各类数据指标外，还可以提供跨应用之间的转化统计等针对企业级用户的功能': 3, 'android-flurry统计：flurry官方地址：https://developer.yahoo.com/flurry登录地址：https://login.flurry.com/前言：flurry是国外一家专门为移动应用提供数据统计和分析的公司': 1, 'flurry是一个免费为手机应用开发者对自己的应用进行统计的服务，界面有些类似于goolge分析，我们现在公司各个应用和游戏都已经嵌入了flurry的sdk,不过我们一般都只是用来统计用户量和用户玩游戏的时长': 1, 'flurry是一个提供多功能手机应用服务的网站': 1}
finder:::{'有些小伙伴还不是很理解什么是访达，finder是mac系统上类似window资源管理器的程序，通过finder，用户能查看mac上几乎全部内容，包括应用软件、硬盘、文件、文件夹和dvd等等，今天小编为您带来了mac访达功能介绍，为您介绍访达窗口': 1, 'mac上的访达finder是mac电脑的中心': 1, 'macosfinder是一个方便的实用程序，但是如果您自定义外观，它可能会为您提供更好的服务': 1, 'finder是mac电脑的系统程序，有的功能类似windows的资源管理器': 1, '众所周知finder是不显示路径的，你进入某个文件夹只会显示当前文件夹的名字而已': 2, 'awvs-targetfinder是端口扫描，并且猜测端口对应的服务以及web服务的banner信息第一步：使用谷歌黑客语法，随便找去一个网站第二步：进入第一个网站，查看网站域名信息第三步：获取目标网站的ip地址第四步：将ip地址复制到awvs中，并开始攻击结果显示目标网站是使用的iis10.0版本搭建的，其中banner信息管理员是可以修改的（防止黑客攻击），所以有的时候猜解不是特别准确': 1}
wiki:::{'dokuwiki是一个开源wiki引擎程序，运行于php环境下': 1, 'wiki是任何人都可以编辑的网页': 1, 'wiki的发明人wardcunningham一次看到机场巴士上写着wikiwikibus，wiki是夏威夷语“快”的意思，他后来就用wiki来命名我们现在用的自由协作网站，中文的正式翻译还没有，我们姑且把他叫做维客自由协作网': 1, '但是我认为从比较严格的意义上来说，blog和wiki是完全不同的东西，服务这完全不同的目的': 1, '4.最大的wiki程序社区：mediawiki是目前应用最广的wiki程序，数以万计的网站在使用它，很容易找到范例站点有大量的热心参与人员参与研究，资料多，容易找到互相交流的朋友': 1, '持续开发，程序特性功能不断完善，保证未来的支持mediawiki是受到维基媒体基金会支持的开源项目，在功能、性能、安全方面将不断优化': 1, 'wiki是全开放的，万一有陌生人来网站上乱搞怎么办': 1, 'wiki是一个协同著作平台或称开放编辑系统': 1, 'xwiki是一个由java编写的基于lgpl协议发布的开源wiki和应用平台': 1, '之前只接触过mediawiki，但是mediawiki是用php写的，一直想找找看有没有熟悉的java语言的wiki系统': 1, 'amwiki是一款由js开发、依赖atom或nodejs-npm的markdown轻量级前端化开源文库系统': 1}